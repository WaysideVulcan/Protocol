// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2023.2 (win64) Build 4029153 Fri Oct 13 20:14:34 MDT 2023
// Date        : Thu May  9 19:08:13 2024
// Host        : Vulcan running 64-bit major release  (build 9200)
// Command     : write_verilog -force -mode funcsim
//               c:/Vulcan/Protocol/Display/v_dp_rxss1_0_ex/v_dp_rxss1_0_ex.gen/sources_1/bd/dpss_vck190_pt/ip/dpss_vck190_pt_dprx_gt_ip0_0/dpss_vck190_pt_dprx_gt_ip0_0_sim_netlist.v
// Design      : dpss_vck190_pt_dprx_gt_ip0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xcvc1902-vsva2197-2MP-e-S
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "dpss_vck190_pt_dprx_gt_ip0_0,dpss_vck190_pt_dprx_gt_ip0_0_top,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "dpss_vck190_pt_dprx_gt_ip0_0_top,Vivado 2023.2" *) 
(* NotValidForBitStream *)
module dpss_vck190_pt_dprx_gt_ip0_0
   (gt_ctrl_aclk,
    gt_ctrl_aresetn,
    dp_gt_ctrl,
    status_sb_rx_tdata,
    status_sb_rx_tvalid,
    status_sb_rx_tready,
    control_sb_rx_tdata,
    control_sb_rx_tvalid,
    control_sb_rx_tready,
    ch0_rxdata,
    ch0_rxuserrdy,
    ch0_rxpmaresetdone,
    ch0_rxmstdatapathreset,
    ch0_rxprogdivreset,
    ch0_rxresetdone,
    ch0_rxbufstatus,
    ch0_rxmstreset,
    ch0_rxmstresetdone,
    ch0_rxcdrlock,
    ch0_rxbyteisaligned,
    ch0_rxctrl0,
    ch0_rxctrl1,
    ch0_rxctrl3,
    ch0_rxlpmen,
    ch0_rxpd,
    ch0_rxpolarity,
    ch0_rxprbserr,
    ch0_rxprbssel,
    ch0_rxrate,
    ch0_rxpcsresetmask,
    ch0_rxpmaresetmask,
    ch1_rxdata,
    ch1_rxuserrdy,
    ch1_rxpmaresetdone,
    ch1_rxmstdatapathreset,
    ch1_rxprogdivreset,
    ch1_rxresetdone,
    ch1_rxbufstatus,
    ch1_rxmstreset,
    ch1_rxmstresetdone,
    ch1_rxcdrlock,
    ch1_rxbyteisaligned,
    ch1_rxctrl0,
    ch1_rxctrl1,
    ch1_rxctrl3,
    ch1_rxlpmen,
    ch1_rxpd,
    ch1_rxpolarity,
    ch1_rxprbserr,
    ch1_rxprbssel,
    ch1_rxrate,
    ch1_rxpcsresetmask,
    ch1_rxpmaresetmask,
    ch2_rxdata,
    ch2_rxuserrdy,
    ch2_rxpmaresetdone,
    ch2_rxmstdatapathreset,
    ch2_rxprogdivreset,
    ch2_rxresetdone,
    ch2_rxbufstatus,
    ch2_rxmstreset,
    ch2_rxmstresetdone,
    ch2_rxcdrlock,
    ch2_rxbyteisaligned,
    ch2_rxctrl0,
    ch2_rxctrl1,
    ch2_rxctrl3,
    ch2_rxlpmen,
    ch2_rxpd,
    ch2_rxpolarity,
    ch2_rxprbserr,
    ch2_rxprbssel,
    ch2_rxrate,
    ch2_rxpcsresetmask,
    ch2_rxpmaresetmask,
    ch3_rxdata,
    ch3_rxuserrdy,
    ch3_rxpmaresetdone,
    ch3_rxmstdatapathreset,
    ch3_rxprogdivreset,
    ch3_rxresetdone,
    ch3_rxbufstatus,
    ch3_rxmstreset,
    ch3_rxmstresetdone,
    ch3_rxcdrlock,
    ch3_rxbyteisaligned,
    ch3_rxctrl0,
    ch3_rxctrl1,
    ch3_rxctrl3,
    ch3_rxlpmen,
    ch3_rxpd,
    ch3_rxpolarity,
    ch3_rxprbserr,
    ch3_rxprbssel,
    ch3_rxrate,
    ch3_rxpcsresetmask,
    ch3_rxpmaresetmask,
    rx_axi4s_ch0_tdata,
    rx_axi4s_ch0_tuser,
    rx_axi4s_ch0_tvalid,
    rx_axi4s_ch0_tready,
    rx_axi4s_ch1_tdata,
    rx_axi4s_ch1_tuser,
    rx_axi4s_ch1_tvalid,
    rx_axi4s_ch1_tready,
    rx_axi4s_ch2_tdata,
    rx_axi4s_ch2_tuser,
    rx_axi4s_ch2_tvalid,
    rx_axi4s_ch2_tready,
    rx_axi4s_ch3_tdata,
    rx_axi4s_ch3_tuser,
    rx_axi4s_ch3_tvalid,
    rx_axi4s_ch3_tready,
    gt_rxusrclk,
    rx_mmcm_locked,
    rx_pll0_locked,
    rx_pll1_locked,
    rx_pll1_reset,
    rx_pll0_reset,
    rx_bufg_gt_clr,
    gt_powergood);
  (* X_INTERFACE_INFO = "xilinx.com:signal:clock:1.0 gt_ctrl_aclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME gt_ctrl_aclk, FREQ_HZ 99999001, FREQ_TOLERANCE_HZ 0, PHASE 0.0, CLK_DOMAIN bd_65e0_pspmc_0_0_pl0_ref_clk, ASSOCIATED_BUSIF :DP_RX_PHY_SB_STS:DP_RX_PHY_SB_CTRL, ASSOCIATED_RESET /dprx_gt_ip0/gt_ctrl_aresetn, INSERT_VIP 0" *) input gt_ctrl_aclk;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 gt_ctrl_aresetn RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME gt_ctrl_aresetn, POLARITY ACTIVE_LOW, INSERT_VIP 0" *) input gt_ctrl_aresetn;
  input [31:0]dp_gt_ctrl;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_STS tdata" *) output [15:0]status_sb_rx_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_STS tvalid" *) output status_sb_rx_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_STS tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_PHY_SB_STS, TDATA_NUM_BYTES 2, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 99999001, PHASE 0.0, CLK_DOMAIN bd_65e0_pspmc_0_0_pl0_ref_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) input status_sb_rx_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_CTRL tdata" *) input [7:0]control_sb_rx_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_CTRL tvalid" *) input control_sb_rx_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_PHY_SB_CTRL tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_PHY_SB_CTRL, TDATA_NUM_BYTES 1, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 0, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 99999001, PHASE 0.0, CLK_DOMAIN bd_65e0_pspmc_0_0_pl0_ref_clk, LAYERED_METADATA undef, INSERT_VIP 0" *) output control_sb_rx_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxdata" *) input [31:0]ch0_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxuserrdy" *) output ch0_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxpmaresetdone" *) input ch0_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxmstdatapathreset" *) output ch0_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxprogdivreset" *) output ch0_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxresetdone" *) input ch0_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxbufstatus" *) input [2:0]ch0_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxmstreset" *) output ch0_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxmstresetdone" *) input ch0_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxcdrlock" *) input ch0_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxbyteisaligned" *) input ch0_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxctrl0" *) input [15:0]ch0_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxctrl1" *) input [15:0]ch0_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxctrl3" *) input [7:0]ch0_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxlpmen" *) output ch0_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxpd" *) output [1:0]ch0_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxpolarity" *) output ch0_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxprbserr" *) input ch0_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxprbssel" *) output [3:0]ch0_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxrate" *) output [2:0]ch0_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxpcsresetmask" *) output [4:0]ch0_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX0 ch_rxpmaresetmask" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_RX0, PARENT_ID dpss_vck190_pt_dprx_gt_ip0_0, CHNL_NUMBER 0, MASTERCLK_SRC 1, GT_DIRECTION SIMPLEX_RX, RX_SETTINGS LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 1.62 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 101.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 810.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 0.9718056 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 2.7 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 168.750 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 1.6196761 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR2_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 5.4 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 337.500 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 3.2393521 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR3_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 8.1 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 506.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 506.250 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 4.8590282 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE undef" *) output [6:0]ch0_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxdata" *) input [31:0]ch1_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxuserrdy" *) output ch1_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxpmaresetdone" *) input ch1_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxmstdatapathreset" *) output ch1_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxprogdivreset" *) output ch1_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxresetdone" *) input ch1_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxbufstatus" *) input [2:0]ch1_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxmstreset" *) output ch1_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxmstresetdone" *) input ch1_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxcdrlock" *) input ch1_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxbyteisaligned" *) input ch1_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxctrl0" *) input [15:0]ch1_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxctrl1" *) input [15:0]ch1_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxctrl3" *) input [7:0]ch1_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxlpmen" *) output ch1_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxpd" *) output [1:0]ch1_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxpolarity" *) output ch1_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxprbserr" *) input ch1_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxprbssel" *) output [3:0]ch1_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxrate" *) output [2:0]ch1_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxpcsresetmask" *) output [4:0]ch1_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX1 ch_rxpmaresetmask" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_RX1, PARENT_ID dpss_vck190_pt_dprx_gt_ip0_0, CHNL_NUMBER 1, MASTERCLK_SRC 0, GT_DIRECTION SIMPLEX_RX, RX_SETTINGS LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 1.62 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 101.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 810.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 0.9718056 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 2.7 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 168.750 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 1.6196761 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR2_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 5.4 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 337.500 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 3.2393521 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR3_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 8.1 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 506.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 506.250 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 4.8590282 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE undef" *) output [6:0]ch1_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxdata" *) input [31:0]ch2_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxuserrdy" *) output ch2_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxpmaresetdone" *) input ch2_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxmstdatapathreset" *) output ch2_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxprogdivreset" *) output ch2_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxresetdone" *) input ch2_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxbufstatus" *) input [2:0]ch2_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxmstreset" *) output ch2_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxmstresetdone" *) input ch2_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxcdrlock" *) input ch2_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxbyteisaligned" *) input ch2_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxctrl0" *) input [15:0]ch2_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxctrl1" *) input [15:0]ch2_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxctrl3" *) input [7:0]ch2_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxlpmen" *) output ch2_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxpd" *) output [1:0]ch2_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxpolarity" *) output ch2_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxprbserr" *) input ch2_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxprbssel" *) output [3:0]ch2_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxrate" *) output [2:0]ch2_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxpcsresetmask" *) output [4:0]ch2_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX2 ch_rxpmaresetmask" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_RX2, PARENT_ID dpss_vck190_pt_dprx_gt_ip0_0, CHNL_NUMBER 2, MASTERCLK_SRC 0, GT_DIRECTION SIMPLEX_RX, RX_SETTINGS LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 1.62 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 101.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 810.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 0.9718056 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 2.7 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 168.750 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 1.6196761 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR2_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 5.4 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 337.500 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 3.2393521 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR3_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 8.1 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 506.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 506.250 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 4.8590282 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE undef" *) output [6:0]ch2_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxdata" *) input [31:0]ch3_rxdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxuserrdy" *) output ch3_rxuserrdy;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxpmaresetdone" *) input ch3_rxpmaresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxmstdatapathreset" *) output ch3_rxmstdatapathreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxprogdivreset" *) output ch3_rxprogdivreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxresetdone" *) input ch3_rxresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxbufstatus" *) input [2:0]ch3_rxbufstatus;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxmstreset" *) output ch3_rxmstreset;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxmstresetdone" *) input ch3_rxmstresetdone;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxcdrlock" *) input ch3_rxcdrlock;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxbyteisaligned" *) input ch3_rxbyteisaligned;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxctrl0" *) input [15:0]ch3_rxctrl0;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxctrl1" *) input [15:0]ch3_rxctrl1;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxctrl3" *) input [7:0]ch3_rxctrl3;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxlpmen" *) output ch3_rxlpmen;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxpd" *) output [1:0]ch3_rxpd;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxpolarity" *) output ch3_rxpolarity;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxprbserr" *) input ch3_rxprbserr;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxprbssel" *) output [3:0]ch3_rxprbssel;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxrate" *) output [2:0]ch3_rxrate;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxpcsresetmask" *) output [4:0]ch3_rxpcsresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:gt_rx_interface:1.0 GT_RX3 ch_rxpmaresetmask" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME GT_RX3, PARENT_ID dpss_vck190_pt_dprx_gt_ip0_0, CHNL_NUMBER 3, MASTERCLK_SRC 0, GT_DIRECTION SIMPLEX_RX, RX_SETTINGS LR0_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 1.62 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 101.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 810.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 0.9718056 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR1_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 2.7 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 168.750 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 1.6196761 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR2_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 5.4 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 337.500 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 675.000 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 5000 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 3.2393521 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0} LR3_SETTINGS {PRESET None RX_PAM_SEL NRZ RX_HD_EN 0 RX_GRAY_BYP true RX_GRAY_LITTLEENDIAN true RX_PRECODE_BYP true RX_PRECODE_LITTLEENDIAN false INTERNAL_PRESET None GT_TYPE GTY RX_LINE_RATE 8.1 RX_PLL_TYPE LCPLL RX_REFCLK_FREQUENCY 270 RX_ACTUAL_REFCLK_FREQUENCY 270.000000000000 RX_FRACN_ENABLED false RX_FRACN_OVRD false RX_FRACN_NUMERATOR 0 RX_REFCLK_SOURCE R0 RX_DATA_DECODING RAW RX_USER_DATA_WIDTH 16 RX_INT_DATA_WIDTH 16 RX_BUFFER_MODE 1 RX_OUTCLK_SOURCE RXPROGDIVCLK RXPROGDIV_FREQ_ENABLE true RXPROGDIV_FREQ_SOURCE LCPLL RXPROGDIV_FREQ_VAL 506.250 RXRECCLK_FREQ_ENABLE true RXRECCLK_FREQ_VAL 506.250 INS_LOSS_NYQ 14 RX_EQ_MODE LPM RX_COUPLING AC RX_TERMINATION PROGRAMMABLE RX_RATE_GROUP A RX_TERMINATION_PROG_VALUE 800 RX_PPM_OFFSET 300 RX_64B66B_DESCRAMBLER false RX_64B66B_DECODER false RX_64B66B_CRC false OOB_ENABLE false RX_COMMA_ALIGN_WORD 1 RX_COMMA_SHOW_REALIGN_ENABLE true PCIE_ENABLE false RX_COMMA_P_ENABLE false RX_COMMA_M_ENABLE false RX_COMMA_DOUBLE_ENABLE false RX_COMMA_P_VAL 0101111100 RX_COMMA_M_VAL 1010000011 RX_COMMA_MASK 0000000000 RX_SLIDE_MODE OFF RX_SSC_PPM 0 RX_CB_NUM_SEQ 0 RX_CB_LEN_SEQ 1 RX_CB_MAX_SKEW 1 RX_CB_MAX_LEVEL 1 RX_CB_MASK 00000000 RX_CB_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CB_K 00000000 RX_CB_DISP 00000000 RX_CB_MASK_0_0 false RX_CB_VAL_0_0 00000000 RX_CB_K_0_0 false RX_CB_DISP_0_0 false RX_CB_MASK_0_1 false RX_CB_VAL_0_1 00000000 RX_CB_K_0_1 false RX_CB_DISP_0_1 false RX_CB_MASK_0_2 false RX_CB_VAL_0_2 00000000 RX_CB_K_0_2 false RX_CB_DISP_0_2 false RX_CB_MASK_0_3 false RX_CB_VAL_0_3 00000000 RX_CB_K_0_3 false RX_CB_DISP_0_3 false RX_CB_MASK_1_0 false RX_CB_VAL_1_0 00000000 RX_CB_K_1_0 false RX_CB_DISP_1_0 false RX_CB_MASK_1_1 false RX_CB_VAL_1_1 00000000 RX_CB_K_1_1 false RX_CB_DISP_1_1 false RX_CB_MASK_1_2 false RX_CB_VAL_1_2 00000000 RX_CB_K_1_2 false RX_CB_DISP_1_2 false RX_CB_MASK_1_3 false RX_CB_VAL_1_3 00000000 RX_CB_K_1_3 false RX_CB_DISP_1_3 false RX_CC_NUM_SEQ 0 RX_CC_LEN_SEQ 1 RX_CC_PERIODICITY 5000 RX_CC_KEEP_IDLE DISABLE RX_CC_PRECEDENCE ENABLE RX_CC_REPEAT_WAIT 0 RX_CC_MASK 00000000 RX_CC_VAL 00000000000000000000000000000000000000000000000000000000000000000000000000000000 RX_CC_K 00000000 RX_CC_DISP 00000000 RX_CC_MASK_0_0 false RX_CC_VAL_0_0 00000000 RX_CC_K_0_0 false RX_CC_DISP_0_0 false RX_CC_MASK_0_1 false RX_CC_VAL_0_1 00000000 RX_CC_K_0_1 false RX_CC_DISP_0_1 false RX_CC_MASK_0_2 false RX_CC_VAL_0_2 00000000 RX_CC_K_0_2 false RX_CC_DISP_0_2 false RX_CC_MASK_0_3 false RX_CC_VAL_0_3 00000000 RX_CC_K_0_3 false RX_CC_DISP_0_3 false RX_CC_MASK_1_0 false RX_CC_VAL_1_0 00000000 RX_CC_K_1_0 false RX_CC_DISP_1_0 false RX_CC_MASK_1_1 false RX_CC_VAL_1_1 00000000 RX_CC_K_1_1 false RX_CC_DISP_1_1 false RX_CC_MASK_1_2 false RX_CC_VAL_1_2 00000000 RX_CC_K_1_2 false RX_CC_DISP_1_2 false RX_CC_MASK_1_3 false RX_CC_VAL_1_3 00000000 RX_CC_K_1_3 false RX_CC_DISP_1_3 false PCIE_USERCLK2_FREQ 250 PCIE_USERCLK_FREQ 250 RX_JTOL_FC 4.8590282 RX_JTOL_LF_SLOPE -20 RX_BUFFER_BYPASS_MODE Fast_Sync RX_BUFFER_BYPASS_MODE_LANE MULTI RX_BUFFER_RESET_ON_CB_CHANGE ENABLE RX_BUFFER_RESET_ON_COMMAALIGN DISABLE RX_BUFFER_RESET_ON_RATE_CHANGE ENABLE RESET_SEQUENCE_INTERVAL 0 RX_COMMA_PRESET NONE RX_COMMA_VALID_ONLY 0}, ADDITIONAL_QUAD_SETTINGS GT_TYPE GTY, ADDITIONAL_CONFIG_FILE no_addn_file_loaded, ADDITIONAL_CONFIG_ENABLE undef" *) output [6:0]ch3_rxpmaresetmask;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH0 tdata" *) output [31:0]rx_axi4s_ch0_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH0 tuser" *) output [11:0]rx_axi4s_ch0_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH0 tvalid" *) output rx_axi4s_ch0_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH0 tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_AXI4S_CH0, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 12, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 506250000.0, PHASE 0.0, CLK_DOMAIN dpss_vck190_pt_gt_quad_base_0_ch0_rxoutclk, LAYERED_METADATA undef, INSERT_VIP 0" *) input rx_axi4s_ch0_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH1 tdata" *) output [31:0]rx_axi4s_ch1_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH1 tuser" *) output [11:0]rx_axi4s_ch1_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH1 tvalid" *) output rx_axi4s_ch1_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH1 tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_AXI4S_CH1, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 12, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 506250000.0, PHASE 0.0, CLK_DOMAIN dpss_vck190_pt_gt_quad_base_0_ch0_rxoutclk, LAYERED_METADATA undef, INSERT_VIP 0" *) input rx_axi4s_ch1_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH2 tdata" *) output [31:0]rx_axi4s_ch2_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH2 tuser" *) output [11:0]rx_axi4s_ch2_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH2 tvalid" *) output rx_axi4s_ch2_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH2 tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_AXI4S_CH2, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 12, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 506250000.0, PHASE 0.0, CLK_DOMAIN dpss_vck190_pt_gt_quad_base_0_ch0_rxoutclk, LAYERED_METADATA undef, INSERT_VIP 0" *) input rx_axi4s_ch2_tready;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH3 tdata" *) output [31:0]rx_axi4s_ch3_tdata;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH3 tuser" *) output [11:0]rx_axi4s_ch3_tuser;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH3 tvalid" *) output rx_axi4s_ch3_tvalid;
  (* X_INTERFACE_INFO = "xilinx.com:interface:axis:1.0 DP_RX_AXI4S_CH3 tready" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME DP_RX_AXI4S_CH3, TDATA_NUM_BYTES 4, TDEST_WIDTH 0, TID_WIDTH 0, TUSER_WIDTH 12, HAS_TREADY 1, HAS_TSTRB 0, HAS_TKEEP 0, HAS_TLAST 0, FREQ_HZ 506250000.0, PHASE 0.0, CLK_DOMAIN dpss_vck190_pt_gt_quad_base_0_ch0_rxoutclk, LAYERED_METADATA undef, INSERT_VIP 0" *) input rx_axi4s_ch3_tready;
  (* X_INTERFACE_INFO = "xilinx.com:signal:gt_usrclk:1.0 gt_rxusrclk CLK" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME gt_rxusrclk, FREQ_HZ 506250000.0, PARENT_ID undef, PHASE 0.0, CLK_DOMAIN dpss_vck190_pt_gt_quad_base_0_ch0_rxoutclk, ASSOCIATED_BUSIF DP_RX_AXI4S_CH0:DP_RX_AXI4S_CH1:DP_RX_AXI4S_CH2:DP_RX_AXI4S_CH3" *) input gt_rxusrclk;
  input rx_mmcm_locked;
  input rx_pll0_locked;
  input rx_pll1_locked;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 HSCLK1_LCPLL_RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME HSCLK1_LCPLL_RESET, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) output rx_pll1_reset;
  (* X_INTERFACE_INFO = "xilinx.com:signal:reset:1.0 HSCLK0_LCPLL_RESET RST" *) (* X_INTERFACE_PARAMETER = "XIL_INTERFACENAME HSCLK0_LCPLL_RESET, POLARITY ACTIVE_HIGH, INSERT_VIP 0" *) output rx_pll0_reset;
  output rx_bufg_gt_clr;
  input gt_powergood;

  wire \<const0> ;
  wire \<const1> ;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxcdrlock;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl3;
  wire [31:0]ch0_rxdata;
  wire ch0_rxmstdatapathreset;
  wire ch0_rxmstreset;
  wire ch0_rxmstresetdone;
  wire ch0_rxpmaresetdone;
  wire ch0_rxprbserr;
  wire [2:0]ch0_rxrate;
  wire ch0_rxresetdone;
  wire ch0_rxuserrdy;
  wire [2:0]ch1_rxbufstatus;
  wire ch1_rxbyteisaligned;
  wire ch1_rxcdrlock;
  wire [15:0]ch1_rxctrl0;
  wire [15:0]ch1_rxctrl1;
  wire [7:0]ch1_rxctrl3;
  wire [31:0]ch1_rxdata;
  wire ch1_rxmstdatapathreset;
  wire ch1_rxmstreset;
  wire ch1_rxmstresetdone;
  wire ch1_rxpmaresetdone;
  wire ch1_rxprbserr;
  wire [2:0]ch1_rxrate;
  wire ch1_rxresetdone;
  wire ch1_rxuserrdy;
  wire [2:0]ch2_rxbufstatus;
  wire ch2_rxbyteisaligned;
  wire ch2_rxcdrlock;
  wire [15:0]ch2_rxctrl0;
  wire [15:0]ch2_rxctrl1;
  wire [7:0]ch2_rxctrl3;
  wire [31:0]ch2_rxdata;
  wire ch2_rxmstdatapathreset;
  wire ch2_rxmstreset;
  wire ch2_rxmstresetdone;
  wire ch2_rxpmaresetdone;
  wire ch2_rxprbserr;
  wire [2:0]ch2_rxrate;
  wire ch2_rxresetdone;
  wire ch2_rxuserrdy;
  wire [2:0]ch3_rxbufstatus;
  wire ch3_rxbyteisaligned;
  wire ch3_rxcdrlock;
  wire [15:0]ch3_rxctrl0;
  wire [15:0]ch3_rxctrl1;
  wire [7:0]ch3_rxctrl3;
  wire [31:0]ch3_rxdata;
  wire ch3_rxmstdatapathreset;
  wire ch3_rxmstreset;
  wire ch3_rxmstresetdone;
  wire ch3_rxpmaresetdone;
  wire ch3_rxprbserr;
  wire [2:0]ch3_rxrate;
  wire ch3_rxresetdone;
  wire ch3_rxuserrdy;
  wire [7:0]control_sb_rx_tdata;
  wire control_sb_rx_tvalid;
  wire [31:0]dp_gt_ctrl;
  wire gt_ctrl_aclk;
  wire gt_ctrl_aresetn;
  wire gt_powergood;
  wire gt_rxusrclk;
  wire [31:0]rx_axi4s_ch0_tdata;
  wire [11:0]rx_axi4s_ch0_tuser;
  wire [31:0]rx_axi4s_ch1_tdata;
  wire [11:0]rx_axi4s_ch1_tuser;
  wire [31:0]rx_axi4s_ch2_tdata;
  wire [11:0]rx_axi4s_ch2_tuser;
  wire [31:0]rx_axi4s_ch3_tdata;
  wire [11:0]rx_axi4s_ch3_tuser;
  wire rx_bufg_gt_clr;
  wire rx_mmcm_locked;
  wire rx_pll0_locked;
  wire rx_pll0_reset;
  wire rx_pll1_locked;
  wire rx_pll1_reset;
  wire [11:0]\^status_sb_rx_tdata ;
  wire NLW_inst_ch0_iloreset_UNCONNECTED;
  wire NLW_inst_ch0_rx8b10ben_UNCONNECTED;
  wire NLW_inst_ch0_rxbufreset_UNCONNECTED;
  wire NLW_inst_ch0_rxlpmen_UNCONNECTED;
  wire NLW_inst_ch0_rxpllgtrst_UNCONNECTED;
  wire NLW_inst_ch0_rxpmareset_UNCONNECTED;
  wire NLW_inst_ch0_rxpolarity_UNCONNECTED;
  wire NLW_inst_ch0_rxprbscntrst_UNCONNECTED;
  wire NLW_inst_ch0_rxprogdivreset_UNCONNECTED;
  wire NLW_inst_ch0_tx8b10ben_UNCONNECTED;
  wire NLW_inst_ch0_txelecidle_UNCONNECTED;
  wire NLW_inst_ch0_txinhibit_UNCONNECTED;
  wire NLW_inst_ch0_txmstdatapathreset_UNCONNECTED;
  wire NLW_inst_ch0_txmstreset_UNCONNECTED;
  wire NLW_inst_ch0_txpcsreset_UNCONNECTED;
  wire NLW_inst_ch0_txpcsresetmask_UNCONNECTED;
  wire NLW_inst_ch0_txpmareset_UNCONNECTED;
  wire NLW_inst_ch0_txpolarity_UNCONNECTED;
  wire NLW_inst_ch0_txprbsforceerr_UNCONNECTED;
  wire NLW_inst_ch0_txprogdivreset_UNCONNECTED;
  wire NLW_inst_ch0_txuserrdy_UNCONNECTED;
  wire NLW_inst_ch1_iloreset_UNCONNECTED;
  wire NLW_inst_ch1_rx8b10ben_UNCONNECTED;
  wire NLW_inst_ch1_rxbufreset_UNCONNECTED;
  wire NLW_inst_ch1_rxlpmen_UNCONNECTED;
  wire NLW_inst_ch1_rxpllgtrst_UNCONNECTED;
  wire NLW_inst_ch1_rxpmareset_UNCONNECTED;
  wire NLW_inst_ch1_rxpolarity_UNCONNECTED;
  wire NLW_inst_ch1_rxprbscntrst_UNCONNECTED;
  wire NLW_inst_ch1_rxprogdivreset_UNCONNECTED;
  wire NLW_inst_ch1_tx8b10ben_UNCONNECTED;
  wire NLW_inst_ch1_txinhibit_UNCONNECTED;
  wire NLW_inst_ch1_txmstdatapathreset_UNCONNECTED;
  wire NLW_inst_ch1_txmstreset_UNCONNECTED;
  wire NLW_inst_ch1_txpcsreset_UNCONNECTED;
  wire NLW_inst_ch1_txpcsresetmask_UNCONNECTED;
  wire NLW_inst_ch1_txpmareset_UNCONNECTED;
  wire NLW_inst_ch1_txpolarity_UNCONNECTED;
  wire NLW_inst_ch1_txprbsforceerr_UNCONNECTED;
  wire NLW_inst_ch1_txprogdivreset_UNCONNECTED;
  wire NLW_inst_ch1_txuserrdy_UNCONNECTED;
  wire NLW_inst_ch2_iloreset_UNCONNECTED;
  wire NLW_inst_ch2_pllgtrst_UNCONNECTED;
  wire NLW_inst_ch2_rx8b10ben_UNCONNECTED;
  wire NLW_inst_ch2_rxbufreset_UNCONNECTED;
  wire NLW_inst_ch2_rxlpmen_UNCONNECTED;
  wire NLW_inst_ch2_rxpllgtrst_UNCONNECTED;
  wire NLW_inst_ch2_rxpmareset_UNCONNECTED;
  wire NLW_inst_ch2_rxpolarity_UNCONNECTED;
  wire NLW_inst_ch2_rxprbscntrst_UNCONNECTED;
  wire NLW_inst_ch2_rxprogdivreset_UNCONNECTED;
  wire NLW_inst_ch2_tx8b10ben_UNCONNECTED;
  wire NLW_inst_ch2_txinhibit_UNCONNECTED;
  wire NLW_inst_ch2_txmstdatapathreset_UNCONNECTED;
  wire NLW_inst_ch2_txmstreset_UNCONNECTED;
  wire NLW_inst_ch2_txpcsreset_UNCONNECTED;
  wire NLW_inst_ch2_txpcsresetmask_UNCONNECTED;
  wire NLW_inst_ch2_txpmareset_UNCONNECTED;
  wire NLW_inst_ch2_txpolarity_UNCONNECTED;
  wire NLW_inst_ch2_txprbsforceerr_UNCONNECTED;
  wire NLW_inst_ch2_txprogdivreset_UNCONNECTED;
  wire NLW_inst_ch2_txuserrdy_UNCONNECTED;
  wire NLW_inst_ch3_iloreset_UNCONNECTED;
  wire NLW_inst_ch3_pllgtrst_UNCONNECTED;
  wire NLW_inst_ch3_rx8b10ben_UNCONNECTED;
  wire NLW_inst_ch3_rxbufreset_UNCONNECTED;
  wire NLW_inst_ch3_rxlpmen_UNCONNECTED;
  wire NLW_inst_ch3_rxpllgtrst_UNCONNECTED;
  wire NLW_inst_ch3_rxpmareset_UNCONNECTED;
  wire NLW_inst_ch3_rxpolarity_UNCONNECTED;
  wire NLW_inst_ch3_rxprbscntrst_UNCONNECTED;
  wire NLW_inst_ch3_rxprogdivreset_UNCONNECTED;
  wire NLW_inst_ch3_tx8b10ben_UNCONNECTED;
  wire NLW_inst_ch3_txinhibit_UNCONNECTED;
  wire NLW_inst_ch3_txmstdatapathreset_UNCONNECTED;
  wire NLW_inst_ch3_txmstreset_UNCONNECTED;
  wire NLW_inst_ch3_txpcsreset_UNCONNECTED;
  wire NLW_inst_ch3_txpcsresetmask_UNCONNECTED;
  wire NLW_inst_ch3_txpmareset_UNCONNECTED;
  wire NLW_inst_ch3_txpolarity_UNCONNECTED;
  wire NLW_inst_ch3_txprbsforceerr_UNCONNECTED;
  wire NLW_inst_ch3_txprogdivreset_UNCONNECTED;
  wire NLW_inst_ch3_txuserrdy_UNCONNECTED;
  wire NLW_inst_control_sb_rx_tready_UNCONNECTED;
  wire NLW_inst_hsclk0_lcpllpd_UNCONNECTED;
  wire NLW_inst_hsclk0_rpllpd_UNCONNECTED;
  wire NLW_inst_hsclk1_lcpllpd_UNCONNECTED;
  wire NLW_inst_hsclk1_rpllpd_UNCONNECTED;
  wire NLW_inst_rx_axi4s_ch0_tvalid_UNCONNECTED;
  wire NLW_inst_rx_axi4s_ch1_tvalid_UNCONNECTED;
  wire NLW_inst_rx_axi4s_ch2_tvalid_UNCONNECTED;
  wire NLW_inst_rx_axi4s_ch3_tvalid_UNCONNECTED;
  wire NLW_inst_s00_axi_arready_UNCONNECTED;
  wire NLW_inst_s00_axi_awready_UNCONNECTED;
  wire NLW_inst_s00_axi_bvalid_UNCONNECTED;
  wire NLW_inst_s00_axi_rvalid_UNCONNECTED;
  wire NLW_inst_s00_axi_wready_UNCONNECTED;
  wire NLW_inst_sdi_ctrl_sb_rx_in_tready_UNCONNECTED;
  wire NLW_inst_sdi_ctrl_sb_rx_out_tvalid_UNCONNECTED;
  wire NLW_inst_sdi_ctrl_sb_tx_in_tready_UNCONNECTED;
  wire NLW_inst_sdi_ctrl_sb_tx_out_tvalid_UNCONNECTED;
  wire NLW_inst_status_sb_rx_tvalid_UNCONNECTED;
  wire NLW_inst_status_sb_tx_tvalid_UNCONNECTED;
  wire NLW_inst_tx_axi4s_ch0_tready_UNCONNECTED;
  wire NLW_inst_tx_axi4s_ch1_tready_UNCONNECTED;
  wire NLW_inst_tx_axi4s_ch2_tready_UNCONNECTED;
  wire NLW_inst_tx_axi4s_ch3_tready_UNCONNECTED;
  wire NLW_inst_tx_bufg_gt_clr_UNCONNECTED;
  wire NLW_inst_tx_pll0_reset_UNCONNECTED;
  wire NLW_inst_tx_pll1_reset_UNCONNECTED;
  wire [4:0]NLW_inst_ch0_rxpcsresetmask_UNCONNECTED;
  wire [1:0]NLW_inst_ch0_rxpd_UNCONNECTED;
  wire [6:0]NLW_inst_ch0_rxpmaresetmask_UNCONNECTED;
  wire [3:0]NLW_inst_ch0_rxprbssel_UNCONNECTED;
  wire [15:0]NLW_inst_ch0_txctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch0_txctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch0_txctrl2_UNCONNECTED;
  wire [31:0]NLW_inst_ch0_txdata_UNCONNECTED;
  wire [4:0]NLW_inst_ch0_txdiffctrl_UNCONNECTED;
  wire [1:0]NLW_inst_ch0_txpd_UNCONNECTED;
  wire [2:0]NLW_inst_ch0_txpmaresetmask_UNCONNECTED;
  wire [4:0]NLW_inst_ch0_txpostcursor_UNCONNECTED;
  wire [3:0]NLW_inst_ch0_txprbssel_UNCONNECTED;
  wire [4:0]NLW_inst_ch0_txprecursor_UNCONNECTED;
  wire [2:0]NLW_inst_ch0_txrate_UNCONNECTED;
  wire [4:0]NLW_inst_ch1_rxpcsresetmask_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_rxpd_UNCONNECTED;
  wire [6:0]NLW_inst_ch1_rxpmaresetmask_UNCONNECTED;
  wire [3:0]NLW_inst_ch1_rxprbssel_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_txctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch1_txctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch1_txctrl2_UNCONNECTED;
  wire [31:0]NLW_inst_ch1_txdata_UNCONNECTED;
  wire [4:0]NLW_inst_ch1_txdiffctrl_UNCONNECTED;
  wire [1:0]NLW_inst_ch1_txpd_UNCONNECTED;
  wire [2:0]NLW_inst_ch1_txpmaresetmask_UNCONNECTED;
  wire [4:0]NLW_inst_ch1_txpostcursor_UNCONNECTED;
  wire [3:0]NLW_inst_ch1_txprbssel_UNCONNECTED;
  wire [4:0]NLW_inst_ch1_txprecursor_UNCONNECTED;
  wire [2:0]NLW_inst_ch1_txrate_UNCONNECTED;
  wire [4:0]NLW_inst_ch2_rxpcsresetmask_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_rxpd_UNCONNECTED;
  wire [6:0]NLW_inst_ch2_rxpmaresetmask_UNCONNECTED;
  wire [3:0]NLW_inst_ch2_rxprbssel_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_txctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch2_txctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch2_txctrl2_UNCONNECTED;
  wire [31:0]NLW_inst_ch2_txdata_UNCONNECTED;
  wire [4:0]NLW_inst_ch2_txdiffctrl_UNCONNECTED;
  wire [1:0]NLW_inst_ch2_txpd_UNCONNECTED;
  wire [2:0]NLW_inst_ch2_txpmaresetmask_UNCONNECTED;
  wire [4:0]NLW_inst_ch2_txpostcursor_UNCONNECTED;
  wire [3:0]NLW_inst_ch2_txprbssel_UNCONNECTED;
  wire [4:0]NLW_inst_ch2_txprecursor_UNCONNECTED;
  wire [2:0]NLW_inst_ch2_txrate_UNCONNECTED;
  wire [4:0]NLW_inst_ch3_rxpcsresetmask_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_rxpd_UNCONNECTED;
  wire [6:0]NLW_inst_ch3_rxpmaresetmask_UNCONNECTED;
  wire [3:0]NLW_inst_ch3_rxprbssel_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_txctrl0_UNCONNECTED;
  wire [15:0]NLW_inst_ch3_txctrl1_UNCONNECTED;
  wire [7:0]NLW_inst_ch3_txctrl2_UNCONNECTED;
  wire [31:0]NLW_inst_ch3_txdata_UNCONNECTED;
  wire [4:0]NLW_inst_ch3_txdiffctrl_UNCONNECTED;
  wire [1:0]NLW_inst_ch3_txpd_UNCONNECTED;
  wire [2:0]NLW_inst_ch3_txpmaresetmask_UNCONNECTED;
  wire [4:0]NLW_inst_ch3_txpostcursor_UNCONNECTED;
  wire [3:0]NLW_inst_ch3_txprbssel_UNCONNECTED;
  wire [4:0]NLW_inst_ch3_txprecursor_UNCONNECTED;
  wire [2:0]NLW_inst_ch3_txrate_UNCONNECTED;
  wire [1:0]NLW_inst_s00_axi_bresp_UNCONNECTED;
  wire [31:0]NLW_inst_s00_axi_rdata_UNCONNECTED;
  wire [1:0]NLW_inst_s00_axi_rresp_UNCONNECTED;
  wire [31:0]NLW_inst_sdi_ctrl_sb_rx_out_UNCONNECTED;
  wire [31:0]NLW_inst_sdi_ctrl_sb_tx_out_UNCONNECTED;
  wire [15:0]NLW_inst_sdi_gt_sts_UNCONNECTED;
  wire [15:12]NLW_inst_status_sb_rx_tdata_UNCONNECTED;
  wire [7:0]NLW_inst_status_sb_tx_tdata_UNCONNECTED;

  assign ch0_rxlpmen = \<const1> ;
  assign ch0_rxpcsresetmask[4] = \<const1> ;
  assign ch0_rxpcsresetmask[3] = \<const1> ;
  assign ch0_rxpcsresetmask[2] = \<const1> ;
  assign ch0_rxpcsresetmask[1] = \<const1> ;
  assign ch0_rxpcsresetmask[0] = \<const1> ;
  assign ch0_rxpd[1] = \<const0> ;
  assign ch0_rxpd[0] = \<const0> ;
  assign ch0_rxpmaresetmask[6] = \<const1> ;
  assign ch0_rxpmaresetmask[5] = \<const1> ;
  assign ch0_rxpmaresetmask[4] = \<const1> ;
  assign ch0_rxpmaresetmask[3] = \<const1> ;
  assign ch0_rxpmaresetmask[2] = \<const1> ;
  assign ch0_rxpmaresetmask[1] = \<const1> ;
  assign ch0_rxpmaresetmask[0] = \<const1> ;
  assign ch0_rxpolarity = \<const0> ;
  assign ch0_rxprbssel[3] = \<const0> ;
  assign ch0_rxprbssel[2] = \<const0> ;
  assign ch0_rxprbssel[1] = \<const0> ;
  assign ch0_rxprbssel[0] = \<const0> ;
  assign ch0_rxprogdivreset = \<const0> ;
  assign ch1_rxlpmen = \<const1> ;
  assign ch1_rxpcsresetmask[4] = \<const1> ;
  assign ch1_rxpcsresetmask[3] = \<const1> ;
  assign ch1_rxpcsresetmask[2] = \<const1> ;
  assign ch1_rxpcsresetmask[1] = \<const1> ;
  assign ch1_rxpcsresetmask[0] = \<const1> ;
  assign ch1_rxpd[1] = \<const0> ;
  assign ch1_rxpd[0] = \<const0> ;
  assign ch1_rxpmaresetmask[6] = \<const1> ;
  assign ch1_rxpmaresetmask[5] = \<const1> ;
  assign ch1_rxpmaresetmask[4] = \<const1> ;
  assign ch1_rxpmaresetmask[3] = \<const1> ;
  assign ch1_rxpmaresetmask[2] = \<const1> ;
  assign ch1_rxpmaresetmask[1] = \<const1> ;
  assign ch1_rxpmaresetmask[0] = \<const1> ;
  assign ch1_rxpolarity = \<const0> ;
  assign ch1_rxprbssel[3] = \<const0> ;
  assign ch1_rxprbssel[2] = \<const0> ;
  assign ch1_rxprbssel[1] = \<const0> ;
  assign ch1_rxprbssel[0] = \<const0> ;
  assign ch1_rxprogdivreset = \<const0> ;
  assign ch2_rxlpmen = \<const1> ;
  assign ch2_rxpcsresetmask[4] = \<const1> ;
  assign ch2_rxpcsresetmask[3] = \<const1> ;
  assign ch2_rxpcsresetmask[2] = \<const1> ;
  assign ch2_rxpcsresetmask[1] = \<const1> ;
  assign ch2_rxpcsresetmask[0] = \<const1> ;
  assign ch2_rxpd[1] = \<const0> ;
  assign ch2_rxpd[0] = \<const0> ;
  assign ch2_rxpmaresetmask[6] = \<const1> ;
  assign ch2_rxpmaresetmask[5] = \<const1> ;
  assign ch2_rxpmaresetmask[4] = \<const1> ;
  assign ch2_rxpmaresetmask[3] = \<const1> ;
  assign ch2_rxpmaresetmask[2] = \<const1> ;
  assign ch2_rxpmaresetmask[1] = \<const1> ;
  assign ch2_rxpmaresetmask[0] = \<const1> ;
  assign ch2_rxpolarity = \<const0> ;
  assign ch2_rxprbssel[3] = \<const0> ;
  assign ch2_rxprbssel[2] = \<const0> ;
  assign ch2_rxprbssel[1] = \<const0> ;
  assign ch2_rxprbssel[0] = \<const0> ;
  assign ch2_rxprogdivreset = \<const0> ;
  assign ch3_rxlpmen = \<const1> ;
  assign ch3_rxpcsresetmask[4] = \<const1> ;
  assign ch3_rxpcsresetmask[3] = \<const1> ;
  assign ch3_rxpcsresetmask[2] = \<const1> ;
  assign ch3_rxpcsresetmask[1] = \<const1> ;
  assign ch3_rxpcsresetmask[0] = \<const1> ;
  assign ch3_rxpd[1] = \<const0> ;
  assign ch3_rxpd[0] = \<const0> ;
  assign ch3_rxpmaresetmask[6] = \<const1> ;
  assign ch3_rxpmaresetmask[5] = \<const1> ;
  assign ch3_rxpmaresetmask[4] = \<const1> ;
  assign ch3_rxpmaresetmask[3] = \<const1> ;
  assign ch3_rxpmaresetmask[2] = \<const1> ;
  assign ch3_rxpmaresetmask[1] = \<const1> ;
  assign ch3_rxpmaresetmask[0] = \<const1> ;
  assign ch3_rxpolarity = \<const0> ;
  assign ch3_rxprbssel[3] = \<const0> ;
  assign ch3_rxprbssel[2] = \<const0> ;
  assign ch3_rxprbssel[1] = \<const0> ;
  assign ch3_rxprbssel[0] = \<const0> ;
  assign ch3_rxprogdivreset = \<const0> ;
  assign control_sb_rx_tready = \<const1> ;
  assign rx_axi4s_ch0_tvalid = \<const1> ;
  assign rx_axi4s_ch1_tvalid = \<const1> ;
  assign rx_axi4s_ch2_tvalid = \<const1> ;
  assign rx_axi4s_ch3_tvalid = \<const1> ;
  assign status_sb_rx_tdata[15] = \<const0> ;
  assign status_sb_rx_tdata[14] = \<const0> ;
  assign status_sb_rx_tdata[13] = \<const0> ;
  assign status_sb_rx_tdata[12] = \<const0> ;
  assign status_sb_rx_tdata[11:0] = \^status_sb_rx_tdata [11:0];
  assign status_sb_rx_tvalid = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
  (* C_ENABLE_RX = "1" *) 
  (* C_ENABLE_TX = "0" *) 
  (* C_NEW_DP = "1" *) 
  (* C_PROTOCOL = "0" *) 
  (* C_RX_NUM_CH = "4" *) 
  (* C_RX_PLL = "1" *) 
  (* C_RX_RATE = "3" *) 
  (* C_S00_AXI_ADDR_WIDTH = "8" *) 
  (* C_S00_AXI_DATA_WIDTH = "32" *) 
  (* C_TX_NUM_CH = "4" *) 
  (* C_TX_PLL = "0" *) 
  (* C_TX_RATE = "1" *) 
  (* C_USE_AXILITE = "0" *) 
  (* C_USE_MSTR = "1" *) 
  (* control_sb_rx_TDATA_WIDTH = "8" *) 
  (* control_sb_tx_TDATA_WIDTH = "32" *) 
  (* rx_axi4s_ch_INT_TDATA_WIDTH = "40" *) 
  (* rx_axi4s_ch_TDATA_WIDTH = "32" *) 
  (* rx_axi4s_ch_TUSER_WIDTH = "12" *) 
  (* status_sb_rx_TDATA_WIDTH = "16" *) 
  (* status_sb_tx_TDATA_WIDTH = "8" *) 
  (* tx_axi4s_ch_INT_TDATA_WIDTH = "40" *) 
  (* tx_axi4s_ch_TDATA_WIDTH = "32" *) 
  (* tx_axi4s_ch_TUSER_WIDTH = "12" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_top inst
       (.ch0_iloreset(NLW_inst_ch0_iloreset_UNCONNECTED),
        .ch0_iloresetdone(1'b0),
        .ch0_rx8b10ben(NLW_inst_ch0_rx8b10ben_UNCONNECTED),
        .ch0_rxbufreset(NLW_inst_ch0_rxbufreset_UNCONNECTED),
        .ch0_rxbufstatus(ch0_rxbufstatus),
        .ch0_rxbyteisaligned(ch0_rxbyteisaligned),
        .ch0_rxcdrlock(ch0_rxcdrlock),
        .ch0_rxctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch0_rxctrl0[3:0]}),
        .ch0_rxctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch0_rxctrl1[3:0]}),
        .ch0_rxctrl3({1'b0,1'b0,1'b0,1'b0,ch0_rxctrl3[3:0]}),
        .ch0_rxdata(ch0_rxdata),
        .ch0_rxlpmen(NLW_inst_ch0_rxlpmen_UNCONNECTED),
        .ch0_rxmstdatapathreset(ch0_rxmstdatapathreset),
        .ch0_rxmstreset(ch0_rxmstreset),
        .ch0_rxmstresetdone(ch0_rxmstresetdone),
        .ch0_rxpcsresetmask(NLW_inst_ch0_rxpcsresetmask_UNCONNECTED[4:0]),
        .ch0_rxpd(NLW_inst_ch0_rxpd_UNCONNECTED[1:0]),
        .ch0_rxpllgtrst(NLW_inst_ch0_rxpllgtrst_UNCONNECTED),
        .ch0_rxpmareset(NLW_inst_ch0_rxpmareset_UNCONNECTED),
        .ch0_rxpmaresetdone(ch0_rxpmaresetdone),
        .ch0_rxpmaresetmask(NLW_inst_ch0_rxpmaresetmask_UNCONNECTED[6:0]),
        .ch0_rxpolarity(NLW_inst_ch0_rxpolarity_UNCONNECTED),
        .ch0_rxprbscntrst(NLW_inst_ch0_rxprbscntrst_UNCONNECTED),
        .ch0_rxprbserr(ch0_rxprbserr),
        .ch0_rxprbssel(NLW_inst_ch0_rxprbssel_UNCONNECTED[3:0]),
        .ch0_rxprogdivreset(NLW_inst_ch0_rxprogdivreset_UNCONNECTED),
        .ch0_rxrate(ch0_rxrate),
        .ch0_rxresetdone(ch0_rxresetdone),
        .ch0_rxuserrdy(ch0_rxuserrdy),
        .ch0_tx8b10ben(NLW_inst_ch0_tx8b10ben_UNCONNECTED),
        .ch0_txbufstatus({1'b0,1'b0}),
        .ch0_txctrl0(NLW_inst_ch0_txctrl0_UNCONNECTED[15:0]),
        .ch0_txctrl1(NLW_inst_ch0_txctrl1_UNCONNECTED[15:0]),
        .ch0_txctrl2(NLW_inst_ch0_txctrl2_UNCONNECTED[7:0]),
        .ch0_txdata(NLW_inst_ch0_txdata_UNCONNECTED[31:0]),
        .ch0_txdiffctrl(NLW_inst_ch0_txdiffctrl_UNCONNECTED[4:0]),
        .ch0_txelecidle(NLW_inst_ch0_txelecidle_UNCONNECTED),
        .ch0_txinhibit(NLW_inst_ch0_txinhibit_UNCONNECTED),
        .ch0_txmstdatapathreset(NLW_inst_ch0_txmstdatapathreset_UNCONNECTED),
        .ch0_txmstreset(NLW_inst_ch0_txmstreset_UNCONNECTED),
        .ch0_txmstresetdone(1'b0),
        .ch0_txpcsreset(NLW_inst_ch0_txpcsreset_UNCONNECTED),
        .ch0_txpcsresetmask(NLW_inst_ch0_txpcsresetmask_UNCONNECTED),
        .ch0_txpd(NLW_inst_ch0_txpd_UNCONNECTED[1:0]),
        .ch0_txphaligndone(1'b0),
        .ch0_txpmareset(NLW_inst_ch0_txpmareset_UNCONNECTED),
        .ch0_txpmaresetdone(1'b0),
        .ch0_txpmaresetmask(NLW_inst_ch0_txpmaresetmask_UNCONNECTED[2:0]),
        .ch0_txpolarity(NLW_inst_ch0_txpolarity_UNCONNECTED),
        .ch0_txpostcursor(NLW_inst_ch0_txpostcursor_UNCONNECTED[4:0]),
        .ch0_txprbsforceerr(NLW_inst_ch0_txprbsforceerr_UNCONNECTED),
        .ch0_txprbssel(NLW_inst_ch0_txprbssel_UNCONNECTED[3:0]),
        .ch0_txprecursor(NLW_inst_ch0_txprecursor_UNCONNECTED[4:0]),
        .ch0_txprogdivreset(NLW_inst_ch0_txprogdivreset_UNCONNECTED),
        .ch0_txrate(NLW_inst_ch0_txrate_UNCONNECTED[2:0]),
        .ch0_txresetdone(1'b0),
        .ch0_txuserrdy(NLW_inst_ch0_txuserrdy_UNCONNECTED),
        .ch1_iloreset(NLW_inst_ch1_iloreset_UNCONNECTED),
        .ch1_iloresetdone(1'b0),
        .ch1_rx8b10ben(NLW_inst_ch1_rx8b10ben_UNCONNECTED),
        .ch1_rxbufreset(NLW_inst_ch1_rxbufreset_UNCONNECTED),
        .ch1_rxbufstatus(ch1_rxbufstatus),
        .ch1_rxbyteisaligned(ch1_rxbyteisaligned),
        .ch1_rxcdrlock(ch1_rxcdrlock),
        .ch1_rxctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch1_rxctrl0[3:0]}),
        .ch1_rxctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch1_rxctrl1[3:0]}),
        .ch1_rxctrl3({1'b0,1'b0,1'b0,1'b0,ch1_rxctrl3[3:0]}),
        .ch1_rxdata(ch1_rxdata),
        .ch1_rxlpmen(NLW_inst_ch1_rxlpmen_UNCONNECTED),
        .ch1_rxmstdatapathreset(ch1_rxmstdatapathreset),
        .ch1_rxmstreset(ch1_rxmstreset),
        .ch1_rxmstresetdone(ch1_rxmstresetdone),
        .ch1_rxpcsresetmask(NLW_inst_ch1_rxpcsresetmask_UNCONNECTED[4:0]),
        .ch1_rxpd(NLW_inst_ch1_rxpd_UNCONNECTED[1:0]),
        .ch1_rxpllgtrst(NLW_inst_ch1_rxpllgtrst_UNCONNECTED),
        .ch1_rxpmareset(NLW_inst_ch1_rxpmareset_UNCONNECTED),
        .ch1_rxpmaresetdone(ch1_rxpmaresetdone),
        .ch1_rxpmaresetmask(NLW_inst_ch1_rxpmaresetmask_UNCONNECTED[6:0]),
        .ch1_rxpolarity(NLW_inst_ch1_rxpolarity_UNCONNECTED),
        .ch1_rxprbscntrst(NLW_inst_ch1_rxprbscntrst_UNCONNECTED),
        .ch1_rxprbserr(ch1_rxprbserr),
        .ch1_rxprbssel(NLW_inst_ch1_rxprbssel_UNCONNECTED[3:0]),
        .ch1_rxprogdivreset(NLW_inst_ch1_rxprogdivreset_UNCONNECTED),
        .ch1_rxrate(ch1_rxrate),
        .ch1_rxresetdone(ch1_rxresetdone),
        .ch1_rxuserrdy(ch1_rxuserrdy),
        .ch1_tx8b10ben(NLW_inst_ch1_tx8b10ben_UNCONNECTED),
        .ch1_txctrl0(NLW_inst_ch1_txctrl0_UNCONNECTED[15:0]),
        .ch1_txctrl1(NLW_inst_ch1_txctrl1_UNCONNECTED[15:0]),
        .ch1_txctrl2(NLW_inst_ch1_txctrl2_UNCONNECTED[7:0]),
        .ch1_txdata(NLW_inst_ch1_txdata_UNCONNECTED[31:0]),
        .ch1_txdiffctrl(NLW_inst_ch1_txdiffctrl_UNCONNECTED[4:0]),
        .ch1_txinhibit(NLW_inst_ch1_txinhibit_UNCONNECTED),
        .ch1_txmstdatapathreset(NLW_inst_ch1_txmstdatapathreset_UNCONNECTED),
        .ch1_txmstreset(NLW_inst_ch1_txmstreset_UNCONNECTED),
        .ch1_txmstresetdone(1'b0),
        .ch1_txpcsreset(NLW_inst_ch1_txpcsreset_UNCONNECTED),
        .ch1_txpcsresetmask(NLW_inst_ch1_txpcsresetmask_UNCONNECTED),
        .ch1_txpd(NLW_inst_ch1_txpd_UNCONNECTED[1:0]),
        .ch1_txpmareset(NLW_inst_ch1_txpmareset_UNCONNECTED),
        .ch1_txpmaresetdone(1'b0),
        .ch1_txpmaresetmask(NLW_inst_ch1_txpmaresetmask_UNCONNECTED[2:0]),
        .ch1_txpolarity(NLW_inst_ch1_txpolarity_UNCONNECTED),
        .ch1_txpostcursor(NLW_inst_ch1_txpostcursor_UNCONNECTED[4:0]),
        .ch1_txprbsforceerr(NLW_inst_ch1_txprbsforceerr_UNCONNECTED),
        .ch1_txprbssel(NLW_inst_ch1_txprbssel_UNCONNECTED[3:0]),
        .ch1_txprecursor(NLW_inst_ch1_txprecursor_UNCONNECTED[4:0]),
        .ch1_txprogdivreset(NLW_inst_ch1_txprogdivreset_UNCONNECTED),
        .ch1_txrate(NLW_inst_ch1_txrate_UNCONNECTED[2:0]),
        .ch1_txresetdone(1'b0),
        .ch1_txuserrdy(NLW_inst_ch1_txuserrdy_UNCONNECTED),
        .ch2_iloreset(NLW_inst_ch2_iloreset_UNCONNECTED),
        .ch2_iloresetdone(1'b0),
        .ch2_pllgtrst(NLW_inst_ch2_pllgtrst_UNCONNECTED),
        .ch2_rx8b10ben(NLW_inst_ch2_rx8b10ben_UNCONNECTED),
        .ch2_rxbufreset(NLW_inst_ch2_rxbufreset_UNCONNECTED),
        .ch2_rxbufstatus(ch2_rxbufstatus),
        .ch2_rxbyteisaligned(ch2_rxbyteisaligned),
        .ch2_rxcdrlock(ch2_rxcdrlock),
        .ch2_rxctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch2_rxctrl0[3:0]}),
        .ch2_rxctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch2_rxctrl1[3:0]}),
        .ch2_rxctrl3({1'b0,1'b0,1'b0,1'b0,ch2_rxctrl3[3:0]}),
        .ch2_rxdata(ch2_rxdata),
        .ch2_rxlpmen(NLW_inst_ch2_rxlpmen_UNCONNECTED),
        .ch2_rxmstdatapathreset(ch2_rxmstdatapathreset),
        .ch2_rxmstreset(ch2_rxmstreset),
        .ch2_rxmstresetdone(ch2_rxmstresetdone),
        .ch2_rxpcsresetmask(NLW_inst_ch2_rxpcsresetmask_UNCONNECTED[4:0]),
        .ch2_rxpd(NLW_inst_ch2_rxpd_UNCONNECTED[1:0]),
        .ch2_rxpllgtrst(NLW_inst_ch2_rxpllgtrst_UNCONNECTED),
        .ch2_rxpmareset(NLW_inst_ch2_rxpmareset_UNCONNECTED),
        .ch2_rxpmaresetdone(ch2_rxpmaresetdone),
        .ch2_rxpmaresetmask(NLW_inst_ch2_rxpmaresetmask_UNCONNECTED[6:0]),
        .ch2_rxpolarity(NLW_inst_ch2_rxpolarity_UNCONNECTED),
        .ch2_rxprbscntrst(NLW_inst_ch2_rxprbscntrst_UNCONNECTED),
        .ch2_rxprbserr(ch2_rxprbserr),
        .ch2_rxprbssel(NLW_inst_ch2_rxprbssel_UNCONNECTED[3:0]),
        .ch2_rxprogdivreset(NLW_inst_ch2_rxprogdivreset_UNCONNECTED),
        .ch2_rxrate(ch2_rxrate),
        .ch2_rxresetdone(ch2_rxresetdone),
        .ch2_rxuserrdy(ch2_rxuserrdy),
        .ch2_tx8b10ben(NLW_inst_ch2_tx8b10ben_UNCONNECTED),
        .ch2_txctrl0(NLW_inst_ch2_txctrl0_UNCONNECTED[15:0]),
        .ch2_txctrl1(NLW_inst_ch2_txctrl1_UNCONNECTED[15:0]),
        .ch2_txctrl2(NLW_inst_ch2_txctrl2_UNCONNECTED[7:0]),
        .ch2_txdata(NLW_inst_ch2_txdata_UNCONNECTED[31:0]),
        .ch2_txdiffctrl(NLW_inst_ch2_txdiffctrl_UNCONNECTED[4:0]),
        .ch2_txinhibit(NLW_inst_ch2_txinhibit_UNCONNECTED),
        .ch2_txmstdatapathreset(NLW_inst_ch2_txmstdatapathreset_UNCONNECTED),
        .ch2_txmstreset(NLW_inst_ch2_txmstreset_UNCONNECTED),
        .ch2_txmstresetdone(1'b0),
        .ch2_txpcsreset(NLW_inst_ch2_txpcsreset_UNCONNECTED),
        .ch2_txpcsresetmask(NLW_inst_ch2_txpcsresetmask_UNCONNECTED),
        .ch2_txpd(NLW_inst_ch2_txpd_UNCONNECTED[1:0]),
        .ch2_txpmareset(NLW_inst_ch2_txpmareset_UNCONNECTED),
        .ch2_txpmaresetdone(1'b0),
        .ch2_txpmaresetmask(NLW_inst_ch2_txpmaresetmask_UNCONNECTED[2:0]),
        .ch2_txpolarity(NLW_inst_ch2_txpolarity_UNCONNECTED),
        .ch2_txpostcursor(NLW_inst_ch2_txpostcursor_UNCONNECTED[4:0]),
        .ch2_txprbsforceerr(NLW_inst_ch2_txprbsforceerr_UNCONNECTED),
        .ch2_txprbssel(NLW_inst_ch2_txprbssel_UNCONNECTED[3:0]),
        .ch2_txprecursor(NLW_inst_ch2_txprecursor_UNCONNECTED[4:0]),
        .ch2_txprogdivreset(NLW_inst_ch2_txprogdivreset_UNCONNECTED),
        .ch2_txrate(NLW_inst_ch2_txrate_UNCONNECTED[2:0]),
        .ch2_txresetdone(1'b0),
        .ch2_txuserrdy(NLW_inst_ch2_txuserrdy_UNCONNECTED),
        .ch3_iloreset(NLW_inst_ch3_iloreset_UNCONNECTED),
        .ch3_iloresetdone(1'b0),
        .ch3_pllgtrst(NLW_inst_ch3_pllgtrst_UNCONNECTED),
        .ch3_rx8b10ben(NLW_inst_ch3_rx8b10ben_UNCONNECTED),
        .ch3_rxbufreset(NLW_inst_ch3_rxbufreset_UNCONNECTED),
        .ch3_rxbufstatus(ch3_rxbufstatus),
        .ch3_rxbyteisaligned(ch3_rxbyteisaligned),
        .ch3_rxcdrlock(ch3_rxcdrlock),
        .ch3_rxctrl0({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch3_rxctrl0[3:0]}),
        .ch3_rxctrl1({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,ch3_rxctrl1[3:0]}),
        .ch3_rxctrl3({1'b0,1'b0,1'b0,1'b0,ch3_rxctrl3[3:0]}),
        .ch3_rxdata(ch3_rxdata),
        .ch3_rxlpmen(NLW_inst_ch3_rxlpmen_UNCONNECTED),
        .ch3_rxmstdatapathreset(ch3_rxmstdatapathreset),
        .ch3_rxmstreset(ch3_rxmstreset),
        .ch3_rxmstresetdone(ch3_rxmstresetdone),
        .ch3_rxpcsresetmask(NLW_inst_ch3_rxpcsresetmask_UNCONNECTED[4:0]),
        .ch3_rxpd(NLW_inst_ch3_rxpd_UNCONNECTED[1:0]),
        .ch3_rxpllgtrst(NLW_inst_ch3_rxpllgtrst_UNCONNECTED),
        .ch3_rxpmareset(NLW_inst_ch3_rxpmareset_UNCONNECTED),
        .ch3_rxpmaresetdone(ch3_rxpmaresetdone),
        .ch3_rxpmaresetmask(NLW_inst_ch3_rxpmaresetmask_UNCONNECTED[6:0]),
        .ch3_rxpolarity(NLW_inst_ch3_rxpolarity_UNCONNECTED),
        .ch3_rxprbscntrst(NLW_inst_ch3_rxprbscntrst_UNCONNECTED),
        .ch3_rxprbserr(ch3_rxprbserr),
        .ch3_rxprbssel(NLW_inst_ch3_rxprbssel_UNCONNECTED[3:0]),
        .ch3_rxprogdivreset(NLW_inst_ch3_rxprogdivreset_UNCONNECTED),
        .ch3_rxrate(ch3_rxrate),
        .ch3_rxresetdone(ch3_rxresetdone),
        .ch3_rxuserrdy(ch3_rxuserrdy),
        .ch3_tx8b10ben(NLW_inst_ch3_tx8b10ben_UNCONNECTED),
        .ch3_txctrl0(NLW_inst_ch3_txctrl0_UNCONNECTED[15:0]),
        .ch3_txctrl1(NLW_inst_ch3_txctrl1_UNCONNECTED[15:0]),
        .ch3_txctrl2(NLW_inst_ch3_txctrl2_UNCONNECTED[7:0]),
        .ch3_txdata(NLW_inst_ch3_txdata_UNCONNECTED[31:0]),
        .ch3_txdiffctrl(NLW_inst_ch3_txdiffctrl_UNCONNECTED[4:0]),
        .ch3_txinhibit(NLW_inst_ch3_txinhibit_UNCONNECTED),
        .ch3_txmstdatapathreset(NLW_inst_ch3_txmstdatapathreset_UNCONNECTED),
        .ch3_txmstreset(NLW_inst_ch3_txmstreset_UNCONNECTED),
        .ch3_txmstresetdone(1'b0),
        .ch3_txpcsreset(NLW_inst_ch3_txpcsreset_UNCONNECTED),
        .ch3_txpcsresetmask(NLW_inst_ch3_txpcsresetmask_UNCONNECTED),
        .ch3_txpd(NLW_inst_ch3_txpd_UNCONNECTED[1:0]),
        .ch3_txpmareset(NLW_inst_ch3_txpmareset_UNCONNECTED),
        .ch3_txpmaresetdone(1'b0),
        .ch3_txpmaresetmask(NLW_inst_ch3_txpmaresetmask_UNCONNECTED[2:0]),
        .ch3_txpolarity(NLW_inst_ch3_txpolarity_UNCONNECTED),
        .ch3_txpostcursor(NLW_inst_ch3_txpostcursor_UNCONNECTED[4:0]),
        .ch3_txprbsforceerr(NLW_inst_ch3_txprbsforceerr_UNCONNECTED),
        .ch3_txprbssel(NLW_inst_ch3_txprbssel_UNCONNECTED[3:0]),
        .ch3_txprecursor(NLW_inst_ch3_txprecursor_UNCONNECTED[4:0]),
        .ch3_txprogdivreset(NLW_inst_ch3_txprogdivreset_UNCONNECTED),
        .ch3_txrate(NLW_inst_ch3_txrate_UNCONNECTED[2:0]),
        .ch3_txresetdone(1'b0),
        .ch3_txuserrdy(NLW_inst_ch3_txuserrdy_UNCONNECTED),
        .clk_100mhz(1'b0),
        .control_sb_rx_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,control_sb_rx_tdata[1],1'b0}),
        .control_sb_rx_tready(NLW_inst_control_sb_rx_tready_UNCONNECTED),
        .control_sb_rx_tvalid(control_sb_rx_tvalid),
        .dp_gt_ctrl({dp_gt_ctrl[31:30],1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,dp_gt_ctrl[3:0]}),
        .gt_ctrl_aclk(gt_ctrl_aclk),
        .gt_ctrl_aresetn(gt_ctrl_aresetn),
        .gt_powergood(gt_powergood),
        .gt_rxusrclk(gt_rxusrclk),
        .gt_txusrclk(1'b0),
        .hsclk0_lcpllpd(NLW_inst_hsclk0_lcpllpd_UNCONNECTED),
        .hsclk0_rpllpd(NLW_inst_hsclk0_rpllpd_UNCONNECTED),
        .hsclk1_lcpllpd(NLW_inst_hsclk1_lcpllpd_UNCONNECTED),
        .hsclk1_rpllpd(NLW_inst_hsclk1_rpllpd_UNCONNECTED),
        .rx_axi4s_ch0_tdata(rx_axi4s_ch0_tdata),
        .rx_axi4s_ch0_tready(1'b0),
        .rx_axi4s_ch0_tuser(rx_axi4s_ch0_tuser),
        .rx_axi4s_ch0_tvalid(NLW_inst_rx_axi4s_ch0_tvalid_UNCONNECTED),
        .rx_axi4s_ch1_tdata(rx_axi4s_ch1_tdata),
        .rx_axi4s_ch1_tready(1'b0),
        .rx_axi4s_ch1_tuser(rx_axi4s_ch1_tuser),
        .rx_axi4s_ch1_tvalid(NLW_inst_rx_axi4s_ch1_tvalid_UNCONNECTED),
        .rx_axi4s_ch2_tdata(rx_axi4s_ch2_tdata),
        .rx_axi4s_ch2_tready(1'b0),
        .rx_axi4s_ch2_tuser(rx_axi4s_ch2_tuser),
        .rx_axi4s_ch2_tvalid(NLW_inst_rx_axi4s_ch2_tvalid_UNCONNECTED),
        .rx_axi4s_ch3_tdata(rx_axi4s_ch3_tdata),
        .rx_axi4s_ch3_tready(1'b0),
        .rx_axi4s_ch3_tuser(rx_axi4s_ch3_tuser),
        .rx_axi4s_ch3_tvalid(NLW_inst_rx_axi4s_ch3_tvalid_UNCONNECTED),
        .rx_bufg_gt_clr(rx_bufg_gt_clr),
        .rx_mmcm_locked(rx_mmcm_locked),
        .rx_pll0_locked(rx_pll0_locked),
        .rx_pll0_reset(rx_pll0_reset),
        .rx_pll1_locked(rx_pll1_locked),
        .rx_pll1_reset(rx_pll1_reset),
        .s00_axi_araddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s00_axi_arready(NLW_inst_s00_axi_arready_UNCONNECTED),
        .s00_axi_arvalid(1'b0),
        .s00_axi_awaddr({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s00_axi_awready(NLW_inst_s00_axi_awready_UNCONNECTED),
        .s00_axi_awvalid(1'b0),
        .s00_axi_bready(1'b0),
        .s00_axi_bresp(NLW_inst_s00_axi_bresp_UNCONNECTED[1:0]),
        .s00_axi_bvalid(NLW_inst_s00_axi_bvalid_UNCONNECTED),
        .s00_axi_rdata(NLW_inst_s00_axi_rdata_UNCONNECTED[31:0]),
        .s00_axi_rready(1'b0),
        .s00_axi_rresp(NLW_inst_s00_axi_rresp_UNCONNECTED[1:0]),
        .s00_axi_rvalid(NLW_inst_s00_axi_rvalid_UNCONNECTED),
        .s00_axi_wdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .s00_axi_wready(NLW_inst_s00_axi_wready_UNCONNECTED),
        .s00_axi_wstrb({1'b0,1'b0,1'b0,1'b0}),
        .s00_axi_wvalid(1'b0),
        .sdi_ctrl_sb_rx_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sdi_ctrl_sb_rx_in_tready(NLW_inst_sdi_ctrl_sb_rx_in_tready_UNCONNECTED),
        .sdi_ctrl_sb_rx_in_tvalid(1'b0),
        .sdi_ctrl_sb_rx_out(NLW_inst_sdi_ctrl_sb_rx_out_UNCONNECTED[31:0]),
        .sdi_ctrl_sb_rx_out_tready(1'b0),
        .sdi_ctrl_sb_rx_out_tvalid(NLW_inst_sdi_ctrl_sb_rx_out_tvalid_UNCONNECTED),
        .sdi_ctrl_sb_tx_in({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sdi_ctrl_sb_tx_in_tready(NLW_inst_sdi_ctrl_sb_tx_in_tready_UNCONNECTED),
        .sdi_ctrl_sb_tx_in_tvalid(1'b0),
        .sdi_ctrl_sb_tx_out(NLW_inst_sdi_ctrl_sb_tx_out_UNCONNECTED[31:0]),
        .sdi_ctrl_sb_tx_out_tready(1'b0),
        .sdi_ctrl_sb_tx_out_tvalid(NLW_inst_sdi_ctrl_sb_tx_out_tvalid_UNCONNECTED),
        .sdi_gt_ctrl({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .sdi_gt_sts(NLW_inst_sdi_gt_sts_UNCONNECTED[15:0]),
        .status_sb_rx_tdata({NLW_inst_status_sb_rx_tdata_UNCONNECTED[15:12],\^status_sb_rx_tdata }),
        .status_sb_rx_tready(1'b0),
        .status_sb_rx_tvalid(NLW_inst_status_sb_rx_tvalid_UNCONNECTED),
        .status_sb_tx_tdata(NLW_inst_status_sb_tx_tdata_UNCONNECTED[7:0]),
        .status_sb_tx_tready(1'b0),
        .status_sb_tx_tvalid(NLW_inst_status_sb_tx_tvalid_UNCONNECTED),
        .tx_axi4s_ch0_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch0_tready(NLW_inst_tx_axi4s_ch0_tready_UNCONNECTED),
        .tx_axi4s_ch0_tuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch0_tvalid(1'b0),
        .tx_axi4s_ch1_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch1_tready(NLW_inst_tx_axi4s_ch1_tready_UNCONNECTED),
        .tx_axi4s_ch1_tuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch1_tvalid(1'b0),
        .tx_axi4s_ch2_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch2_tready(NLW_inst_tx_axi4s_ch2_tready_UNCONNECTED),
        .tx_axi4s_ch2_tuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch2_tvalid(1'b0),
        .tx_axi4s_ch3_tdata({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch3_tready(NLW_inst_tx_axi4s_ch3_tready_UNCONNECTED),
        .tx_axi4s_ch3_tuser({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .tx_axi4s_ch3_tvalid(1'b0),
        .tx_bufg_gt_clr(NLW_inst_tx_bufg_gt_clr_UNCONNECTED),
        .tx_mmcm_locked(1'b0),
        .tx_pll0_locked(1'b0),
        .tx_pll0_reset(NLW_inst_tx_pll0_reset_UNCONNECTED),
        .tx_pll1_locked(1'b0),
        .tx_pll1_reset(NLW_inst_tx_pll1_reset_UNCONNECTED));
endmodule

(* CHECK_LICENSE_TYPE = "dpss_vck190_pt_dprx_gt_ip0_0_gtreset,dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst,{}" *) (* DowngradeIPIdentifiedWarnings = "yes" *) (* X_CORE_INFO = "dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst,Vivado 2023.2" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_gtreset
   (gtwiz_reset_clk_freerun_in,
    gtwiz_reset_all_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_rx_pll_and_datapath_in,
    gtwiz_reset_rx_datapath_in,
    gtwiz_reset_rx_cdr_stable_out,
    gtwiz_reset_tx_done_out,
    gtwiz_reset_rx_done_out,
    gtwiz_reset_userclk_tx_active_in,
    gtwiz_reset_userclk_rx_active_in,
    gtpowergood_in,
    txusrclk2_in,
    ilo_reset_done,
    plllock_tx_in,
    txresetdone_in,
    rxusrclk2_in,
    plllock_rx_in,
    rxcdrlock_in,
    rxresetdone_in,
    pllreset_tx_out,
    txprogdivreset_out,
    iloreset_out,
    mst_tx_reset,
    mst_rx_reset,
    mst_tx_dp_reset,
    mst_rx_dp_reset,
    mst_tx_resetdone,
    mst_rx_resetdone,
    pcie_enable,
    pcie_rstb_out,
    gttxreset_out,
    txuserrdy_out,
    pllreset_rx_out,
    rxprogdivreset_out,
    gtrxreset_out,
    rxuserrdy_out,
    rx_clr_out,
    rx_clrb_leaf_out,
    tx_clr_out,
    tx_clrb_leaf_out,
    tx_enabled_tie_in,
    rx_enabled_tie_in,
    shared_pll_tie_in);
  input gtwiz_reset_clk_freerun_in;
  input gtwiz_reset_all_in;
  input gtwiz_reset_tx_pll_and_datapath_in;
  input gtwiz_reset_tx_datapath_in;
  input gtwiz_reset_rx_pll_and_datapath_in;
  input gtwiz_reset_rx_datapath_in;
  output gtwiz_reset_rx_cdr_stable_out;
  output gtwiz_reset_tx_done_out;
  output gtwiz_reset_rx_done_out;
  input gtwiz_reset_userclk_tx_active_in;
  input gtwiz_reset_userclk_rx_active_in;
  input gtpowergood_in;
  input txusrclk2_in;
  input ilo_reset_done;
  input plllock_tx_in;
  input txresetdone_in;
  input rxusrclk2_in;
  input plllock_rx_in;
  input rxcdrlock_in;
  input rxresetdone_in;
  output pllreset_tx_out;
  output txprogdivreset_out;
  output iloreset_out;
  output mst_tx_reset;
  output mst_rx_reset;
  output mst_tx_dp_reset;
  output mst_rx_dp_reset;
  input mst_tx_resetdone;
  input mst_rx_resetdone;
  input pcie_enable;
  output pcie_rstb_out;
  output gttxreset_out;
  output txuserrdy_out;
  output pllreset_rx_out;
  output rxprogdivreset_out;
  output gtrxreset_out;
  output rxuserrdy_out;
  output rx_clr_out;
  output rx_clrb_leaf_out;
  output tx_clr_out;
  output tx_clrb_leaf_out;
  input tx_enabled_tie_in;
  input rx_enabled_tie_in;
  input shared_pll_tie_in;

  wire \<const0> ;
  wire gtpowergood_in;
  wire gtwiz_reset_all_in;
  wire gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_datapath_in;
  wire gtwiz_reset_tx_pll_and_datapath_in;
  wire gtwiz_reset_userclk_rx_active_in;
  wire gtwiz_reset_userclk_tx_active_in;
  wire mst_rx_dp_reset;
  wire mst_rx_reset;
  wire mst_rx_resetdone;
  wire mst_tx_resetdone;
  wire rxuserrdy_out;

  assign gtrxreset_out = \<const0> ;
  assign gttxreset_out = \<const0> ;
  assign gtwiz_reset_rx_cdr_stable_out = \<const0> ;
  assign gtwiz_reset_rx_done_out = \<const0> ;
  assign gtwiz_reset_tx_done_out = \<const0> ;
  assign iloreset_out = \<const0> ;
  assign mst_tx_dp_reset = \<const0> ;
  assign mst_tx_reset = \<const0> ;
  assign pcie_rstb_out = \<const0> ;
  assign pllreset_rx_out = \<const0> ;
  assign pllreset_tx_out = \<const0> ;
  assign rx_clr_out = \<const0> ;
  assign rx_clrb_leaf_out = \<const0> ;
  assign rxprogdivreset_out = \<const0> ;
  assign tx_clr_out = \<const0> ;
  assign tx_clrb_leaf_out = \<const0> ;
  assign txprogdivreset_out = \<const0> ;
  assign txuserrdy_out = \<const0> ;
  GND GND
       (.G(\<const0> ));
  dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst inst
       (.gtpowergood_in(gtpowergood_in),
        .gtwiz_reset_all_in(gtwiz_reset_all_in),
        .gtwiz_reset_clk_freerun_in(gtwiz_reset_clk_freerun_in),
        .gtwiz_reset_tx_datapath_in(gtwiz_reset_tx_datapath_in),
        .gtwiz_reset_tx_pll_and_datapath_in(gtwiz_reset_tx_pll_and_datapath_in),
        .gtwiz_reset_userclk_rx_active_in(gtwiz_reset_userclk_rx_active_in),
        .gtwiz_reset_userclk_tx_active_in(gtwiz_reset_userclk_tx_active_in),
        .mst_rx_dp_reset(mst_rx_dp_reset),
        .mst_rx_reset(mst_rx_reset),
        .mst_rx_resetdone(mst_rx_resetdone),
        .mst_tx_resetdone(mst_tx_resetdone),
        .rxuserrdy_out(rxuserrdy_out));
endmodule

module dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst
   (mst_rx_reset,
    mst_rx_dp_reset,
    rxuserrdy_out,
    gtwiz_reset_all_in,
    gtwiz_reset_clk_freerun_in,
    gtwiz_reset_tx_datapath_in,
    gtwiz_reset_tx_pll_and_datapath_in,
    gtpowergood_in,
    mst_tx_resetdone,
    mst_rx_resetdone,
    gtwiz_reset_userclk_tx_active_in,
    gtwiz_reset_userclk_rx_active_in);
  output mst_rx_reset;
  output mst_rx_dp_reset;
  output rxuserrdy_out;
  input gtwiz_reset_all_in;
  input gtwiz_reset_clk_freerun_in;
  input gtwiz_reset_tx_datapath_in;
  input gtwiz_reset_tx_pll_and_datapath_in;
  input gtpowergood_in;
  input mst_tx_resetdone;
  input mst_rx_resetdone;
  input gtwiz_reset_userclk_tx_active_in;
  input gtwiz_reset_userclk_rx_active_in;

  wire gtpowergood_in;
  wire gtwiz_reset_all_in;
  wire gtwiz_reset_clk_freerun_in;
  wire gtwiz_reset_tx_datapath_in;
  wire gtwiz_reset_tx_pll_and_datapath_in;
  wire gtwiz_reset_userclk_rx_active_in;
  wire gtwiz_reset_userclk_rx_active_sync;
  wire gtwiz_reset_userclk_tx_active_in;
  wire mst_rx_dp_reset;
  wire mst_rx_reset;
  wire mst_rx_resetdone;
  wire mst_tx_resetdone;
  wire rxuserrdy_out;
  wire rxuserrdy_out_int;
  wire \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1_n_0 ;
  wire \use_master_reset.gtpowergood_sync_master ;
  wire \use_master_reset.gtwiz_reset_sync_master ;
  wire \use_master_reset.gtwiz_rx_dp_reset_sync_master ;
  wire \use_master_reset.gtwiz_rx_reset_sync_master ;
  wire \use_master_reset.mst_rx_dp_reset_i_1_n_0 ;
  wire \use_master_reset.mst_rx_reset_i_1_n_0 ;
  wire \use_master_reset.mst_rx_reset_i_2_n_0 ;
  wire \use_master_reset.rxuserrdy_out_int_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_rx ;
  wire \use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ;
  wire [23:0]\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ;
  wire \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_2_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_3_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_4_n_0 ;
  wire \use_master_reset.sm_mstresetdone_timer_sat_rx_i_5_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx ;
  wire \use_master_reset.sm_reset_all_master_rx01_out ;
  wire \use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ;
  wire \use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ;
  wire [2:0]\use_master_reset.sm_reset_all_timer_ctr_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx0_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ;
  wire \use_master_reset.sm_reset_all_timer_sat_master_rx ;
  wire \use_master_reset.sm_reset_all_timer_sat_master_rx_i_1_n_0 ;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_dest_rst_UNCONNECTED;
  wire \NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dest_arst_UNCONNECTED ;
  wire \NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_1_dest_rst_UNCONNECTED ;
  wire \NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dp_dest_arst_UNCONNECTED ;

  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst dpss_vck190_pt_dprx_gt_ip0_0_gtreset_bit_synchronizer_gtwiz_reset_rx_active_inst
       (.dest_clk(gtwiz_reset_clk_freerun_in),
        .dest_rst(gtwiz_reset_userclk_rx_active_sync),
        .src_rst(gtwiz_reset_userclk_rx_active_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__8 dpss_vck190_pt_dprx_gt_ip0_0_gtreset_bit_synchronizer_gtwiz_reset_userclk_tx_active_inst
       (.dest_clk(gtwiz_reset_clk_freerun_in),
        .dest_rst(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_bit_synchronizer_gtwiz_reset_userclk_tx_active_inst_dest_rst_UNCONNECTED),
        .src_rst(gtwiz_reset_userclk_tx_active_in));
  LUT2 #(
    .INIT(4'h8)) 
    rxuserrdy_out_INST_0
       (.I0(rxuserrdy_out_int),
        .I1(gtwiz_reset_userclk_rx_active_sync),
        .O(rxuserrdy_out));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__5 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_bit_synchronizer_gtpowergood_inst 
       (.dest_clk(gtwiz_reset_clk_freerun_in),
        .dest_rst(\use_master_reset.gtpowergood_sync_master ),
        .src_rst(gtpowergood_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__1 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst 
       (.dest_arst(\use_master_reset.gtwiz_reset_sync_master ),
        .dest_clk(gtwiz_reset_clk_freerun_in),
        .src_arst(gtwiz_reset_all_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx 
       (.dest_arst(\use_master_reset.gtwiz_rx_reset_sync_master ),
        .dest_clk(gtwiz_reset_clk_freerun_in),
        .src_arst(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__7 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1 
       (.dest_clk(gtwiz_reset_clk_freerun_in),
        .dest_rst(\use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1_n_0 ),
        .src_rst(mst_rx_resetdone));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__4 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_dp 
       (.dest_arst(\use_master_reset.gtwiz_rx_dp_reset_sync_master ),
        .dest_clk(gtwiz_reset_clk_freerun_in),
        .src_arst(1'b0));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__3 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx 
       (.dest_arst(\NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dest_arst_UNCONNECTED ),
        .dest_clk(gtwiz_reset_clk_freerun_in),
        .src_arst(gtwiz_reset_tx_pll_and_datapath_in));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT = "0" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__6 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_1 
       (.dest_clk(gtwiz_reset_clk_freerun_in),
        .dest_rst(\NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_1_dest_rst_UNCONNECTED ),
        .src_rst(mst_tx_resetdone));
  (* DEF_VAL = "1'b0" *) 
  (* DEST_SYNC_FF = "3" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* INV_DEF_VAL = "1'b1" *) 
  (* RST_ACTIVE_HIGH = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__2 \use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dp 
       (.dest_arst(\NLW_use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_tx_dp_dest_arst_UNCONNECTED ),
        .dest_clk(gtwiz_reset_clk_freerun_in),
        .src_arst(gtwiz_reset_tx_datapath_in));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h60)) 
    \use_master_reset.mst_rx_dp_reset_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.mst_rx_dp_reset_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.mst_rx_dp_reset_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.mst_rx_dp_reset_i_1_n_0 ),
        .Q(mst_rx_dp_reset),
        .R(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \use_master_reset.mst_rx_reset_i_1 
       (.I0(\use_master_reset.gtwiz_rx_reset_sync_master ),
        .I1(\use_master_reset.gtwiz_reset_sync_master ),
        .O(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \use_master_reset.mst_rx_reset_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.mst_rx_reset_i_2_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.mst_rx_reset_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.mst_rx_reset_i_2_n_0 ),
        .Q(mst_rx_reset),
        .S(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT3 #(
    .INIT(8'h24)) 
    \use_master_reset.rxuserrdy_out_int_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .O(\use_master_reset.rxuserrdy_out_int_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.rxuserrdy_out_int_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.rxuserrdy_out_int_i_1_n_0 ),
        .Q(rxuserrdy_out_int),
        .R(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT5 #(
    .INIT(32'hFFFFFFF7)) 
    \use_master_reset.sm_mstresetdone_timer_clr_rx_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1_n_0 ),
        .I3(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .I4(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_mstresetdone_timer_clr_rx_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.sm_mstresetdone_timer_clr_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_clr_rx ),
        .S(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFBFF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1 
       (.I0(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_2_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_3_n_0 ),
        .I2(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_4_n_0 ),
        .I3(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_5_n_0 ),
        .O(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFFFFFF00FF0000FF)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .I4(1'b0),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[11]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[12]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[13]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[14]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[15]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("TRUE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2 
       (.CIN(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[10]_i_2_n_3 ),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[16]_i_1_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[17]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[19]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[20]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[21]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[18]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00FF0000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[22]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[23]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ));
  LOOKAHEAD8 #(
    .LOOKB("FALSE"),
    .LOOKD("TRUE"),
    .LOOKF("TRUE"),
    .LOOKH("TRUE")) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2 
       (.CIN(1'b0),
        .COUTB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_0 ),
        .COUTD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ),
        .COUTF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ),
        .COUTH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .CYA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_2 ),
        .CYB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_2 ),
        .CYC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .CYD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ),
        .CYE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .CYF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ),
        .CYG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .CYH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ),
        .GEA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_0 ),
        .GEB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_0 ),
        .GEC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_0 ),
        .GED(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ),
        .GEE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ),
        .GEF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ),
        .GEG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ),
        .GEH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ),
        .PROPA(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[0]_i_2_n_3 ),
        .PROPB(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[1]_i_1_n_3 ),
        .PROPC(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_3 ),
        .PROPD(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ),
        .PROPE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ),
        .PROPF(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ),
        .PROPG(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ),
        .PROPH(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[3]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_1 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[4]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[5]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[6]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[7]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[2]_i_2_n_3 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_3 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_mstresetdone_timer_ctr_rx[0]_i_1_n_0 ),
        .D(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .R(\use_master_reset.sm_mstresetdone_timer_clr_rx ));
  LUT6CY #(
    .INIT(64'hFF00000000FFFF00)) 
    \use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1 
       (.GE(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_0 ),
        .I0(1'b1),
        .I1(1'b1),
        .I2(1'b1),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[8]_i_1_n_2 ),
        .O51(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_1 ),
        .O52(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_2 ),
        .PROP(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg[9]_i_1_n_3 ));
  LUT6 #(
    .INIT(64'h00000000FFFF0400)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_1 
       (.I0(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_2_n_0 ),
        .I1(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_3_n_0 ),
        .I2(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_4_n_0 ),
        .I3(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_5_n_0 ),
        .I4(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .I5(\use_master_reset.sm_mstresetdone_timer_clr_rx ),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_2 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [0]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [1]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [2]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [3]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [4]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [5]),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_3 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [9]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [10]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [11]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [8]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [6]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [7]),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_3_n_0 ));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_4 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [12]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [13]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [14]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [15]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [16]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [17]),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_i_5 
       (.I0(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [21]),
        .I1(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [23]),
        .I2(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [22]),
        .I3(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [20]),
        .I4(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [18]),
        .I5(\use_master_reset.sm_mstresetdone_timer_ctr_rx_reg [19]),
        .O(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_5_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_mstresetdone_timer_sat_rx_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.sm_mstresetdone_timer_sat_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT4 #(
    .INIT(16'h1514)) 
    \use_master_reset.sm_reset_all_master_rx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I3(\use_master_reset.gtpowergood_sync_master ),
        .O(\use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \use_master_reset.sm_reset_all_master_rx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .O(\use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFC77FC44FCBB30BB)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_1 
       (.I0(\use_master_reset.gtwiz_rx_dp_reset_sync_master ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .I2(\use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I4(\use_master_reset.sm_reset_all_master_rx01_out ),
        .I5(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .O(\use_master_reset.sm_reset_all_master_rx ));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h38)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_2 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'hCCB8)) 
    \use_master_reset.sm_reset_all_master_rx[2]_i_3 
       (.I0(\use_master_reset.sm_mstresetdone_timer_sat_rx ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I2(gtwiz_reset_userclk_rx_active_sync),
        .I3(\use_master_reset.dpss_vck190_pt_dprx_gt_ip0_0_gtreset_master_reset_synchronizer_gtwiz_reset_all_inst_rx_1_n_0 ),
        .O(\use_master_reset.sm_reset_all_master_rx[2]_i_3_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[0]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .R(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[1]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .R(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_master_rx_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_reset_all_master_rx ),
        .D(\use_master_reset.sm_reset_all_master_rx[2]_i_2_n_0 ),
        .Q(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .R(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT4 #(
    .INIT(16'hFBFD)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_i_1 
       (.I0(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[0] ),
        .I1(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[1] ),
        .I2(\use_master_reset.sm_reset_all_master_rx01_out ),
        .I3(\use_master_reset.sm_reset_all_master_rx_reg_n_0_[2] ),
        .O(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_i_2 
       (.I0(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .I1(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .O(\use_master_reset.sm_reset_all_master_rx01_out ));
  FDSE #(
    .INIT(1'b1)) 
    \use_master_reset.sm_reset_all_timer_clr_master_rx_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_clr_master_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .S(\use_master_reset.mst_rx_reset_i_1_n_0 ));
  LUT3 #(
    .INIT(8'h7F)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx0 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hEA)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .O(\use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[0] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[0]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[1] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(\use_master_reset.sm_reset_all_timer_ctr_master_rx0_n_0 ),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[1]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_ctr_master_rx_reg[2] 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_ctr_master_rx[2]_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .R(\use_master_reset.sm_reset_all_timer_clr_master_rx ));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h0000FF80)) 
    \use_master_reset.sm_reset_all_timer_sat_master_rx_i_1 
       (.I0(\use_master_reset.sm_reset_all_timer_ctr_master_rx [2]),
        .I1(\use_master_reset.sm_reset_all_timer_ctr_master_rx [0]),
        .I2(\use_master_reset.sm_reset_all_timer_ctr_master_rx [1]),
        .I3(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .I4(\use_master_reset.sm_reset_all_timer_clr_master_rx ),
        .O(\use_master_reset.sm_reset_all_timer_sat_master_rx_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \use_master_reset.sm_reset_all_timer_sat_master_rx_reg 
       (.C(gtwiz_reset_clk_freerun_in),
        .CE(1'b1),
        .D(\use_master_reset.sm_reset_all_timer_sat_master_rx_i_1_n_0 ),
        .Q(\use_master_reset.sm_reset_all_timer_sat_master_rx ),
        .R(1'b0));
endmodule

(* C_ENABLE_RX = "1" *) (* C_ENABLE_TX = "0" *) (* C_NEW_DP = "1" *) 
(* C_PROTOCOL = "0" *) (* C_RX_NUM_CH = "4" *) (* C_RX_PLL = "1" *) 
(* C_RX_RATE = "3" *) (* C_S00_AXI_ADDR_WIDTH = "8" *) (* C_S00_AXI_DATA_WIDTH = "32" *) 
(* C_TX_NUM_CH = "4" *) (* C_TX_PLL = "0" *) (* C_TX_RATE = "1" *) 
(* C_USE_AXILITE = "0" *) (* C_USE_MSTR = "1" *) (* control_sb_rx_TDATA_WIDTH = "8" *) 
(* control_sb_tx_TDATA_WIDTH = "32" *) (* rx_axi4s_ch_INT_TDATA_WIDTH = "40" *) (* rx_axi4s_ch_TDATA_WIDTH = "32" *) 
(* rx_axi4s_ch_TUSER_WIDTH = "12" *) (* status_sb_rx_TDATA_WIDTH = "16" *) (* status_sb_tx_TDATA_WIDTH = "8" *) 
(* tx_axi4s_ch_INT_TDATA_WIDTH = "40" *) (* tx_axi4s_ch_TDATA_WIDTH = "32" *) (* tx_axi4s_ch_TUSER_WIDTH = "12" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_top
   (clk_100mhz,
    gt_ctrl_aclk,
    gt_ctrl_aresetn,
    s00_axi_awaddr,
    s00_axi_awvalid,
    s00_axi_awready,
    s00_axi_wdata,
    s00_axi_wstrb,
    s00_axi_wvalid,
    s00_axi_wready,
    s00_axi_bresp,
    s00_axi_bvalid,
    s00_axi_bready,
    s00_axi_araddr,
    s00_axi_arvalid,
    s00_axi_arready,
    s00_axi_rdata,
    s00_axi_rresp,
    s00_axi_rvalid,
    s00_axi_rready,
    dp_gt_ctrl,
    gt_rxusrclk,
    gt_txusrclk,
    tx_bufg_gt_clr,
    rx_bufg_gt_clr,
    ch0_iloresetdone,
    ch1_iloresetdone,
    ch2_iloresetdone,
    ch3_iloresetdone,
    ch0_iloreset,
    ch1_iloreset,
    ch2_iloreset,
    ch3_iloreset,
    gt_powergood,
    tx_pll0_reset,
    tx_pll1_reset,
    rx_pll0_reset,
    rx_pll1_reset,
    hsclk0_rpllpd,
    hsclk1_rpllpd,
    hsclk0_lcpllpd,
    hsclk1_lcpllpd,
    tx_pll0_locked,
    tx_pll1_locked,
    rx_pll0_locked,
    rx_pll1_locked,
    tx_mmcm_locked,
    rx_mmcm_locked,
    tx_axi4s_ch0_tready,
    tx_axi4s_ch0_tdata,
    tx_axi4s_ch0_tuser,
    tx_axi4s_ch0_tvalid,
    tx_axi4s_ch1_tready,
    tx_axi4s_ch1_tdata,
    tx_axi4s_ch1_tuser,
    tx_axi4s_ch1_tvalid,
    tx_axi4s_ch2_tready,
    tx_axi4s_ch2_tdata,
    tx_axi4s_ch2_tuser,
    tx_axi4s_ch2_tvalid,
    tx_axi4s_ch3_tready,
    tx_axi4s_ch3_tdata,
    tx_axi4s_ch3_tuser,
    tx_axi4s_ch3_tvalid,
    status_sb_tx_tvalid,
    status_sb_tx_tdata,
    status_sb_tx_tready,
    sdi_gt_ctrl,
    sdi_gt_sts,
    sdi_ctrl_sb_rx_in,
    sdi_ctrl_sb_rx_in_tvalid,
    sdi_ctrl_sb_rx_in_tready,
    sdi_ctrl_sb_rx_out,
    sdi_ctrl_sb_rx_out_tvalid,
    sdi_ctrl_sb_rx_out_tready,
    sdi_ctrl_sb_tx_in,
    sdi_ctrl_sb_tx_in_tvalid,
    sdi_ctrl_sb_tx_in_tready,
    sdi_ctrl_sb_tx_out,
    sdi_ctrl_sb_tx_out_tvalid,
    sdi_ctrl_sb_tx_out_tready,
    ch0_txmstdatapathreset,
    ch0_txpmareset,
    ch0_txpcsresetmask,
    ch0_txpmaresetmask,
    ch0_txpcsreset,
    ch0_txuserrdy,
    ch0_txprogdivreset,
    ch0_txpd,
    ch0_tx8b10ben,
    ch0_txpolarity,
    ch0_txprbssel,
    ch0_txprbsforceerr,
    ch0_txdiffctrl,
    ch0_txprecursor,
    ch0_txpostcursor,
    ch0_txinhibit,
    ch0_txresetdone,
    ch0_txpmaresetdone,
    ch0_txmstreset,
    ch0_txmstresetdone,
    ch0_txdata,
    ch0_txctrl1,
    ch0_txctrl0,
    ch0_txctrl2,
    ch0_txrate,
    ch0_txphaligndone,
    ch0_txelecidle,
    ch0_txbufstatus,
    ch1_txmstdatapathreset,
    ch1_txpmareset,
    ch1_txpcsresetmask,
    ch1_txpmaresetmask,
    ch1_txpcsreset,
    ch1_txuserrdy,
    ch1_txprogdivreset,
    ch1_txpd,
    ch1_tx8b10ben,
    ch1_txpolarity,
    ch1_txprbssel,
    ch1_txprbsforceerr,
    ch1_txdiffctrl,
    ch1_txprecursor,
    ch1_txpostcursor,
    ch1_txinhibit,
    ch1_txresetdone,
    ch1_txpmaresetdone,
    ch1_txmstreset,
    ch1_txmstresetdone,
    ch1_txdata,
    ch1_txctrl1,
    ch1_txctrl0,
    ch1_txctrl2,
    ch1_txrate,
    ch2_txmstdatapathreset,
    ch2_txpmareset,
    ch2_txpcsresetmask,
    ch2_txpmaresetmask,
    ch2_txpcsreset,
    ch2_txuserrdy,
    ch2_pllgtrst,
    ch2_txprogdivreset,
    ch2_txpd,
    ch2_tx8b10ben,
    ch2_txpolarity,
    ch2_txprbssel,
    ch2_txprbsforceerr,
    ch2_txdiffctrl,
    ch2_txprecursor,
    ch2_txpostcursor,
    ch2_txinhibit,
    ch2_txresetdone,
    ch2_txpmaresetdone,
    ch2_txmstreset,
    ch2_txmstresetdone,
    ch2_txdata,
    ch2_txctrl1,
    ch2_txctrl0,
    ch2_txctrl2,
    ch2_txrate,
    ch3_txmstdatapathreset,
    ch3_txpmareset,
    ch3_txpcsresetmask,
    ch3_txpmaresetmask,
    ch3_txpcsreset,
    ch3_txuserrdy,
    ch3_pllgtrst,
    ch3_txprogdivreset,
    ch3_txpd,
    ch3_tx8b10ben,
    ch3_txpolarity,
    ch3_txprbssel,
    ch3_txprbsforceerr,
    ch3_txdiffctrl,
    ch3_txprecursor,
    ch3_txpostcursor,
    ch3_txinhibit,
    ch3_txresetdone,
    ch3_txpmaresetdone,
    ch3_txmstreset,
    ch3_txmstresetdone,
    ch3_txdata,
    ch3_txctrl1,
    ch3_txctrl0,
    ch3_txctrl2,
    ch3_txrate,
    rx_axi4s_ch0_tvalid,
    rx_axi4s_ch0_tdata,
    rx_axi4s_ch0_tuser,
    rx_axi4s_ch0_tready,
    rx_axi4s_ch1_tvalid,
    rx_axi4s_ch1_tdata,
    rx_axi4s_ch1_tuser,
    rx_axi4s_ch1_tready,
    rx_axi4s_ch2_tvalid,
    rx_axi4s_ch2_tdata,
    rx_axi4s_ch2_tuser,
    rx_axi4s_ch2_tready,
    rx_axi4s_ch3_tvalid,
    rx_axi4s_ch3_tdata,
    rx_axi4s_ch3_tuser,
    rx_axi4s_ch3_tready,
    control_sb_rx_tready,
    control_sb_rx_tdata,
    control_sb_rx_tvalid,
    status_sb_rx_tvalid,
    status_sb_rx_tdata,
    status_sb_rx_tready,
    ch0_rxmstdatapathreset,
    ch0_rxpmareset,
    ch0_rxpcsresetmask,
    ch0_rxpmaresetmask,
    ch0_rxbufreset,
    ch0_rxpllgtrst,
    ch0_rxprogdivreset,
    ch0_rxpd,
    ch0_rxuserrdy,
    ch0_rx8b10ben,
    ch0_rxpolarity,
    ch0_rxprbscntrst,
    ch0_rxprbssel,
    ch0_rxlpmen,
    ch0_rxresetdone,
    ch0_rxpmaresetdone,
    ch0_rxmstreset,
    ch0_rxmstresetdone,
    ch0_rxcdrlock,
    ch0_rxbyteisaligned,
    ch0_rxbufstatus,
    ch0_rxprbserr,
    ch0_rxdata,
    ch0_rxctrl1,
    ch0_rxctrl0,
    ch0_rxctrl3,
    ch0_rxrate,
    ch1_rxmstdatapathreset,
    ch1_rxpmareset,
    ch1_rxpcsresetmask,
    ch1_rxpmaresetmask,
    ch1_rxbufreset,
    ch1_rxpllgtrst,
    ch1_rxprogdivreset,
    ch1_rxpd,
    ch1_rxuserrdy,
    ch1_rx8b10ben,
    ch1_rxpolarity,
    ch1_rxprbscntrst,
    ch1_rxprbssel,
    ch1_rxlpmen,
    ch1_rxresetdone,
    ch1_rxpmaresetdone,
    ch1_rxmstreset,
    ch1_rxmstresetdone,
    ch1_rxcdrlock,
    ch1_rxbyteisaligned,
    ch1_rxbufstatus,
    ch1_rxprbserr,
    ch1_rxdata,
    ch1_rxctrl1,
    ch1_rxctrl0,
    ch1_rxctrl3,
    ch1_rxrate,
    ch2_rxmstdatapathreset,
    ch2_rxpmareset,
    ch2_rxpcsresetmask,
    ch2_rxpmaresetmask,
    ch2_rxbufreset,
    ch2_rxpllgtrst,
    ch2_rxprogdivreset,
    ch2_rxpd,
    ch2_rxuserrdy,
    ch2_rx8b10ben,
    ch2_rxpolarity,
    ch2_rxprbscntrst,
    ch2_rxprbssel,
    ch2_rxlpmen,
    ch2_rxresetdone,
    ch2_rxpmaresetdone,
    ch2_rxmstreset,
    ch2_rxmstresetdone,
    ch2_rxcdrlock,
    ch2_rxbyteisaligned,
    ch2_rxbufstatus,
    ch2_rxprbserr,
    ch2_rxdata,
    ch2_rxctrl1,
    ch2_rxctrl0,
    ch2_rxctrl3,
    ch2_rxrate,
    ch3_rxmstdatapathreset,
    ch3_rxpmareset,
    ch3_rxpcsresetmask,
    ch3_rxpmaresetmask,
    ch3_rxbufreset,
    ch3_rxpllgtrst,
    ch3_rxprogdivreset,
    ch3_rxpd,
    ch3_rxuserrdy,
    ch3_rx8b10ben,
    ch3_rxpolarity,
    ch3_rxprbscntrst,
    ch3_rxprbssel,
    ch3_rxlpmen,
    ch3_rxresetdone,
    ch3_rxpmaresetdone,
    ch3_rxmstreset,
    ch3_rxmstresetdone,
    ch3_rxcdrlock,
    ch3_rxbyteisaligned,
    ch3_rxbufstatus,
    ch3_rxprbserr,
    ch3_rxdata,
    ch3_rxctrl1,
    ch3_rxctrl0,
    ch3_rxctrl3,
    ch3_rxrate);
  input clk_100mhz;
  input gt_ctrl_aclk;
  input gt_ctrl_aresetn;
  input [7:0]s00_axi_awaddr;
  input s00_axi_awvalid;
  output s00_axi_awready;
  input [31:0]s00_axi_wdata;
  input [3:0]s00_axi_wstrb;
  input s00_axi_wvalid;
  output s00_axi_wready;
  output [1:0]s00_axi_bresp;
  output s00_axi_bvalid;
  input s00_axi_bready;
  input [7:0]s00_axi_araddr;
  input s00_axi_arvalid;
  output s00_axi_arready;
  output [31:0]s00_axi_rdata;
  output [1:0]s00_axi_rresp;
  output s00_axi_rvalid;
  input s00_axi_rready;
  input [31:0]dp_gt_ctrl;
  input gt_rxusrclk;
  input gt_txusrclk;
  output tx_bufg_gt_clr;
  output rx_bufg_gt_clr;
  input ch0_iloresetdone;
  input ch1_iloresetdone;
  input ch2_iloresetdone;
  input ch3_iloresetdone;
  output ch0_iloreset;
  output ch1_iloreset;
  output ch2_iloreset;
  output ch3_iloreset;
  input gt_powergood;
  output tx_pll0_reset;
  output tx_pll1_reset;
  output rx_pll0_reset;
  output rx_pll1_reset;
  output hsclk0_rpllpd;
  output hsclk1_rpllpd;
  output hsclk0_lcpllpd;
  output hsclk1_lcpllpd;
  input tx_pll0_locked;
  input tx_pll1_locked;
  input rx_pll0_locked;
  input rx_pll1_locked;
  input tx_mmcm_locked;
  input rx_mmcm_locked;
  output tx_axi4s_ch0_tready;
  input [31:0]tx_axi4s_ch0_tdata;
  input [11:0]tx_axi4s_ch0_tuser;
  input tx_axi4s_ch0_tvalid;
  output tx_axi4s_ch1_tready;
  input [31:0]tx_axi4s_ch1_tdata;
  input [11:0]tx_axi4s_ch1_tuser;
  input tx_axi4s_ch1_tvalid;
  output tx_axi4s_ch2_tready;
  input [31:0]tx_axi4s_ch2_tdata;
  input [11:0]tx_axi4s_ch2_tuser;
  input tx_axi4s_ch2_tvalid;
  output tx_axi4s_ch3_tready;
  input [31:0]tx_axi4s_ch3_tdata;
  input [11:0]tx_axi4s_ch3_tuser;
  input tx_axi4s_ch3_tvalid;
  output status_sb_tx_tvalid;
  output [7:0]status_sb_tx_tdata;
  input status_sb_tx_tready;
  input [7:0]sdi_gt_ctrl;
  output [15:0]sdi_gt_sts;
  input [31:0]sdi_ctrl_sb_rx_in;
  input sdi_ctrl_sb_rx_in_tvalid;
  output sdi_ctrl_sb_rx_in_tready;
  output [31:0]sdi_ctrl_sb_rx_out;
  output sdi_ctrl_sb_rx_out_tvalid;
  input sdi_ctrl_sb_rx_out_tready;
  input [31:0]sdi_ctrl_sb_tx_in;
  input sdi_ctrl_sb_tx_in_tvalid;
  output sdi_ctrl_sb_tx_in_tready;
  output [31:0]sdi_ctrl_sb_tx_out;
  output sdi_ctrl_sb_tx_out_tvalid;
  input sdi_ctrl_sb_tx_out_tready;
  output ch0_txmstdatapathreset;
  output ch0_txpmareset;
  output ch0_txpcsresetmask;
  output [2:0]ch0_txpmaresetmask;
  output ch0_txpcsreset;
  output ch0_txuserrdy;
  output ch0_txprogdivreset;
  output [1:0]ch0_txpd;
  output ch0_tx8b10ben;
  output ch0_txpolarity;
  output [3:0]ch0_txprbssel;
  output ch0_txprbsforceerr;
  output [4:0]ch0_txdiffctrl;
  output [4:0]ch0_txprecursor;
  output [4:0]ch0_txpostcursor;
  output ch0_txinhibit;
  input ch0_txresetdone;
  input ch0_txpmaresetdone;
  output ch0_txmstreset;
  input ch0_txmstresetdone;
  output [31:0]ch0_txdata;
  output [15:0]ch0_txctrl1;
  output [15:0]ch0_txctrl0;
  output [7:0]ch0_txctrl2;
  output [2:0]ch0_txrate;
  input ch0_txphaligndone;
  output ch0_txelecidle;
  input [1:0]ch0_txbufstatus;
  output ch1_txmstdatapathreset;
  output ch1_txpmareset;
  output ch1_txpcsresetmask;
  output [2:0]ch1_txpmaresetmask;
  output ch1_txpcsreset;
  output ch1_txuserrdy;
  output ch1_txprogdivreset;
  output [1:0]ch1_txpd;
  output ch1_tx8b10ben;
  output ch1_txpolarity;
  output [3:0]ch1_txprbssel;
  output ch1_txprbsforceerr;
  output [4:0]ch1_txdiffctrl;
  output [4:0]ch1_txprecursor;
  output [4:0]ch1_txpostcursor;
  output ch1_txinhibit;
  input ch1_txresetdone;
  input ch1_txpmaresetdone;
  output ch1_txmstreset;
  input ch1_txmstresetdone;
  output [31:0]ch1_txdata;
  output [15:0]ch1_txctrl1;
  output [15:0]ch1_txctrl0;
  output [7:0]ch1_txctrl2;
  output [2:0]ch1_txrate;
  output ch2_txmstdatapathreset;
  output ch2_txpmareset;
  output ch2_txpcsresetmask;
  output [2:0]ch2_txpmaresetmask;
  output ch2_txpcsreset;
  output ch2_txuserrdy;
  output ch2_pllgtrst;
  output ch2_txprogdivreset;
  output [1:0]ch2_txpd;
  output ch2_tx8b10ben;
  output ch2_txpolarity;
  output [3:0]ch2_txprbssel;
  output ch2_txprbsforceerr;
  output [4:0]ch2_txdiffctrl;
  output [4:0]ch2_txprecursor;
  output [4:0]ch2_txpostcursor;
  output ch2_txinhibit;
  input ch2_txresetdone;
  input ch2_txpmaresetdone;
  output ch2_txmstreset;
  input ch2_txmstresetdone;
  output [31:0]ch2_txdata;
  output [15:0]ch2_txctrl1;
  output [15:0]ch2_txctrl0;
  output [7:0]ch2_txctrl2;
  output [2:0]ch2_txrate;
  output ch3_txmstdatapathreset;
  output ch3_txpmareset;
  output ch3_txpcsresetmask;
  output [2:0]ch3_txpmaresetmask;
  output ch3_txpcsreset;
  output ch3_txuserrdy;
  output ch3_pllgtrst;
  output ch3_txprogdivreset;
  output [1:0]ch3_txpd;
  output ch3_tx8b10ben;
  output ch3_txpolarity;
  output [3:0]ch3_txprbssel;
  output ch3_txprbsforceerr;
  output [4:0]ch3_txdiffctrl;
  output [4:0]ch3_txprecursor;
  output [4:0]ch3_txpostcursor;
  output ch3_txinhibit;
  input ch3_txresetdone;
  input ch3_txpmaresetdone;
  output ch3_txmstreset;
  input ch3_txmstresetdone;
  output [31:0]ch3_txdata;
  output [15:0]ch3_txctrl1;
  output [15:0]ch3_txctrl0;
  output [7:0]ch3_txctrl2;
  output [2:0]ch3_txrate;
  output rx_axi4s_ch0_tvalid;
  output [31:0]rx_axi4s_ch0_tdata;
  output [11:0]rx_axi4s_ch0_tuser;
  input rx_axi4s_ch0_tready;
  output rx_axi4s_ch1_tvalid;
  output [31:0]rx_axi4s_ch1_tdata;
  output [11:0]rx_axi4s_ch1_tuser;
  input rx_axi4s_ch1_tready;
  output rx_axi4s_ch2_tvalid;
  output [31:0]rx_axi4s_ch2_tdata;
  output [11:0]rx_axi4s_ch2_tuser;
  input rx_axi4s_ch2_tready;
  output rx_axi4s_ch3_tvalid;
  output [31:0]rx_axi4s_ch3_tdata;
  output [11:0]rx_axi4s_ch3_tuser;
  input rx_axi4s_ch3_tready;
  output control_sb_rx_tready;
  input [7:0]control_sb_rx_tdata;
  input control_sb_rx_tvalid;
  output status_sb_rx_tvalid;
  output [15:0]status_sb_rx_tdata;
  input status_sb_rx_tready;
  output ch0_rxmstdatapathreset;
  output ch0_rxpmareset;
  output [4:0]ch0_rxpcsresetmask;
  output [6:0]ch0_rxpmaresetmask;
  output ch0_rxbufreset;
  output ch0_rxpllgtrst;
  output ch0_rxprogdivreset;
  output [1:0]ch0_rxpd;
  output ch0_rxuserrdy;
  output ch0_rx8b10ben;
  output ch0_rxpolarity;
  output ch0_rxprbscntrst;
  output [3:0]ch0_rxprbssel;
  output ch0_rxlpmen;
  input ch0_rxresetdone;
  input ch0_rxpmaresetdone;
  output ch0_rxmstreset;
  input ch0_rxmstresetdone;
  input ch0_rxcdrlock;
  input ch0_rxbyteisaligned;
  input [2:0]ch0_rxbufstatus;
  input ch0_rxprbserr;
  input [31:0]ch0_rxdata;
  input [15:0]ch0_rxctrl1;
  input [15:0]ch0_rxctrl0;
  input [7:0]ch0_rxctrl3;
  output [2:0]ch0_rxrate;
  output ch1_rxmstdatapathreset;
  output ch1_rxpmareset;
  output [4:0]ch1_rxpcsresetmask;
  output [6:0]ch1_rxpmaresetmask;
  output ch1_rxbufreset;
  output ch1_rxpllgtrst;
  output ch1_rxprogdivreset;
  output [1:0]ch1_rxpd;
  output ch1_rxuserrdy;
  output ch1_rx8b10ben;
  output ch1_rxpolarity;
  output ch1_rxprbscntrst;
  output [3:0]ch1_rxprbssel;
  output ch1_rxlpmen;
  input ch1_rxresetdone;
  input ch1_rxpmaresetdone;
  output ch1_rxmstreset;
  input ch1_rxmstresetdone;
  input ch1_rxcdrlock;
  input ch1_rxbyteisaligned;
  input [2:0]ch1_rxbufstatus;
  input ch1_rxprbserr;
  input [31:0]ch1_rxdata;
  input [15:0]ch1_rxctrl1;
  input [15:0]ch1_rxctrl0;
  input [7:0]ch1_rxctrl3;
  output [2:0]ch1_rxrate;
  output ch2_rxmstdatapathreset;
  output ch2_rxpmareset;
  output [4:0]ch2_rxpcsresetmask;
  output [6:0]ch2_rxpmaresetmask;
  output ch2_rxbufreset;
  output ch2_rxpllgtrst;
  output ch2_rxprogdivreset;
  output [1:0]ch2_rxpd;
  output ch2_rxuserrdy;
  output ch2_rx8b10ben;
  output ch2_rxpolarity;
  output ch2_rxprbscntrst;
  output [3:0]ch2_rxprbssel;
  output ch2_rxlpmen;
  input ch2_rxresetdone;
  input ch2_rxpmaresetdone;
  output ch2_rxmstreset;
  input ch2_rxmstresetdone;
  input ch2_rxcdrlock;
  input ch2_rxbyteisaligned;
  input [2:0]ch2_rxbufstatus;
  input ch2_rxprbserr;
  input [31:0]ch2_rxdata;
  input [15:0]ch2_rxctrl1;
  input [15:0]ch2_rxctrl0;
  input [7:0]ch2_rxctrl3;
  output [2:0]ch2_rxrate;
  output ch3_rxmstdatapathreset;
  output ch3_rxpmareset;
  output [4:0]ch3_rxpcsresetmask;
  output [6:0]ch3_rxpmaresetmask;
  output ch3_rxbufreset;
  output ch3_rxpllgtrst;
  output ch3_rxprogdivreset;
  output [1:0]ch3_rxpd;
  output ch3_rxuserrdy;
  output ch3_rx8b10ben;
  output ch3_rxpolarity;
  output ch3_rxprbscntrst;
  output [3:0]ch3_rxprbssel;
  output ch3_rxlpmen;
  input ch3_rxresetdone;
  input ch3_rxpmaresetdone;
  output ch3_rxmstreset;
  input ch3_rxmstresetdone;
  input ch3_rxcdrlock;
  input ch3_rxbyteisaligned;
  input [2:0]ch3_rxbufstatus;
  input ch3_rxprbserr;
  input [31:0]ch3_rxdata;
  input [15:0]ch3_rxctrl1;
  input [15:0]ch3_rxctrl0;
  input [7:0]ch3_rxctrl3;
  output [2:0]ch3_rxrate;

  wire \<const0> ;
  wire [2:0]ch0_rxbufstatus;
  wire ch0_rxbyteisaligned;
  wire ch0_rxcdrlock;
  wire [15:0]ch0_rxctrl0;
  wire [15:0]ch0_rxctrl1;
  wire [7:0]ch0_rxctrl3;
  wire [31:0]ch0_rxdata;
  wire ch0_rxmstresetdone;
  wire ch0_rxpmaresetdone;
  wire ch0_rxprbserr;
  wire ch0_rxresetdone;
  wire ch0_txmstresetdone;
  wire ch0_txpmaresetdone;
  wire ch0_txresetdone;
  wire [2:0]ch1_rxbufstatus;
  wire ch1_rxbyteisaligned;
  wire ch1_rxcdrlock;
  wire [15:0]ch1_rxctrl0;
  wire [15:0]ch1_rxctrl1;
  wire [7:0]ch1_rxctrl3;
  wire [31:0]ch1_rxdata;
  wire ch1_rxmstresetdone;
  wire ch1_rxpmaresetdone;
  wire ch1_rxprbserr;
  wire ch1_rxresetdone;
  wire ch1_txmstresetdone;
  wire ch1_txpmaresetdone;
  wire ch1_txresetdone;
  wire [2:0]ch2_rxbufstatus;
  wire ch2_rxbyteisaligned;
  wire ch2_rxcdrlock;
  wire [15:0]ch2_rxctrl0;
  wire [15:0]ch2_rxctrl1;
  wire [7:0]ch2_rxctrl3;
  wire [31:0]ch2_rxdata;
  wire ch2_rxmstresetdone;
  wire ch2_rxpmaresetdone;
  wire ch2_rxprbserr;
  wire ch2_rxresetdone;
  wire ch2_txmstresetdone;
  wire ch2_txpmaresetdone;
  wire ch2_txresetdone;
  wire [2:0]ch3_rxbufstatus;
  wire ch3_rxbyteisaligned;
  wire ch3_rxcdrlock;
  wire [15:0]ch3_rxctrl0;
  wire [15:0]ch3_rxctrl1;
  wire [7:0]ch3_rxctrl3;
  wire [31:0]ch3_rxdata;
  wire ch3_rxmstdatapathreset;
  wire ch3_rxmstreset;
  wire ch3_rxmstresetdone;
  wire ch3_rxpmaresetdone;
  wire ch3_rxprbserr;
  wire [2:0]ch3_rxrate;
  wire ch3_rxresetdone;
  wire ch3_rxuserrdy;
  wire ch3_txmstresetdone;
  wire ch3_txpmaresetdone;
  wire ch3_txresetdone;
  wire ch_rxmstresetdone4;
  wire ch_txmstresetdone4;
  wire [7:0]control_sb_rx_tdata;
  wire control_sb_rx_tvalid;
  wire [31:0]dp_gt_ctrl;
  wire gt_ctrl_aclk;
  wire gt_ctrl_aresetn;
  wire gt_powergood;
  wire gt_rxusrclk;
  wire gt_txusrclk;
  wire gtwiz_reset_all_in0;
  (* async_reg = "true" *) wire gtwiz_userclk_rx_active_meta;
  (* async_reg = "true" *) wire gtwiz_userclk_rx_active_sync;
  (* async_reg = "true" *) wire gtwiz_userclk_tx_active_meta;
  (* async_reg = "true" *) wire gtwiz_userclk_tx_active_sync;
  wire rx_bufg_gt_clr;
  wire rx_mmcm_locked;
  wire rx_pll0_locked;
  wire rx_pll1_locked;
  wire src_in0;
  wire src_in00_out;
  wire src_in01_out;
  wire src_in02_out;
  wire [11:0]\^status_sb_rx_tdata ;
  wire tx_bufg_gt_clr_int2;
  wire tx_mmcm_locked;
  wire tx_pll0_locked;
  wire tx_pll1_locked;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtrxreset_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gttxreset_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_rx_cdr_stable_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_rx_done_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_tx_done_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_iloreset_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_mst_tx_dp_reset_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_mst_tx_reset_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pcie_rstb_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pllreset_rx_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pllreset_tx_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rx_clr_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rx_clrb_leaf_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rxprogdivreset_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_tx_clr_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_tx_clrb_leaf_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_txprogdivreset_out_UNCONNECTED;
  wire NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_txuserrdy_out_UNCONNECTED;
  wire [2:0]NLW_xpm_single_ch0_rxbufstatus_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_rxcdrlock_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_rxmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_rxpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_rxprbserr_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_txmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_txmstresetdone_tx_usr_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_txpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch0_txresetdone_inst_dest_out_UNCONNECTED;
  wire [2:0]NLW_xpm_single_ch1_rxbufstatus_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_rxcdrlock_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_rxmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_rxpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_rxprbserr_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_txmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_txpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch1_txresetdone_inst_dest_out_UNCONNECTED;
  wire [2:0]NLW_xpm_single_ch2_rxbufstatus_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_rxcdrlock_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_rxmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_rxpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_rxprbserr_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_txmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_txpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch2_txresetdone_inst_dest_out_UNCONNECTED;
  wire [2:0]NLW_xpm_single_ch3_rxbufstatus_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_rxcdrlock_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_rxmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_rxpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_rxprbserr_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_txmstresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_txpmaresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_ch3_txresetdone_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_gt_powergood_rx_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_gt_powergood_tx_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_hsclk0_rpll_locked_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_hsclk1_rpll_locked_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_rxbufgt_clr_inst_dest_out_UNCONNECTED;
  wire NLW_xpm_single_txbufgt_clr_inst_dest_out_UNCONNECTED;

  assign ch0_iloreset = \<const0> ;
  assign ch0_rx8b10ben = \<const0> ;
  assign ch0_rxbufreset = \<const0> ;
  assign ch0_rxlpmen = \<const0> ;
  assign ch0_rxmstdatapathreset = ch3_rxmstdatapathreset;
  assign ch0_rxmstreset = ch3_rxmstreset;
  assign ch0_rxpcsresetmask[4] = \<const0> ;
  assign ch0_rxpcsresetmask[3] = \<const0> ;
  assign ch0_rxpcsresetmask[2] = \<const0> ;
  assign ch0_rxpcsresetmask[1] = \<const0> ;
  assign ch0_rxpcsresetmask[0] = \<const0> ;
  assign ch0_rxpd[1] = \<const0> ;
  assign ch0_rxpd[0] = \<const0> ;
  assign ch0_rxpllgtrst = \<const0> ;
  assign ch0_rxpmareset = \<const0> ;
  assign ch0_rxpmaresetmask[6] = \<const0> ;
  assign ch0_rxpmaresetmask[5] = \<const0> ;
  assign ch0_rxpmaresetmask[4] = \<const0> ;
  assign ch0_rxpmaresetmask[3] = \<const0> ;
  assign ch0_rxpmaresetmask[2] = \<const0> ;
  assign ch0_rxpmaresetmask[1] = \<const0> ;
  assign ch0_rxpmaresetmask[0] = \<const0> ;
  assign ch0_rxpolarity = \<const0> ;
  assign ch0_rxprbscntrst = \<const0> ;
  assign ch0_rxprbssel[3] = \<const0> ;
  assign ch0_rxprbssel[2] = \<const0> ;
  assign ch0_rxprbssel[1] = \<const0> ;
  assign ch0_rxprbssel[0] = \<const0> ;
  assign ch0_rxprogdivreset = \<const0> ;
  assign ch0_rxrate[2:0] = ch3_rxrate;
  assign ch0_rxuserrdy = ch3_rxuserrdy;
  assign ch0_tx8b10ben = \<const0> ;
  assign ch0_txctrl0[15] = \<const0> ;
  assign ch0_txctrl0[14] = \<const0> ;
  assign ch0_txctrl0[13] = \<const0> ;
  assign ch0_txctrl0[12] = \<const0> ;
  assign ch0_txctrl0[11] = \<const0> ;
  assign ch0_txctrl0[10] = \<const0> ;
  assign ch0_txctrl0[9] = \<const0> ;
  assign ch0_txctrl0[8] = \<const0> ;
  assign ch0_txctrl0[7] = \<const0> ;
  assign ch0_txctrl0[6] = \<const0> ;
  assign ch0_txctrl0[5] = \<const0> ;
  assign ch0_txctrl0[4] = \<const0> ;
  assign ch0_txctrl0[3] = \<const0> ;
  assign ch0_txctrl0[2] = \<const0> ;
  assign ch0_txctrl0[1] = \<const0> ;
  assign ch0_txctrl0[0] = \<const0> ;
  assign ch0_txctrl1[15] = \<const0> ;
  assign ch0_txctrl1[14] = \<const0> ;
  assign ch0_txctrl1[13] = \<const0> ;
  assign ch0_txctrl1[12] = \<const0> ;
  assign ch0_txctrl1[11] = \<const0> ;
  assign ch0_txctrl1[10] = \<const0> ;
  assign ch0_txctrl1[9] = \<const0> ;
  assign ch0_txctrl1[8] = \<const0> ;
  assign ch0_txctrl1[7] = \<const0> ;
  assign ch0_txctrl1[6] = \<const0> ;
  assign ch0_txctrl1[5] = \<const0> ;
  assign ch0_txctrl1[4] = \<const0> ;
  assign ch0_txctrl1[3] = \<const0> ;
  assign ch0_txctrl1[2] = \<const0> ;
  assign ch0_txctrl1[1] = \<const0> ;
  assign ch0_txctrl1[0] = \<const0> ;
  assign ch0_txctrl2[7] = \<const0> ;
  assign ch0_txctrl2[6] = \<const0> ;
  assign ch0_txctrl2[5] = \<const0> ;
  assign ch0_txctrl2[4] = \<const0> ;
  assign ch0_txctrl2[3] = \<const0> ;
  assign ch0_txctrl2[2] = \<const0> ;
  assign ch0_txctrl2[1] = \<const0> ;
  assign ch0_txctrl2[0] = \<const0> ;
  assign ch0_txdata[31] = \<const0> ;
  assign ch0_txdata[30] = \<const0> ;
  assign ch0_txdata[29] = \<const0> ;
  assign ch0_txdata[28] = \<const0> ;
  assign ch0_txdata[27] = \<const0> ;
  assign ch0_txdata[26] = \<const0> ;
  assign ch0_txdata[25] = \<const0> ;
  assign ch0_txdata[24] = \<const0> ;
  assign ch0_txdata[23] = \<const0> ;
  assign ch0_txdata[22] = \<const0> ;
  assign ch0_txdata[21] = \<const0> ;
  assign ch0_txdata[20] = \<const0> ;
  assign ch0_txdata[19] = \<const0> ;
  assign ch0_txdata[18] = \<const0> ;
  assign ch0_txdata[17] = \<const0> ;
  assign ch0_txdata[16] = \<const0> ;
  assign ch0_txdata[15] = \<const0> ;
  assign ch0_txdata[14] = \<const0> ;
  assign ch0_txdata[13] = \<const0> ;
  assign ch0_txdata[12] = \<const0> ;
  assign ch0_txdata[11] = \<const0> ;
  assign ch0_txdata[10] = \<const0> ;
  assign ch0_txdata[9] = \<const0> ;
  assign ch0_txdata[8] = \<const0> ;
  assign ch0_txdata[7] = \<const0> ;
  assign ch0_txdata[6] = \<const0> ;
  assign ch0_txdata[5] = \<const0> ;
  assign ch0_txdata[4] = \<const0> ;
  assign ch0_txdata[3] = \<const0> ;
  assign ch0_txdata[2] = \<const0> ;
  assign ch0_txdata[1] = \<const0> ;
  assign ch0_txdata[0] = \<const0> ;
  assign ch0_txdiffctrl[4] = \<const0> ;
  assign ch0_txdiffctrl[3] = \<const0> ;
  assign ch0_txdiffctrl[2] = \<const0> ;
  assign ch0_txdiffctrl[1] = \<const0> ;
  assign ch0_txdiffctrl[0] = \<const0> ;
  assign ch0_txelecidle = \<const0> ;
  assign ch0_txinhibit = \<const0> ;
  assign ch0_txmstdatapathreset = \<const0> ;
  assign ch0_txmstreset = \<const0> ;
  assign ch0_txpcsreset = \<const0> ;
  assign ch0_txpcsresetmask = \<const0> ;
  assign ch0_txpd[1] = \<const0> ;
  assign ch0_txpd[0] = \<const0> ;
  assign ch0_txpmareset = \<const0> ;
  assign ch0_txpmaresetmask[2] = \<const0> ;
  assign ch0_txpmaresetmask[1] = \<const0> ;
  assign ch0_txpmaresetmask[0] = \<const0> ;
  assign ch0_txpolarity = \<const0> ;
  assign ch0_txpostcursor[4] = \<const0> ;
  assign ch0_txpostcursor[3] = \<const0> ;
  assign ch0_txpostcursor[2] = \<const0> ;
  assign ch0_txpostcursor[1] = \<const0> ;
  assign ch0_txpostcursor[0] = \<const0> ;
  assign ch0_txprbsforceerr = \<const0> ;
  assign ch0_txprbssel[3] = \<const0> ;
  assign ch0_txprbssel[2] = \<const0> ;
  assign ch0_txprbssel[1] = \<const0> ;
  assign ch0_txprbssel[0] = \<const0> ;
  assign ch0_txprecursor[4] = \<const0> ;
  assign ch0_txprecursor[3] = \<const0> ;
  assign ch0_txprecursor[2] = \<const0> ;
  assign ch0_txprecursor[1] = \<const0> ;
  assign ch0_txprecursor[0] = \<const0> ;
  assign ch0_txprogdivreset = \<const0> ;
  assign ch0_txrate[2] = \<const0> ;
  assign ch0_txrate[1] = \<const0> ;
  assign ch0_txrate[0] = \<const0> ;
  assign ch0_txuserrdy = \<const0> ;
  assign ch1_iloreset = \<const0> ;
  assign ch1_rx8b10ben = \<const0> ;
  assign ch1_rxbufreset = \<const0> ;
  assign ch1_rxlpmen = \<const0> ;
  assign ch1_rxmstdatapathreset = ch3_rxmstdatapathreset;
  assign ch1_rxmstreset = ch3_rxmstreset;
  assign ch1_rxpcsresetmask[4] = \<const0> ;
  assign ch1_rxpcsresetmask[3] = \<const0> ;
  assign ch1_rxpcsresetmask[2] = \<const0> ;
  assign ch1_rxpcsresetmask[1] = \<const0> ;
  assign ch1_rxpcsresetmask[0] = \<const0> ;
  assign ch1_rxpd[1] = \<const0> ;
  assign ch1_rxpd[0] = \<const0> ;
  assign ch1_rxpllgtrst = \<const0> ;
  assign ch1_rxpmareset = \<const0> ;
  assign ch1_rxpmaresetmask[6] = \<const0> ;
  assign ch1_rxpmaresetmask[5] = \<const0> ;
  assign ch1_rxpmaresetmask[4] = \<const0> ;
  assign ch1_rxpmaresetmask[3] = \<const0> ;
  assign ch1_rxpmaresetmask[2] = \<const0> ;
  assign ch1_rxpmaresetmask[1] = \<const0> ;
  assign ch1_rxpmaresetmask[0] = \<const0> ;
  assign ch1_rxpolarity = \<const0> ;
  assign ch1_rxprbscntrst = \<const0> ;
  assign ch1_rxprbssel[3] = \<const0> ;
  assign ch1_rxprbssel[2] = \<const0> ;
  assign ch1_rxprbssel[1] = \<const0> ;
  assign ch1_rxprbssel[0] = \<const0> ;
  assign ch1_rxprogdivreset = \<const0> ;
  assign ch1_rxrate[2:0] = ch3_rxrate;
  assign ch1_rxuserrdy = ch3_rxuserrdy;
  assign ch1_tx8b10ben = \<const0> ;
  assign ch1_txctrl0[15] = \<const0> ;
  assign ch1_txctrl0[14] = \<const0> ;
  assign ch1_txctrl0[13] = \<const0> ;
  assign ch1_txctrl0[12] = \<const0> ;
  assign ch1_txctrl0[11] = \<const0> ;
  assign ch1_txctrl0[10] = \<const0> ;
  assign ch1_txctrl0[9] = \<const0> ;
  assign ch1_txctrl0[8] = \<const0> ;
  assign ch1_txctrl0[7] = \<const0> ;
  assign ch1_txctrl0[6] = \<const0> ;
  assign ch1_txctrl0[5] = \<const0> ;
  assign ch1_txctrl0[4] = \<const0> ;
  assign ch1_txctrl0[3] = \<const0> ;
  assign ch1_txctrl0[2] = \<const0> ;
  assign ch1_txctrl0[1] = \<const0> ;
  assign ch1_txctrl0[0] = \<const0> ;
  assign ch1_txctrl1[15] = \<const0> ;
  assign ch1_txctrl1[14] = \<const0> ;
  assign ch1_txctrl1[13] = \<const0> ;
  assign ch1_txctrl1[12] = \<const0> ;
  assign ch1_txctrl1[11] = \<const0> ;
  assign ch1_txctrl1[10] = \<const0> ;
  assign ch1_txctrl1[9] = \<const0> ;
  assign ch1_txctrl1[8] = \<const0> ;
  assign ch1_txctrl1[7] = \<const0> ;
  assign ch1_txctrl1[6] = \<const0> ;
  assign ch1_txctrl1[5] = \<const0> ;
  assign ch1_txctrl1[4] = \<const0> ;
  assign ch1_txctrl1[3] = \<const0> ;
  assign ch1_txctrl1[2] = \<const0> ;
  assign ch1_txctrl1[1] = \<const0> ;
  assign ch1_txctrl1[0] = \<const0> ;
  assign ch1_txctrl2[7] = \<const0> ;
  assign ch1_txctrl2[6] = \<const0> ;
  assign ch1_txctrl2[5] = \<const0> ;
  assign ch1_txctrl2[4] = \<const0> ;
  assign ch1_txctrl2[3] = \<const0> ;
  assign ch1_txctrl2[2] = \<const0> ;
  assign ch1_txctrl2[1] = \<const0> ;
  assign ch1_txctrl2[0] = \<const0> ;
  assign ch1_txdata[31] = \<const0> ;
  assign ch1_txdata[30] = \<const0> ;
  assign ch1_txdata[29] = \<const0> ;
  assign ch1_txdata[28] = \<const0> ;
  assign ch1_txdata[27] = \<const0> ;
  assign ch1_txdata[26] = \<const0> ;
  assign ch1_txdata[25] = \<const0> ;
  assign ch1_txdata[24] = \<const0> ;
  assign ch1_txdata[23] = \<const0> ;
  assign ch1_txdata[22] = \<const0> ;
  assign ch1_txdata[21] = \<const0> ;
  assign ch1_txdata[20] = \<const0> ;
  assign ch1_txdata[19] = \<const0> ;
  assign ch1_txdata[18] = \<const0> ;
  assign ch1_txdata[17] = \<const0> ;
  assign ch1_txdata[16] = \<const0> ;
  assign ch1_txdata[15] = \<const0> ;
  assign ch1_txdata[14] = \<const0> ;
  assign ch1_txdata[13] = \<const0> ;
  assign ch1_txdata[12] = \<const0> ;
  assign ch1_txdata[11] = \<const0> ;
  assign ch1_txdata[10] = \<const0> ;
  assign ch1_txdata[9] = \<const0> ;
  assign ch1_txdata[8] = \<const0> ;
  assign ch1_txdata[7] = \<const0> ;
  assign ch1_txdata[6] = \<const0> ;
  assign ch1_txdata[5] = \<const0> ;
  assign ch1_txdata[4] = \<const0> ;
  assign ch1_txdata[3] = \<const0> ;
  assign ch1_txdata[2] = \<const0> ;
  assign ch1_txdata[1] = \<const0> ;
  assign ch1_txdata[0] = \<const0> ;
  assign ch1_txdiffctrl[4] = \<const0> ;
  assign ch1_txdiffctrl[3] = \<const0> ;
  assign ch1_txdiffctrl[2] = \<const0> ;
  assign ch1_txdiffctrl[1] = \<const0> ;
  assign ch1_txdiffctrl[0] = \<const0> ;
  assign ch1_txinhibit = \<const0> ;
  assign ch1_txmstdatapathreset = \<const0> ;
  assign ch1_txmstreset = \<const0> ;
  assign ch1_txpcsreset = \<const0> ;
  assign ch1_txpcsresetmask = \<const0> ;
  assign ch1_txpd[1] = \<const0> ;
  assign ch1_txpd[0] = \<const0> ;
  assign ch1_txpmareset = \<const0> ;
  assign ch1_txpmaresetmask[2] = \<const0> ;
  assign ch1_txpmaresetmask[1] = \<const0> ;
  assign ch1_txpmaresetmask[0] = \<const0> ;
  assign ch1_txpolarity = \<const0> ;
  assign ch1_txpostcursor[4] = \<const0> ;
  assign ch1_txpostcursor[3] = \<const0> ;
  assign ch1_txpostcursor[2] = \<const0> ;
  assign ch1_txpostcursor[1] = \<const0> ;
  assign ch1_txpostcursor[0] = \<const0> ;
  assign ch1_txprbsforceerr = \<const0> ;
  assign ch1_txprbssel[3] = \<const0> ;
  assign ch1_txprbssel[2] = \<const0> ;
  assign ch1_txprbssel[1] = \<const0> ;
  assign ch1_txprbssel[0] = \<const0> ;
  assign ch1_txprecursor[4] = \<const0> ;
  assign ch1_txprecursor[3] = \<const0> ;
  assign ch1_txprecursor[2] = \<const0> ;
  assign ch1_txprecursor[1] = \<const0> ;
  assign ch1_txprecursor[0] = \<const0> ;
  assign ch1_txprogdivreset = \<const0> ;
  assign ch1_txrate[2] = \<const0> ;
  assign ch1_txrate[1] = \<const0> ;
  assign ch1_txrate[0] = \<const0> ;
  assign ch1_txuserrdy = \<const0> ;
  assign ch2_iloreset = \<const0> ;
  assign ch2_pllgtrst = \<const0> ;
  assign ch2_rx8b10ben = \<const0> ;
  assign ch2_rxbufreset = \<const0> ;
  assign ch2_rxlpmen = \<const0> ;
  assign ch2_rxmstdatapathreset = ch3_rxmstdatapathreset;
  assign ch2_rxmstreset = ch3_rxmstreset;
  assign ch2_rxpcsresetmask[4] = \<const0> ;
  assign ch2_rxpcsresetmask[3] = \<const0> ;
  assign ch2_rxpcsresetmask[2] = \<const0> ;
  assign ch2_rxpcsresetmask[1] = \<const0> ;
  assign ch2_rxpcsresetmask[0] = \<const0> ;
  assign ch2_rxpd[1] = \<const0> ;
  assign ch2_rxpd[0] = \<const0> ;
  assign ch2_rxpllgtrst = \<const0> ;
  assign ch2_rxpmareset = \<const0> ;
  assign ch2_rxpmaresetmask[6] = \<const0> ;
  assign ch2_rxpmaresetmask[5] = \<const0> ;
  assign ch2_rxpmaresetmask[4] = \<const0> ;
  assign ch2_rxpmaresetmask[3] = \<const0> ;
  assign ch2_rxpmaresetmask[2] = \<const0> ;
  assign ch2_rxpmaresetmask[1] = \<const0> ;
  assign ch2_rxpmaresetmask[0] = \<const0> ;
  assign ch2_rxpolarity = \<const0> ;
  assign ch2_rxprbscntrst = \<const0> ;
  assign ch2_rxprbssel[3] = \<const0> ;
  assign ch2_rxprbssel[2] = \<const0> ;
  assign ch2_rxprbssel[1] = \<const0> ;
  assign ch2_rxprbssel[0] = \<const0> ;
  assign ch2_rxprogdivreset = \<const0> ;
  assign ch2_rxrate[2:0] = ch3_rxrate;
  assign ch2_rxuserrdy = ch3_rxuserrdy;
  assign ch2_tx8b10ben = \<const0> ;
  assign ch2_txctrl0[15] = \<const0> ;
  assign ch2_txctrl0[14] = \<const0> ;
  assign ch2_txctrl0[13] = \<const0> ;
  assign ch2_txctrl0[12] = \<const0> ;
  assign ch2_txctrl0[11] = \<const0> ;
  assign ch2_txctrl0[10] = \<const0> ;
  assign ch2_txctrl0[9] = \<const0> ;
  assign ch2_txctrl0[8] = \<const0> ;
  assign ch2_txctrl0[7] = \<const0> ;
  assign ch2_txctrl0[6] = \<const0> ;
  assign ch2_txctrl0[5] = \<const0> ;
  assign ch2_txctrl0[4] = \<const0> ;
  assign ch2_txctrl0[3] = \<const0> ;
  assign ch2_txctrl0[2] = \<const0> ;
  assign ch2_txctrl0[1] = \<const0> ;
  assign ch2_txctrl0[0] = \<const0> ;
  assign ch2_txctrl1[15] = \<const0> ;
  assign ch2_txctrl1[14] = \<const0> ;
  assign ch2_txctrl1[13] = \<const0> ;
  assign ch2_txctrl1[12] = \<const0> ;
  assign ch2_txctrl1[11] = \<const0> ;
  assign ch2_txctrl1[10] = \<const0> ;
  assign ch2_txctrl1[9] = \<const0> ;
  assign ch2_txctrl1[8] = \<const0> ;
  assign ch2_txctrl1[7] = \<const0> ;
  assign ch2_txctrl1[6] = \<const0> ;
  assign ch2_txctrl1[5] = \<const0> ;
  assign ch2_txctrl1[4] = \<const0> ;
  assign ch2_txctrl1[3] = \<const0> ;
  assign ch2_txctrl1[2] = \<const0> ;
  assign ch2_txctrl1[1] = \<const0> ;
  assign ch2_txctrl1[0] = \<const0> ;
  assign ch2_txctrl2[7] = \<const0> ;
  assign ch2_txctrl2[6] = \<const0> ;
  assign ch2_txctrl2[5] = \<const0> ;
  assign ch2_txctrl2[4] = \<const0> ;
  assign ch2_txctrl2[3] = \<const0> ;
  assign ch2_txctrl2[2] = \<const0> ;
  assign ch2_txctrl2[1] = \<const0> ;
  assign ch2_txctrl2[0] = \<const0> ;
  assign ch2_txdata[31] = \<const0> ;
  assign ch2_txdata[30] = \<const0> ;
  assign ch2_txdata[29] = \<const0> ;
  assign ch2_txdata[28] = \<const0> ;
  assign ch2_txdata[27] = \<const0> ;
  assign ch2_txdata[26] = \<const0> ;
  assign ch2_txdata[25] = \<const0> ;
  assign ch2_txdata[24] = \<const0> ;
  assign ch2_txdata[23] = \<const0> ;
  assign ch2_txdata[22] = \<const0> ;
  assign ch2_txdata[21] = \<const0> ;
  assign ch2_txdata[20] = \<const0> ;
  assign ch2_txdata[19] = \<const0> ;
  assign ch2_txdata[18] = \<const0> ;
  assign ch2_txdata[17] = \<const0> ;
  assign ch2_txdata[16] = \<const0> ;
  assign ch2_txdata[15] = \<const0> ;
  assign ch2_txdata[14] = \<const0> ;
  assign ch2_txdata[13] = \<const0> ;
  assign ch2_txdata[12] = \<const0> ;
  assign ch2_txdata[11] = \<const0> ;
  assign ch2_txdata[10] = \<const0> ;
  assign ch2_txdata[9] = \<const0> ;
  assign ch2_txdata[8] = \<const0> ;
  assign ch2_txdata[7] = \<const0> ;
  assign ch2_txdata[6] = \<const0> ;
  assign ch2_txdata[5] = \<const0> ;
  assign ch2_txdata[4] = \<const0> ;
  assign ch2_txdata[3] = \<const0> ;
  assign ch2_txdata[2] = \<const0> ;
  assign ch2_txdata[1] = \<const0> ;
  assign ch2_txdata[0] = \<const0> ;
  assign ch2_txdiffctrl[4] = \<const0> ;
  assign ch2_txdiffctrl[3] = \<const0> ;
  assign ch2_txdiffctrl[2] = \<const0> ;
  assign ch2_txdiffctrl[1] = \<const0> ;
  assign ch2_txdiffctrl[0] = \<const0> ;
  assign ch2_txinhibit = \<const0> ;
  assign ch2_txmstdatapathreset = \<const0> ;
  assign ch2_txmstreset = \<const0> ;
  assign ch2_txpcsreset = \<const0> ;
  assign ch2_txpcsresetmask = \<const0> ;
  assign ch2_txpd[1] = \<const0> ;
  assign ch2_txpd[0] = \<const0> ;
  assign ch2_txpmareset = \<const0> ;
  assign ch2_txpmaresetmask[2] = \<const0> ;
  assign ch2_txpmaresetmask[1] = \<const0> ;
  assign ch2_txpmaresetmask[0] = \<const0> ;
  assign ch2_txpolarity = \<const0> ;
  assign ch2_txpostcursor[4] = \<const0> ;
  assign ch2_txpostcursor[3] = \<const0> ;
  assign ch2_txpostcursor[2] = \<const0> ;
  assign ch2_txpostcursor[1] = \<const0> ;
  assign ch2_txpostcursor[0] = \<const0> ;
  assign ch2_txprbsforceerr = \<const0> ;
  assign ch2_txprbssel[3] = \<const0> ;
  assign ch2_txprbssel[2] = \<const0> ;
  assign ch2_txprbssel[1] = \<const0> ;
  assign ch2_txprbssel[0] = \<const0> ;
  assign ch2_txprecursor[4] = \<const0> ;
  assign ch2_txprecursor[3] = \<const0> ;
  assign ch2_txprecursor[2] = \<const0> ;
  assign ch2_txprecursor[1] = \<const0> ;
  assign ch2_txprecursor[0] = \<const0> ;
  assign ch2_txprogdivreset = \<const0> ;
  assign ch2_txrate[2] = \<const0> ;
  assign ch2_txrate[1] = \<const0> ;
  assign ch2_txrate[0] = \<const0> ;
  assign ch2_txuserrdy = \<const0> ;
  assign ch3_iloreset = \<const0> ;
  assign ch3_pllgtrst = \<const0> ;
  assign ch3_rx8b10ben = \<const0> ;
  assign ch3_rxbufreset = \<const0> ;
  assign ch3_rxlpmen = \<const0> ;
  assign ch3_rxpcsresetmask[4] = \<const0> ;
  assign ch3_rxpcsresetmask[3] = \<const0> ;
  assign ch3_rxpcsresetmask[2] = \<const0> ;
  assign ch3_rxpcsresetmask[1] = \<const0> ;
  assign ch3_rxpcsresetmask[0] = \<const0> ;
  assign ch3_rxpd[1] = \<const0> ;
  assign ch3_rxpd[0] = \<const0> ;
  assign ch3_rxpllgtrst = \<const0> ;
  assign ch3_rxpmareset = \<const0> ;
  assign ch3_rxpmaresetmask[6] = \<const0> ;
  assign ch3_rxpmaresetmask[5] = \<const0> ;
  assign ch3_rxpmaresetmask[4] = \<const0> ;
  assign ch3_rxpmaresetmask[3] = \<const0> ;
  assign ch3_rxpmaresetmask[2] = \<const0> ;
  assign ch3_rxpmaresetmask[1] = \<const0> ;
  assign ch3_rxpmaresetmask[0] = \<const0> ;
  assign ch3_rxpolarity = \<const0> ;
  assign ch3_rxprbscntrst = \<const0> ;
  assign ch3_rxprbssel[3] = \<const0> ;
  assign ch3_rxprbssel[2] = \<const0> ;
  assign ch3_rxprbssel[1] = \<const0> ;
  assign ch3_rxprbssel[0] = \<const0> ;
  assign ch3_rxprogdivreset = \<const0> ;
  assign ch3_tx8b10ben = \<const0> ;
  assign ch3_txctrl0[15] = \<const0> ;
  assign ch3_txctrl0[14] = \<const0> ;
  assign ch3_txctrl0[13] = \<const0> ;
  assign ch3_txctrl0[12] = \<const0> ;
  assign ch3_txctrl0[11] = \<const0> ;
  assign ch3_txctrl0[10] = \<const0> ;
  assign ch3_txctrl0[9] = \<const0> ;
  assign ch3_txctrl0[8] = \<const0> ;
  assign ch3_txctrl0[7] = \<const0> ;
  assign ch3_txctrl0[6] = \<const0> ;
  assign ch3_txctrl0[5] = \<const0> ;
  assign ch3_txctrl0[4] = \<const0> ;
  assign ch3_txctrl0[3] = \<const0> ;
  assign ch3_txctrl0[2] = \<const0> ;
  assign ch3_txctrl0[1] = \<const0> ;
  assign ch3_txctrl0[0] = \<const0> ;
  assign ch3_txctrl1[15] = \<const0> ;
  assign ch3_txctrl1[14] = \<const0> ;
  assign ch3_txctrl1[13] = \<const0> ;
  assign ch3_txctrl1[12] = \<const0> ;
  assign ch3_txctrl1[11] = \<const0> ;
  assign ch3_txctrl1[10] = \<const0> ;
  assign ch3_txctrl1[9] = \<const0> ;
  assign ch3_txctrl1[8] = \<const0> ;
  assign ch3_txctrl1[7] = \<const0> ;
  assign ch3_txctrl1[6] = \<const0> ;
  assign ch3_txctrl1[5] = \<const0> ;
  assign ch3_txctrl1[4] = \<const0> ;
  assign ch3_txctrl1[3] = \<const0> ;
  assign ch3_txctrl1[2] = \<const0> ;
  assign ch3_txctrl1[1] = \<const0> ;
  assign ch3_txctrl1[0] = \<const0> ;
  assign ch3_txctrl2[7] = \<const0> ;
  assign ch3_txctrl2[6] = \<const0> ;
  assign ch3_txctrl2[5] = \<const0> ;
  assign ch3_txctrl2[4] = \<const0> ;
  assign ch3_txctrl2[3] = \<const0> ;
  assign ch3_txctrl2[2] = \<const0> ;
  assign ch3_txctrl2[1] = \<const0> ;
  assign ch3_txctrl2[0] = \<const0> ;
  assign ch3_txdata[31] = \<const0> ;
  assign ch3_txdata[30] = \<const0> ;
  assign ch3_txdata[29] = \<const0> ;
  assign ch3_txdata[28] = \<const0> ;
  assign ch3_txdata[27] = \<const0> ;
  assign ch3_txdata[26] = \<const0> ;
  assign ch3_txdata[25] = \<const0> ;
  assign ch3_txdata[24] = \<const0> ;
  assign ch3_txdata[23] = \<const0> ;
  assign ch3_txdata[22] = \<const0> ;
  assign ch3_txdata[21] = \<const0> ;
  assign ch3_txdata[20] = \<const0> ;
  assign ch3_txdata[19] = \<const0> ;
  assign ch3_txdata[18] = \<const0> ;
  assign ch3_txdata[17] = \<const0> ;
  assign ch3_txdata[16] = \<const0> ;
  assign ch3_txdata[15] = \<const0> ;
  assign ch3_txdata[14] = \<const0> ;
  assign ch3_txdata[13] = \<const0> ;
  assign ch3_txdata[12] = \<const0> ;
  assign ch3_txdata[11] = \<const0> ;
  assign ch3_txdata[10] = \<const0> ;
  assign ch3_txdata[9] = \<const0> ;
  assign ch3_txdata[8] = \<const0> ;
  assign ch3_txdata[7] = \<const0> ;
  assign ch3_txdata[6] = \<const0> ;
  assign ch3_txdata[5] = \<const0> ;
  assign ch3_txdata[4] = \<const0> ;
  assign ch3_txdata[3] = \<const0> ;
  assign ch3_txdata[2] = \<const0> ;
  assign ch3_txdata[1] = \<const0> ;
  assign ch3_txdata[0] = \<const0> ;
  assign ch3_txdiffctrl[4] = \<const0> ;
  assign ch3_txdiffctrl[3] = \<const0> ;
  assign ch3_txdiffctrl[2] = \<const0> ;
  assign ch3_txdiffctrl[1] = \<const0> ;
  assign ch3_txdiffctrl[0] = \<const0> ;
  assign ch3_txinhibit = \<const0> ;
  assign ch3_txmstdatapathreset = \<const0> ;
  assign ch3_txmstreset = \<const0> ;
  assign ch3_txpcsreset = \<const0> ;
  assign ch3_txpcsresetmask = \<const0> ;
  assign ch3_txpd[1] = \<const0> ;
  assign ch3_txpd[0] = \<const0> ;
  assign ch3_txpmareset = \<const0> ;
  assign ch3_txpmaresetmask[2] = \<const0> ;
  assign ch3_txpmaresetmask[1] = \<const0> ;
  assign ch3_txpmaresetmask[0] = \<const0> ;
  assign ch3_txpolarity = \<const0> ;
  assign ch3_txpostcursor[4] = \<const0> ;
  assign ch3_txpostcursor[3] = \<const0> ;
  assign ch3_txpostcursor[2] = \<const0> ;
  assign ch3_txpostcursor[1] = \<const0> ;
  assign ch3_txpostcursor[0] = \<const0> ;
  assign ch3_txprbsforceerr = \<const0> ;
  assign ch3_txprbssel[3] = \<const0> ;
  assign ch3_txprbssel[2] = \<const0> ;
  assign ch3_txprbssel[1] = \<const0> ;
  assign ch3_txprbssel[0] = \<const0> ;
  assign ch3_txprecursor[4] = \<const0> ;
  assign ch3_txprecursor[3] = \<const0> ;
  assign ch3_txprecursor[2] = \<const0> ;
  assign ch3_txprecursor[1] = \<const0> ;
  assign ch3_txprecursor[0] = \<const0> ;
  assign ch3_txprogdivreset = \<const0> ;
  assign ch3_txrate[2] = \<const0> ;
  assign ch3_txrate[1] = \<const0> ;
  assign ch3_txrate[0] = \<const0> ;
  assign ch3_txuserrdy = \<const0> ;
  assign control_sb_rx_tready = \<const0> ;
  assign hsclk0_lcpllpd = \<const0> ;
  assign hsclk0_rpllpd = \<const0> ;
  assign hsclk1_lcpllpd = \<const0> ;
  assign hsclk1_rpllpd = \<const0> ;
  assign rx_axi4s_ch0_tdata[31:0] = ch0_rxdata;
  assign rx_axi4s_ch0_tuser[11:8] = ch0_rxctrl3[3:0];
  assign rx_axi4s_ch0_tuser[7:4] = ch0_rxctrl1[3:0];
  assign rx_axi4s_ch0_tuser[3:0] = ch0_rxctrl0[3:0];
  assign rx_axi4s_ch0_tvalid = \<const0> ;
  assign rx_axi4s_ch1_tdata[31:0] = ch1_rxdata;
  assign rx_axi4s_ch1_tuser[11:8] = ch1_rxctrl3[3:0];
  assign rx_axi4s_ch1_tuser[7:4] = ch1_rxctrl1[3:0];
  assign rx_axi4s_ch1_tuser[3:0] = ch1_rxctrl0[3:0];
  assign rx_axi4s_ch1_tvalid = \<const0> ;
  assign rx_axi4s_ch2_tdata[31:0] = ch2_rxdata;
  assign rx_axi4s_ch2_tuser[11:8] = ch2_rxctrl3[3:0];
  assign rx_axi4s_ch2_tuser[7:4] = ch2_rxctrl1[3:0];
  assign rx_axi4s_ch2_tuser[3:0] = ch2_rxctrl0[3:0];
  assign rx_axi4s_ch2_tvalid = \<const0> ;
  assign rx_axi4s_ch3_tdata[31:0] = ch3_rxdata;
  assign rx_axi4s_ch3_tuser[11:8] = ch3_rxctrl3[3:0];
  assign rx_axi4s_ch3_tuser[7:4] = ch3_rxctrl1[3:0];
  assign rx_axi4s_ch3_tuser[3:0] = ch3_rxctrl0[3:0];
  assign rx_axi4s_ch3_tvalid = \<const0> ;
  assign rx_pll0_reset = dp_gt_ctrl[3];
  assign rx_pll1_reset = dp_gt_ctrl[3];
  assign s00_axi_arready = \<const0> ;
  assign s00_axi_awready = \<const0> ;
  assign s00_axi_bresp[1] = \<const0> ;
  assign s00_axi_bresp[0] = \<const0> ;
  assign s00_axi_bvalid = \<const0> ;
  assign s00_axi_rdata[31] = \<const0> ;
  assign s00_axi_rdata[30] = \<const0> ;
  assign s00_axi_rdata[29] = \<const0> ;
  assign s00_axi_rdata[28] = \<const0> ;
  assign s00_axi_rdata[27] = \<const0> ;
  assign s00_axi_rdata[26] = \<const0> ;
  assign s00_axi_rdata[25] = \<const0> ;
  assign s00_axi_rdata[24] = \<const0> ;
  assign s00_axi_rdata[23] = \<const0> ;
  assign s00_axi_rdata[22] = \<const0> ;
  assign s00_axi_rdata[21] = \<const0> ;
  assign s00_axi_rdata[20] = \<const0> ;
  assign s00_axi_rdata[19] = \<const0> ;
  assign s00_axi_rdata[18] = \<const0> ;
  assign s00_axi_rdata[17] = \<const0> ;
  assign s00_axi_rdata[16] = \<const0> ;
  assign s00_axi_rdata[15] = \<const0> ;
  assign s00_axi_rdata[14] = \<const0> ;
  assign s00_axi_rdata[13] = \<const0> ;
  assign s00_axi_rdata[12] = \<const0> ;
  assign s00_axi_rdata[11] = \<const0> ;
  assign s00_axi_rdata[10] = \<const0> ;
  assign s00_axi_rdata[9] = \<const0> ;
  assign s00_axi_rdata[8] = \<const0> ;
  assign s00_axi_rdata[7] = \<const0> ;
  assign s00_axi_rdata[6] = \<const0> ;
  assign s00_axi_rdata[5] = \<const0> ;
  assign s00_axi_rdata[4] = \<const0> ;
  assign s00_axi_rdata[3] = \<const0> ;
  assign s00_axi_rdata[2] = \<const0> ;
  assign s00_axi_rdata[1] = \<const0> ;
  assign s00_axi_rdata[0] = \<const0> ;
  assign s00_axi_rresp[1] = \<const0> ;
  assign s00_axi_rresp[0] = \<const0> ;
  assign s00_axi_rvalid = \<const0> ;
  assign s00_axi_wready = \<const0> ;
  assign sdi_ctrl_sb_rx_in_tready = \<const0> ;
  assign sdi_ctrl_sb_rx_out[31] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[30] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[29] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[28] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[27] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[26] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[25] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[24] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[23] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[22] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[21] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[20] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[19] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[18] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[17] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[16] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[15] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[14] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[13] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[12] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[11] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[10] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[9] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[8] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[7] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[6] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[5] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[4] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[3] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[2] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[1] = \<const0> ;
  assign sdi_ctrl_sb_rx_out[0] = \<const0> ;
  assign sdi_ctrl_sb_rx_out_tvalid = \<const0> ;
  assign sdi_ctrl_sb_tx_in_tready = \<const0> ;
  assign sdi_ctrl_sb_tx_out[31] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[30] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[29] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[28] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[27] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[26] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[25] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[24] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[23] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[22] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[21] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[20] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[19] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[18] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[17] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[16] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[15] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[14] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[13] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[12] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[11] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[10] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[9] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[8] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[7] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[6] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[5] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[4] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[3] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[2] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[1] = \<const0> ;
  assign sdi_ctrl_sb_tx_out[0] = \<const0> ;
  assign sdi_ctrl_sb_tx_out_tvalid = \<const0> ;
  assign sdi_gt_sts[15] = \<const0> ;
  assign sdi_gt_sts[14] = \<const0> ;
  assign sdi_gt_sts[13] = \<const0> ;
  assign sdi_gt_sts[12] = \<const0> ;
  assign sdi_gt_sts[11] = \<const0> ;
  assign sdi_gt_sts[10] = \<const0> ;
  assign sdi_gt_sts[9] = \<const0> ;
  assign sdi_gt_sts[8] = \<const0> ;
  assign sdi_gt_sts[7] = \<const0> ;
  assign sdi_gt_sts[6] = \<const0> ;
  assign sdi_gt_sts[5] = \<const0> ;
  assign sdi_gt_sts[4] = \<const0> ;
  assign sdi_gt_sts[3] = \<const0> ;
  assign sdi_gt_sts[2] = \<const0> ;
  assign sdi_gt_sts[1] = \<const0> ;
  assign sdi_gt_sts[0] = \<const0> ;
  assign status_sb_rx_tdata[15] = \<const0> ;
  assign status_sb_rx_tdata[14] = \<const0> ;
  assign status_sb_rx_tdata[13] = \<const0> ;
  assign status_sb_rx_tdata[12] = \<const0> ;
  assign status_sb_rx_tdata[11:8] = \^status_sb_rx_tdata [11:8];
  assign status_sb_rx_tdata[7] = \^status_sb_rx_tdata [10];
  assign status_sb_rx_tdata[6:2] = \^status_sb_rx_tdata [6:2];
  assign status_sb_rx_tdata[1] = \^status_sb_rx_tdata [4];
  assign status_sb_rx_tdata[0] = \^status_sb_rx_tdata [0];
  assign status_sb_rx_tvalid = \<const0> ;
  assign status_sb_tx_tdata[7] = \<const0> ;
  assign status_sb_tx_tdata[6] = \<const0> ;
  assign status_sb_tx_tdata[5] = \<const0> ;
  assign status_sb_tx_tdata[4] = \<const0> ;
  assign status_sb_tx_tdata[3] = \<const0> ;
  assign status_sb_tx_tdata[2] = \<const0> ;
  assign status_sb_tx_tdata[1] = \<const0> ;
  assign status_sb_tx_tdata[0] = \<const0> ;
  assign status_sb_tx_tvalid = \<const0> ;
  assign tx_axi4s_ch0_tready = \<const0> ;
  assign tx_axi4s_ch1_tready = \<const0> ;
  assign tx_axi4s_ch2_tready = \<const0> ;
  assign tx_axi4s_ch3_tready = \<const0> ;
  assign tx_bufg_gt_clr = \<const0> ;
  assign tx_pll0_reset = \<const0> ;
  assign tx_pll1_reset = \<const0> ;
  GND GND
       (.G(\<const0> ));
  (* CHECK_LICENSE_TYPE = "dpss_vck190_pt_dprx_gt_ip0_0_gtreset,dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst,{}" *) 
  (* DowngradeIPIdentifiedWarnings = "yes" *) 
  (* X_CORE_INFO = "dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst,Vivado 2023.2" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_gtreset dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst
       (.gtpowergood_in(gt_powergood),
        .gtrxreset_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtrxreset_out_UNCONNECTED),
        .gttxreset_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gttxreset_out_UNCONNECTED),
        .gtwiz_reset_all_in(gtwiz_reset_all_in0),
        .gtwiz_reset_clk_freerun_in(gt_ctrl_aclk),
        .gtwiz_reset_rx_cdr_stable_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_rx_cdr_stable_out_UNCONNECTED),
        .gtwiz_reset_rx_datapath_in(1'b0),
        .gtwiz_reset_rx_done_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_rx_done_out_UNCONNECTED),
        .gtwiz_reset_rx_pll_and_datapath_in(1'b0),
        .gtwiz_reset_tx_datapath_in(1'b0),
        .gtwiz_reset_tx_done_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_gtwiz_reset_tx_done_out_UNCONNECTED),
        .gtwiz_reset_tx_pll_and_datapath_in(1'b0),
        .gtwiz_reset_userclk_rx_active_in(gtwiz_userclk_rx_active_sync),
        .gtwiz_reset_userclk_tx_active_in(1'b0),
        .ilo_reset_done(1'b0),
        .iloreset_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_iloreset_out_UNCONNECTED),
        .mst_rx_dp_reset(ch3_rxmstdatapathreset),
        .mst_rx_reset(ch3_rxmstreset),
        .mst_rx_resetdone(ch_rxmstresetdone4),
        .mst_tx_dp_reset(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_mst_tx_dp_reset_UNCONNECTED),
        .mst_tx_reset(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_mst_tx_reset_UNCONNECTED),
        .mst_tx_resetdone(ch_txmstresetdone4),
        .pcie_enable(1'b0),
        .pcie_rstb_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pcie_rstb_out_UNCONNECTED),
        .plllock_rx_in(1'b0),
        .plllock_tx_in(1'b0),
        .pllreset_rx_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pllreset_rx_out_UNCONNECTED),
        .pllreset_tx_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_pllreset_tx_out_UNCONNECTED),
        .rx_clr_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rx_clr_out_UNCONNECTED),
        .rx_clrb_leaf_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rx_clrb_leaf_out_UNCONNECTED),
        .rx_enabled_tie_in(1'b1),
        .rxcdrlock_in(1'b0),
        .rxprogdivreset_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_rxprogdivreset_out_UNCONNECTED),
        .rxresetdone_in(1'b0),
        .rxuserrdy_out(ch3_rxuserrdy),
        .rxusrclk2_in(1'b0),
        .shared_pll_tie_in(1'b0),
        .tx_clr_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_tx_clr_out_UNCONNECTED),
        .tx_clrb_leaf_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_tx_clrb_leaf_out_UNCONNECTED),
        .tx_enabled_tie_in(1'b0),
        .txprogdivreset_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_txprogdivreset_out_UNCONNECTED),
        .txresetdone_in(1'b0),
        .txuserrdy_out(NLW_dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_txuserrdy_out_UNCONNECTED),
        .txusrclk2_in(1'b0));
  LUT6 #(
    .INIT(64'hFFFEFEFEFFFFFFFF)) 
    dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_i_1
       (.I0(dp_gt_ctrl[31]),
        .I1(dp_gt_ctrl[0]),
        .I2(dp_gt_ctrl[30]),
        .I3(control_sb_rx_tvalid),
        .I4(control_sb_rx_tdata[1]),
        .I5(gt_ctrl_aresetn),
        .O(gtwiz_reset_all_in0));
  LUT4 #(
    .INIT(16'h8000)) 
    dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_i_2
       (.I0(ch3_txmstresetdone),
        .I1(ch0_txmstresetdone),
        .I2(ch1_txmstresetdone),
        .I3(ch2_txmstresetdone),
        .O(ch_txmstresetdone4));
  LUT4 #(
    .INIT(16'h8000)) 
    dpss_vck190_pt_dprx_gt_ip0_0_gtreset_inst_i_3
       (.I0(ch3_rxmstresetdone),
        .I1(ch0_rxmstresetdone),
        .I2(ch1_rxmstresetdone),
        .I3(ch2_rxmstresetdone),
        .O(ch_rxmstresetdone4));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    gtwiz_userclk_rx_active_meta_reg
       (.C(gt_ctrl_aclk),
        .CE(1'b1),
        .CLR(rx_bufg_gt_clr),
        .D(1'b1),
        .Q(gtwiz_userclk_rx_active_meta));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    gtwiz_userclk_rx_active_sync_reg
       (.C(gt_ctrl_aclk),
        .CE(1'b1),
        .CLR(rx_bufg_gt_clr),
        .D(gtwiz_userclk_rx_active_meta),
        .Q(gtwiz_userclk_rx_active_sync));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    gtwiz_userclk_tx_active_meta_i_1
       (.I0(tx_pll0_locked),
        .I1(ch0_txpmaresetdone),
        .I2(ch1_txpmaresetdone),
        .I3(tx_pll1_locked),
        .I4(ch3_txpmaresetdone),
        .I5(ch2_txpmaresetdone),
        .O(tx_bufg_gt_clr_int2));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    gtwiz_userclk_tx_active_meta_reg
       (.C(gt_ctrl_aclk),
        .CE(1'b1),
        .CLR(tx_bufg_gt_clr_int2),
        .D(1'b1),
        .Q(gtwiz_userclk_tx_active_meta));
  (* ASYNC_REG *) 
  (* KEEP = "yes" *) 
  FDCE #(
    .INIT(1'b0)) 
    gtwiz_userclk_tx_active_sync_reg
       (.C(gt_ctrl_aclk),
        .CE(1'b1),
        .CLR(tx_bufg_gt_clr_int2),
        .D(gtwiz_userclk_tx_active_meta),
        .Q(gtwiz_userclk_tx_active_sync));
  LUT6 #(
    .INIT(64'h7FFFFFFFFFFFFFFF)) 
    rx_bufg_gt_clr_INST_0
       (.I0(rx_pll0_locked),
        .I1(ch0_rxpmaresetdone),
        .I2(ch1_rxpmaresetdone),
        .I3(rx_pll1_locked),
        .I4(ch3_rxpmaresetdone),
        .I5(ch2_rxpmaresetdone),
        .O(rx_bufg_gt_clr));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "3" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__5 xpm_array_rxrate_inst
       (.dest_clk(gt_rxusrclk),
        .dest_out(ch3_rxrate),
        .src_clk(1'b0),
        .src_in({1'b0,dp_gt_ctrl[2:1]}));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "3" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__6 xpm_single_ch0_rxbufstatus_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_rxbufstatus_inst_dest_out_UNCONNECTED[2:0]),
        .src_clk(1'b0),
        .src_in(ch0_rxbufstatus));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__59 xpm_single_ch0_rxbyteisaligned_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [2]),
        .src_clk(1'b0),
        .src_in(ch0_rxbyteisaligned));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__61 xpm_single_ch0_rxcdrlock_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_rxcdrlock_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_rxcdrlock));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__78 xpm_single_ch0_rxmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_rxmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_rxmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__5 xpm_single_ch0_rxpmaresetdone_inst
       (.dest_clk(gt_rxusrclk),
        .dest_out(NLW_xpm_single_ch0_rxpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(gt_ctrl_aclk),
        .src_in(ch0_rxpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__62 xpm_single_ch0_rxprbserr_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_rxprbserr_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_rxprbserr));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__60 xpm_single_ch0_rxresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [0]),
        .src_clk(1'b0),
        .src_in(ch0_rxresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__54 xpm_single_ch0_txmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_txmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_txmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__55 xpm_single_ch0_txmstresetdone_tx_usr
       (.dest_clk(gt_txusrclk),
        .dest_out(NLW_xpm_single_ch0_txmstresetdone_tx_usr_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_txmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__4 xpm_single_ch0_txpmaresetdone_inst
       (.dest_clk(gt_txusrclk),
        .dest_out(NLW_xpm_single_ch0_txpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(gt_ctrl_aclk),
        .src_in(ch0_txpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__47 xpm_single_ch0_txresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch0_txresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch0_txresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "3" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__7 xpm_single_ch1_rxbufstatus_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_rxbufstatus_inst_dest_out_UNCONNECTED[2:0]),
        .src_clk(1'b0),
        .src_in(ch1_rxbufstatus));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__63 xpm_single_ch1_rxbyteisaligned_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [5]),
        .src_clk(1'b0),
        .src_in(ch1_rxbyteisaligned));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__66 xpm_single_ch1_rxcdrlock_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_rxcdrlock_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_rxcdrlock));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__79 xpm_single_ch1_rxmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_rxmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_rxmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__65 xpm_single_ch1_rxpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_rxpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_rxpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__67 xpm_single_ch1_rxprbserr_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_rxprbserr_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_rxprbserr));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__64 xpm_single_ch1_rxresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [3]),
        .src_clk(1'b0),
        .src_in(ch1_rxresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__56 xpm_single_ch1_txmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_txmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_txmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__51 xpm_single_ch1_txpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_txpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_txpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__48 xpm_single_ch1_txresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch1_txresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch1_txresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "3" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__8 xpm_single_ch2_rxbufstatus_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_rxbufstatus_inst_dest_out_UNCONNECTED[2:0]),
        .src_clk(1'b0),
        .src_in(ch2_rxbufstatus));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__68 xpm_single_ch2_rxbyteisaligned_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [8]),
        .src_clk(1'b0),
        .src_in(ch2_rxbyteisaligned));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__71 xpm_single_ch2_rxcdrlock_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_rxcdrlock_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_rxcdrlock));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__80 xpm_single_ch2_rxmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_rxmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_rxmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__70 xpm_single_ch2_rxpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_rxpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_rxpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__72 xpm_single_ch2_rxprbserr_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_rxprbserr_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_rxprbserr));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__69 xpm_single_ch2_rxresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [6]),
        .src_clk(1'b0),
        .src_in(ch2_rxresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__57 xpm_single_ch2_txmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_txmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_txmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__52 xpm_single_ch2_txpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_txpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_txpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__49 xpm_single_ch2_txresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch2_txresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch2_txresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* WIDTH = "3" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single xpm_single_ch3_rxbufstatus_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_rxbufstatus_inst_dest_out_UNCONNECTED[2:0]),
        .src_clk(1'b0),
        .src_in(ch3_rxbufstatus));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__73 xpm_single_ch3_rxbyteisaligned_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [11]),
        .src_clk(1'b0),
        .src_in(ch3_rxbyteisaligned));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__76 xpm_single_ch3_rxcdrlock_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_rxcdrlock_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_rxcdrlock));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single xpm_single_ch3_rxmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_rxmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_rxmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__75 xpm_single_ch3_rxpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_rxpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_rxpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__77 xpm_single_ch3_rxprbserr_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_rxprbserr_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_rxprbserr));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__74 xpm_single_ch3_rxresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [9]),
        .src_clk(1'b0),
        .src_in(ch3_rxresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__58 xpm_single_ch3_txmstresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_txmstresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_txmstresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__53 xpm_single_ch3_txpmaresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_txpmaresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_txpmaresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__50 xpm_single_ch3_txresetdone_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_ch3_txresetdone_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(ch3_txresetdone));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__42 xpm_single_gt_powergood_rx_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_gt_powergood_rx_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(gt_powergood));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__41 xpm_single_gt_powergood_tx_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_gt_powergood_tx_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(gt_powergood));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__45 xpm_single_hsclk0_lcpll_locked_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [4]),
        .src_clk(1'b0),
        .src_in(src_in00_out));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h8)) 
    xpm_single_hsclk0_lcpll_locked_inst_i_1
       (.I0(rx_pll0_locked),
        .I1(rx_mmcm_locked),
        .O(src_in00_out));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__43 xpm_single_hsclk0_rpll_locked_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_hsclk0_rpll_locked_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(src_in02_out));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h8)) 
    xpm_single_hsclk0_rpll_locked_inst_i_1
       (.I0(tx_pll0_locked),
        .I1(tx_mmcm_locked),
        .O(src_in02_out));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__46 xpm_single_hsclk1_lcpll_locked_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(\^status_sb_rx_tdata [10]),
        .src_clk(1'b0),
        .src_in(src_in0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT2 #(
    .INIT(4'h8)) 
    xpm_single_hsclk1_lcpll_locked_inst_i_1
       (.I0(rx_pll1_locked),
        .I1(rx_mmcm_locked),
        .O(src_in0));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "0" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__44 xpm_single_hsclk1_rpll_locked_inst
       (.dest_clk(gt_ctrl_aclk),
        .dest_out(NLW_xpm_single_hsclk1_rpll_locked_inst_dest_out_UNCONNECTED),
        .src_clk(1'b0),
        .src_in(src_in01_out));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT2 #(
    .INIT(4'h8)) 
    xpm_single_hsclk1_rpll_locked_inst_i_1
       (.I0(tx_pll1_locked),
        .I1(tx_mmcm_locked),
        .O(src_in01_out));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__6 xpm_single_rxbufgt_clr_inst
       (.dest_clk(gt_rxusrclk),
        .dest_out(NLW_xpm_single_rxbufgt_clr_inst_dest_out_UNCONNECTED),
        .src_clk(gt_ctrl_aclk),
        .src_in(1'b0));
  (* DEST_SYNC_FF = "4" *) 
  (* INIT_SYNC_FF = "0" *) 
  (* SIM_ASSERT_CHK = "0" *) 
  (* SRC_INPUT_REG = "1" *) 
  (* VERSION = "0" *) 
  (* XPM_CDC = "SINGLE" *) 
  (* XPM_MODULE = "TRUE" *) 
  dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0 xpm_single_txbufgt_clr_inst
       (.dest_clk(gt_rxusrclk),
        .dest_out(NLW_xpm_single_txbufgt_clr_inst_dest_out_UNCONNECTED),
        .src_clk(gt_ctrl_aclk),
        .src_in(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "3" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ARRAY_SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [2:0]src_in;
  input dest_clk;
  output [2:0]dest_out;

  wire [2:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[3] ;

  assign async_path_bit = src_in[2:0];
  assign dest_out[2:0] = \syncstages_ff[3] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [0]),
        .Q(\syncstages_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [1]),
        .Q(\syncstages_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [2]),
        .Q(\syncstages_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [0]),
        .Q(\syncstages_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [1]),
        .Q(\syncstages_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [2]),
        .Q(\syncstages_ff[3] [2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "3" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ARRAY_SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__5
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [2:0]src_in;
  input dest_clk;
  output [2:0]dest_out;

  wire [2:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[3] ;

  assign async_path_bit[1:0] = src_in[1:0];
  assign dest_out[2:0] = \syncstages_ff[3] ;
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b0),
        .O(async_path_bit[2]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [0]),
        .Q(\syncstages_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [1]),
        .Q(\syncstages_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [2]),
        .Q(\syncstages_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [0]),
        .Q(\syncstages_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [1]),
        .Q(\syncstages_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [2]),
        .Q(\syncstages_ff[3] [2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "3" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ARRAY_SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__6
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [2:0]src_in;
  input dest_clk;
  output [2:0]dest_out;

  wire [2:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[3] ;

  assign async_path_bit = src_in[2:0];
  assign dest_out[2:0] = \syncstages_ff[3] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [0]),
        .Q(\syncstages_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [1]),
        .Q(\syncstages_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [2]),
        .Q(\syncstages_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [0]),
        .Q(\syncstages_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [1]),
        .Q(\syncstages_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [2]),
        .Q(\syncstages_ff[3] [2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "3" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ARRAY_SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__7
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [2:0]src_in;
  input dest_clk;
  output [2:0]dest_out;

  wire [2:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[3] ;

  assign async_path_bit = src_in[2:0];
  assign dest_out[2:0] = \syncstages_ff[3] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [0]),
        .Q(\syncstages_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [1]),
        .Q(\syncstages_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [2]),
        .Q(\syncstages_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [0]),
        .Q(\syncstages_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [1]),
        .Q(\syncstages_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [2]),
        .Q(\syncstages_ff[3] [2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_array_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* WIDTH = "3" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ARRAY_SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_array_single__8
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input [2:0]src_in;
  input dest_clk;
  output [2:0]dest_out;

  wire [2:0]async_path_bit;
  wire dest_clk;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[0] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[1] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[2] ;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ARRAY_SINGLE" *) wire [2:0]\syncstages_ff[3] ;

  assign async_path_bit = src_in[2:0];
  assign dest_out[2:0] = \syncstages_ff[3] ;
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[0]),
        .Q(\syncstages_ff[0] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[1]),
        .Q(\syncstages_ff[0] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[0][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(async_path_bit[2]),
        .Q(\syncstages_ff[0] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [0]),
        .Q(\syncstages_ff[1] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [1]),
        .Q(\syncstages_ff[1] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[1][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[0] [2]),
        .Q(\syncstages_ff[1] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [0]),
        .Q(\syncstages_ff[2] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [1]),
        .Q(\syncstages_ff[2] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[2][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[1] [2]),
        .Q(\syncstages_ff[2] [2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [0]),
        .Q(\syncstages_ff[3] [0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [1]),
        .Q(\syncstages_ff[3] [1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ARRAY_SINGLE" *) 
  FDRE \syncstages_ff_reg[3][2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(\syncstages_ff[2] [2]),
        .Q(\syncstages_ff[3] [2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(arststages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .Q(arststages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__1
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__2
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__3
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;
  wire src_arst;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .PRE(src_arst),
        .Q(arststages_ff[0]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .PRE(src_arst),
        .Q(arststages_ff[1]));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDPE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .PRE(src_arst),
        .Q(arststages_ff[2]));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT_SYNC_FF = "0" *) 
(* INV_DEF_VAL = "1'b1" *) (* ORIG_REF_NAME = "xpm_cdc_async_rst" *) (* RST_ACTIVE_HIGH = "1" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "ASYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_async_rst__4
   (src_arst,
    dest_clk,
    dest_arst);
  input src_arst;
  input dest_clk;
  output dest_arst;

  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "ASYNC_RST" *) wire [2:0]arststages_ff;
  wire dest_clk;

  assign dest_arst = arststages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(1'b0),
        .Q(arststages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[0]),
        .Q(arststages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "ASYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \arststages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(arststages_ff[1]),
        .Q(arststages_ff[2]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__41
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__42
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__43
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__44
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__45
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__46
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__47
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__48
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__49
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__50
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__51
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__52
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__53
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__54
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__55
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__56
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__57
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__58
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__59
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__60
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__61
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__62
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__63
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__64
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__65
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__66
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__67
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__68
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__69
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__70
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__71
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__72
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__73
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__74
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__75
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__76
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__77
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__78
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__79
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "0" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__80
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire [0:0]p_0_in;
  wire src_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(p_0_in),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__4
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire [0:0]p_0_in;
  wire src_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(p_0_in),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__5
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire [0:0]p_0_in;
  wire src_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(p_0_in),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEST_SYNC_FF = "4" *) (* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_single" *) 
(* SIM_ASSERT_CHK = "0" *) (* SRC_INPUT_REG = "1" *) (* VERSION = "0" *) 
(* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) (* xpm_cdc = "SINGLE" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_single__parameterized0__6
   (src_clk,
    src_in,
    dest_clk,
    dest_out);
  input src_clk;
  input src_in;
  input dest_clk;
  output dest_out;

  wire dest_clk;
  wire [0:0]p_0_in;
  wire src_clk;
  wire src_in;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SINGLE" *) wire [3:0]syncstages_ff;

  assign dest_out = syncstages_ff[3];
  FDRE src_ff_reg
       (.C(src_clk),
        .CE(1'b1),
        .D(src_in),
        .Q(p_0_in),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(p_0_in),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SINGLE" *) 
  FDRE \syncstages_ff_reg[3] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[2]),
        .Q(syncstages_ff[3]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__5
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__6
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__7
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule

(* DEF_VAL = "1'b0" *) (* DEST_SYNC_FF = "3" *) (* INIT = "0" *) 
(* INIT_SYNC_FF = "0" *) (* ORIG_REF_NAME = "xpm_cdc_sync_rst" *) (* SIM_ASSERT_CHK = "0" *) 
(* VERSION = "0" *) (* XPM_MODULE = "TRUE" *) (* keep_hierarchy = "true" *) 
(* xpm_cdc = "SYNC_RST" *) 
module dpss_vck190_pt_dprx_gt_ip0_0_xpm_cdc_sync_rst__8
   (src_rst,
    dest_clk,
    dest_rst);
  input src_rst;
  input dest_clk;
  output dest_rst;

  wire dest_clk;
  wire src_rst;
  (* RTL_KEEP = "true" *) (* async_reg = "true" *) (* xpm_cdc = "SYNC_RST" *) wire [2:0]syncstages_ff;

  assign dest_rst = syncstages_ff[2];
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[0] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(src_rst),
        .Q(syncstages_ff[0]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[1] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[0]),
        .Q(syncstages_ff[1]),
        .R(1'b0));
  (* ASYNC_REG *) 
  (* KEEP = "true" *) 
  (* XPM_CDC = "SYNC_RST" *) 
  FDRE #(
    .INIT(1'b0)) 
    \syncstages_ff_reg[2] 
       (.C(dest_clk),
        .CE(1'b1),
        .D(syncstages_ff[1]),
        .Q(syncstages_ff[2]),
        .R(1'b0));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;
    parameter GRES_WIDTH = 10000;
    parameter GRES_START = 10000;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    wire GRESTORE;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;
    reg GRESTORE_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;
    assign (strong1, weak0) GRESTORE = GRESTORE_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

    initial begin 
	GRESTORE_int = 1'b0;
	#(GRES_START);
	GRESTORE_int = 1'b1;
	#(GRES_WIDTH);
	GRESTORE_int = 1'b0;
    end

endmodule
`endif
