// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="dpss_vck190_pt_v_frmbuf_rd_0_0_v_frmbuf_rd,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvc1902-vsva2197-2MP-e-S,HLS_INPUT_CLOCK=3.333000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.866000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=35,HLS_SYN_DSP=0,HLS_SYN_FF=6567,HLS_SYN_LUT=7228,HLS_VERSION=2023_2}" *)

module dpss_vck190_pt_v_frmbuf_rd_0_0_v_frmbuf_rd (
        ap_clk,
        ap_rst_n,
        m_axi_mm_video_AWVALID,
        m_axi_mm_video_AWREADY,
        m_axi_mm_video_AWADDR,
        m_axi_mm_video_AWID,
        m_axi_mm_video_AWLEN,
        m_axi_mm_video_AWSIZE,
        m_axi_mm_video_AWBURST,
        m_axi_mm_video_AWLOCK,
        m_axi_mm_video_AWCACHE,
        m_axi_mm_video_AWPROT,
        m_axi_mm_video_AWQOS,
        m_axi_mm_video_AWREGION,
        m_axi_mm_video_AWUSER,
        m_axi_mm_video_WVALID,
        m_axi_mm_video_WREADY,
        m_axi_mm_video_WDATA,
        m_axi_mm_video_WSTRB,
        m_axi_mm_video_WLAST,
        m_axi_mm_video_WID,
        m_axi_mm_video_WUSER,
        m_axi_mm_video_ARVALID,
        m_axi_mm_video_ARREADY,
        m_axi_mm_video_ARADDR,
        m_axi_mm_video_ARID,
        m_axi_mm_video_ARLEN,
        m_axi_mm_video_ARSIZE,
        m_axi_mm_video_ARBURST,
        m_axi_mm_video_ARLOCK,
        m_axi_mm_video_ARCACHE,
        m_axi_mm_video_ARPROT,
        m_axi_mm_video_ARQOS,
        m_axi_mm_video_ARREGION,
        m_axi_mm_video_ARUSER,
        m_axi_mm_video_RVALID,
        m_axi_mm_video_RREADY,
        m_axi_mm_video_RDATA,
        m_axi_mm_video_RLAST,
        m_axi_mm_video_RID,
        m_axi_mm_video_RUSER,
        m_axi_mm_video_RRESP,
        m_axi_mm_video_BVALID,
        m_axi_mm_video_BREADY,
        m_axi_mm_video_BRESP,
        m_axi_mm_video_BID,
        m_axi_mm_video_BUSER,
        m_axis_video_TDATA,
        m_axis_video_TVALID,
        m_axis_video_TREADY,
        m_axis_video_TKEEP,
        m_axis_video_TSTRB,
        m_axis_video_TUSER,
        m_axis_video_TLAST,
        m_axis_video_TID,
        m_axis_video_TDEST,
        s_axi_CTRL_AWVALID,
        s_axi_CTRL_AWREADY,
        s_axi_CTRL_AWADDR,
        s_axi_CTRL_WVALID,
        s_axi_CTRL_WREADY,
        s_axi_CTRL_WDATA,
        s_axi_CTRL_WSTRB,
        s_axi_CTRL_ARVALID,
        s_axi_CTRL_ARREADY,
        s_axi_CTRL_ARADDR,
        s_axi_CTRL_RVALID,
        s_axi_CTRL_RREADY,
        s_axi_CTRL_RDATA,
        s_axi_CTRL_RRESP,
        s_axi_CTRL_BVALID,
        s_axi_CTRL_BREADY,
        s_axi_CTRL_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_ID_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ADDR_WIDTH = 32;
parameter    C_M_AXI_MM_VIDEO_DATA_WIDTH = 256;
parameter    C_M_AXI_MM_VIDEO_AWUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_ARUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_WUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_RUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_BUSER_WIDTH = 1;
parameter    C_M_AXI_MM_VIDEO_USER_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_PROT_VALUE = 0;
parameter    C_M_AXI_MM_VIDEO_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_MM_VIDEO_WSTRB_WIDTH = (256 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_mm_video_AWVALID;
input   m_axi_mm_video_AWREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_AWADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_AWID;
output  [7:0] m_axi_mm_video_AWLEN;
output  [2:0] m_axi_mm_video_AWSIZE;
output  [1:0] m_axi_mm_video_AWBURST;
output  [1:0] m_axi_mm_video_AWLOCK;
output  [3:0] m_axi_mm_video_AWCACHE;
output  [2:0] m_axi_mm_video_AWPROT;
output  [3:0] m_axi_mm_video_AWQOS;
output  [3:0] m_axi_mm_video_AWREGION;
output  [C_M_AXI_MM_VIDEO_AWUSER_WIDTH - 1:0] m_axi_mm_video_AWUSER;
output   m_axi_mm_video_WVALID;
input   m_axi_mm_video_WREADY;
output  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_WDATA;
output  [C_M_AXI_MM_VIDEO_WSTRB_WIDTH - 1:0] m_axi_mm_video_WSTRB;
output   m_axi_mm_video_WLAST;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_WID;
output  [C_M_AXI_MM_VIDEO_WUSER_WIDTH - 1:0] m_axi_mm_video_WUSER;
output   m_axi_mm_video_ARVALID;
input   m_axi_mm_video_ARREADY;
output  [C_M_AXI_MM_VIDEO_ADDR_WIDTH - 1:0] m_axi_mm_video_ARADDR;
output  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_ARID;
output  [7:0] m_axi_mm_video_ARLEN;
output  [2:0] m_axi_mm_video_ARSIZE;
output  [1:0] m_axi_mm_video_ARBURST;
output  [1:0] m_axi_mm_video_ARLOCK;
output  [3:0] m_axi_mm_video_ARCACHE;
output  [2:0] m_axi_mm_video_ARPROT;
output  [3:0] m_axi_mm_video_ARQOS;
output  [3:0] m_axi_mm_video_ARREGION;
output  [C_M_AXI_MM_VIDEO_ARUSER_WIDTH - 1:0] m_axi_mm_video_ARUSER;
input   m_axi_mm_video_RVALID;
output   m_axi_mm_video_RREADY;
input  [C_M_AXI_MM_VIDEO_DATA_WIDTH - 1:0] m_axi_mm_video_RDATA;
input   m_axi_mm_video_RLAST;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_RID;
input  [C_M_AXI_MM_VIDEO_RUSER_WIDTH - 1:0] m_axi_mm_video_RUSER;
input  [1:0] m_axi_mm_video_RRESP;
input   m_axi_mm_video_BVALID;
output   m_axi_mm_video_BREADY;
input  [1:0] m_axi_mm_video_BRESP;
input  [C_M_AXI_MM_VIDEO_ID_WIDTH - 1:0] m_axi_mm_video_BID;
input  [C_M_AXI_MM_VIDEO_BUSER_WIDTH - 1:0] m_axi_mm_video_BUSER;
output  [119:0] m_axis_video_TDATA;
output   m_axis_video_TVALID;
input   m_axis_video_TREADY;
output  [14:0] m_axis_video_TKEEP;
output  [14:0] m_axis_video_TSTRB;
output  [0:0] m_axis_video_TUSER;
output  [0:0] m_axis_video_TLAST;
output  [0:0] m_axis_video_TID;
output  [0:0] m_axis_video_TDEST;
input   s_axi_CTRL_AWVALID;
output   s_axi_CTRL_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_AWADDR;
input   s_axi_CTRL_WVALID;
output   s_axi_CTRL_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_CTRL_WSTRB;
input   s_axi_CTRL_ARVALID;
output   s_axi_CTRL_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_CTRL_ARADDR;
output   s_axi_CTRL_RVALID;
input   s_axi_CTRL_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_CTRL_RDATA;
output  [1:0] s_axi_CTRL_RRESP;
output   s_axi_CTRL_BVALID;
input   s_axi_CTRL_BREADY;
output  [1:0] s_axi_CTRL_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [15:0] width;
wire   [15:0] height;
wire   [15:0] stride;
wire   [15:0] video_format;
wire   [31:0] frm_buffer;
wire   [31:0] frm_buffer2;
wire   [31:0] frm_buffer3;
wire   [5:0] BYTES_PER_PIXEL_address0;
reg    BYTES_PER_PIXEL_ce0;
wire   [2:0] BYTES_PER_PIXEL_q0;
wire   [5:0] MEMORY2LIVE_address0;
reg    MEMORY2LIVE_ce0;
wire   [1:0] MEMORY2LIVE_q0;
reg   [31:0] frm_buffer2_read_reg_352;
reg   [31:0] frm_buffer_read_reg_357;
reg   [15:0] stride_read_reg_362;
reg  signed [15:0] width_read_reg_367;
wire   [12:0] empty_fu_230_p1;
reg   [12:0] empty_reg_373;
wire   [12:0] empty_74_fu_234_p1;
reg   [12:0] empty_74_reg_378;
wire   [5:0] empty_75_fu_238_p1;
reg   [5:0] empty_75_reg_384;
wire   [15:0] mul_ln229_fu_267_p2;
reg   [15:0] mul_ln229_reg_403;
wire    ap_CS_fsm_state2;
wire   [30:0] mul_ln216_fu_291_p2;
reg   [30:0] mul_ln216_reg_408;
wire   [0:0] icmp_ln212_fu_297_p2;
reg   [0:0] icmp_ln212_reg_413;
wire   [0:0] icmp_ln212_1_fu_302_p2;
reg   [0:0] icmp_ln212_1_reg_418;
wire   [0:0] icmp_ln212_2_fu_307_p2;
reg   [0:0] icmp_ln212_2_reg_423;
wire   [0:0] icmp_ln212_3_fu_312_p2;
reg   [0:0] icmp_ln212_3_reg_428;
reg   [1:0] colorFormat_reg_433;
wire   [15:0] WidthInBytes_fu_344_p3;
reg   [15:0] WidthInBytes_reg_438;
wire    ap_CS_fsm_state3;
wire   [119:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDATA;
wire   [14:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TKEEP;
wire   [14:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TSTRB;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TUSER;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TLAST;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TID;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDEST;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWVALID;
wire   [31:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWADDR;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWID;
wire   [31:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWLEN;
wire   [2:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWSIZE;
wire   [1:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWBURST;
wire   [1:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWLOCK;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWCACHE;
wire   [2:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWPROT;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWQOS;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWREGION;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWUSER;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WVALID;
wire   [255:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WDATA;
wire   [31:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WSTRB;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WLAST;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WID;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WUSER;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARVALID;
wire   [31:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARADDR;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARID;
wire   [31:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARLEN;
wire   [2:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARSIZE;
wire   [1:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARBURST;
wire   [1:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARLOCK;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARCACHE;
wire   [2:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARPROT;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARQOS;
wire   [3:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARREGION;
wire   [0:0] grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARUSER;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_RREADY;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_BREADY;
wire    grp_FrmbufRdHlsDataFlow_fu_188_ap_start;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID;
wire    grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TREADY;
wire    grp_FrmbufRdHlsDataFlow_fu_188_ap_done;
wire    grp_FrmbufRdHlsDataFlow_fu_188_ap_ready;
wire    grp_FrmbufRdHlsDataFlow_fu_188_ap_idle;
reg    grp_FrmbufRdHlsDataFlow_fu_188_ap_continue;
wire    flush;
reg    s_axi_CTRL_flush_done;
wire    m_axi_mm_video_flush_done;
wire    mm_video_AWREADY;
wire    mm_video_WREADY;
reg    mm_video_ARVALID;
wire    mm_video_ARREADY;
wire    mm_video_RVALID;
reg    mm_video_RREADY;
wire   [255:0] mm_video_RDATA;
wire   [7:0] mm_video_RFIFONUM;
wire    mm_video_BVALID;
reg    grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg;
wire    ap_CS_fsm_state4;
wire    ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready;
wire    ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_done;
reg    ap_block_state4_on_subcall_done;
reg    ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready;
reg    ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done;
wire   [31:0] zext_ln229_fu_242_p1;
wire  signed [15:0] empty_74_fu_234_p0;
wire   [2:0] mul_ln229_fu_267_p0;
wire   [14:0] shl_ln_fu_272_p3;
wire   [14:0] mul_ln216_fu_291_p0;
wire   [16:0] mul_ln216_fu_291_p1;
wire   [13:0] tmp_fu_317_p4;
wire   [0:0] or_ln212_1_fu_334_p2;
wire   [0:0] or_ln212_fu_330_p2;
wire   [0:0] or_ln212_2_fu_338_p2;
wire   [15:0] zext_ln217_fu_326_p1;
wire    ap_CS_fsm_state5;
wire    regslice_both_m_axis_video_V_data_V_U_apdone_blk;
reg   [4:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    m_axis_video_TVALID_int_regslice;
wire    m_axis_video_TREADY_int_regslice;
wire    regslice_both_m_axis_video_V_data_V_U_vld_out;
wire    regslice_both_m_axis_video_V_keep_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_keep_V_U_vld_out;
wire    regslice_both_m_axis_video_V_strb_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_strb_V_U_vld_out;
wire    regslice_both_m_axis_video_V_user_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_user_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_user_V_U_vld_out;
wire    regslice_both_m_axis_video_V_last_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_last_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_last_V_U_vld_out;
wire    regslice_both_m_axis_video_V_id_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_id_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_id_V_U_vld_out;
wire    regslice_both_m_axis_video_V_dest_V_U_apdone_blk;
wire    regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy;
wire    regslice_both_m_axis_video_V_dest_V_U_vld_out;
wire   [30:0] mul_ln216_fu_291_p00;
wire   [15:0] mul_ln229_fu_267_p00;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
#0 frm_buffer2_read_reg_352 = 32'd0;
#0 frm_buffer_read_reg_357 = 32'd0;
#0 stride_read_reg_362 = 16'd0;
#0 width_read_reg_367 = 16'd0;
#0 empty_reg_373 = 13'd0;
#0 empty_74_reg_378 = 13'd0;
#0 empty_75_reg_384 = 6'd0;
#0 mul_ln229_reg_403 = 16'd0;
#0 mul_ln216_reg_408 = 31'd0;
#0 icmp_ln212_reg_413 = 1'd0;
#0 icmp_ln212_1_reg_418 = 1'd0;
#0 icmp_ln212_2_reg_423 = 1'd0;
#0 icmp_ln212_3_reg_428 = 1'd0;
#0 colorFormat_reg_433 = 2'd0;
#0 WidthInBytes_reg_438 = 16'd0;
#0 s_axi_CTRL_flush_done = 1'b0;
#0 grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg = 1'b0;
#0 ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready = 1'b0;
#0 ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done = 1'b0;
end

dpss_vck190_pt_v_frmbuf_rd_0_0_BYTES_PER_PIXEL_ROM_AUTO_1R #(
    .DataWidth( 3 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
BYTES_PER_PIXEL_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(BYTES_PER_PIXEL_address0),
    .ce0(BYTES_PER_PIXEL_ce0),
    .q0(BYTES_PER_PIXEL_q0)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_MEMORY2LIVE_ROM_AUTO_1R #(
    .DataWidth( 2 ),
    .AddressRange( 44 ),
    .AddressWidth( 6 ))
MEMORY2LIVE_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(MEMORY2LIVE_address0),
    .ce0(MEMORY2LIVE_ce0),
    .q0(MEMORY2LIVE_q0)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_FrmbufRdHlsDataFlow grp_FrmbufRdHlsDataFlow_fu_188(
    .m_axis_video_TDATA(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDATA),
    .m_axis_video_TKEEP(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TKEEP),
    .m_axis_video_TSTRB(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TSTRB),
    .m_axis_video_TUSER(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TUSER),
    .m_axis_video_TLAST(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TLAST),
    .m_axis_video_TID(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TID),
    .m_axis_video_TDEST(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDEST),
    .m_axi_mm_video_AWVALID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWVALID),
    .m_axi_mm_video_AWREADY(1'b0),
    .m_axi_mm_video_AWADDR(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWADDR),
    .m_axi_mm_video_AWID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWID),
    .m_axi_mm_video_AWLEN(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWLEN),
    .m_axi_mm_video_AWSIZE(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWSIZE),
    .m_axi_mm_video_AWBURST(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWBURST),
    .m_axi_mm_video_AWLOCK(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWLOCK),
    .m_axi_mm_video_AWCACHE(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWCACHE),
    .m_axi_mm_video_AWPROT(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWPROT),
    .m_axi_mm_video_AWQOS(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWQOS),
    .m_axi_mm_video_AWREGION(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWREGION),
    .m_axi_mm_video_AWUSER(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_AWUSER),
    .m_axi_mm_video_WVALID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WVALID),
    .m_axi_mm_video_WREADY(1'b0),
    .m_axi_mm_video_WDATA(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WDATA),
    .m_axi_mm_video_WSTRB(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WSTRB),
    .m_axi_mm_video_WLAST(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WLAST),
    .m_axi_mm_video_WID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WID),
    .m_axi_mm_video_WUSER(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_WUSER),
    .m_axi_mm_video_ARVALID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARVALID),
    .m_axi_mm_video_ARREADY(mm_video_ARREADY),
    .m_axi_mm_video_ARADDR(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARADDR),
    .m_axi_mm_video_ARID(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARID),
    .m_axi_mm_video_ARLEN(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARLEN),
    .m_axi_mm_video_ARSIZE(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARSIZE),
    .m_axi_mm_video_ARBURST(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARBURST),
    .m_axi_mm_video_ARLOCK(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARLOCK),
    .m_axi_mm_video_ARCACHE(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARCACHE),
    .m_axi_mm_video_ARPROT(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARPROT),
    .m_axi_mm_video_ARQOS(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARQOS),
    .m_axi_mm_video_ARREGION(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARREGION),
    .m_axi_mm_video_ARUSER(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARUSER),
    .m_axi_mm_video_RVALID(mm_video_RVALID),
    .m_axi_mm_video_RREADY(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_RREADY),
    .m_axi_mm_video_RDATA(mm_video_RDATA),
    .m_axi_mm_video_RLAST(1'b0),
    .m_axi_mm_video_RID(1'd0),
    .m_axi_mm_video_RFIFONUM(mm_video_RFIFONUM),
    .m_axi_mm_video_RUSER(1'd0),
    .m_axi_mm_video_RRESP(2'd0),
    .m_axi_mm_video_BVALID(1'b0),
    .m_axi_mm_video_BREADY(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_BREADY),
    .m_axi_mm_video_BRESP(2'd0),
    .m_axi_mm_video_BID(1'd0),
    .m_axi_mm_video_BUSER(1'd0),
    .HwReg_frm_buffer(frm_buffer_read_reg_357),
    .HwReg_frm_buffer2(frm_buffer2_read_reg_352),
    .width_val2(empty_74_reg_378),
    .height_val5(empty_reg_373),
    .stride_val6(stride_read_reg_362),
    .video_format_val8(empty_75_reg_384),
    .WidthInBytes_val10(WidthInBytes_reg_438),
    .colorFormat_val11(colorFormat_reg_433),
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .colorFormat_val11_ap_vld(1'b1),
    .ap_start(grp_FrmbufRdHlsDataFlow_fu_188_ap_start),
    .HwReg_frm_buffer_ap_vld(1'b1),
    .HwReg_frm_buffer2_ap_vld(1'b1),
    .height_val5_ap_vld(1'b1),
    .WidthInBytes_val10_ap_vld(1'b1),
    .stride_val6_ap_vld(1'b1),
    .video_format_val8_ap_vld(1'b1),
    .width_val2_ap_vld(1'b1),
    .m_axis_video_TVALID(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .m_axis_video_TREADY(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TREADY),
    .ap_done(grp_FrmbufRdHlsDataFlow_fu_188_ap_done),
    .ap_ready(grp_FrmbufRdHlsDataFlow_fu_188_ap_ready),
    .ap_idle(grp_FrmbufRdHlsDataFlow_fu_188_ap_idle),
    .ap_continue(grp_FrmbufRdHlsDataFlow_fu_188_ap_continue)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_CTRL_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
CTRL_s_axi_U(
    .AWVALID(s_axi_CTRL_AWVALID),
    .AWREADY(s_axi_CTRL_AWREADY),
    .AWADDR(s_axi_CTRL_AWADDR),
    .WVALID(s_axi_CTRL_WVALID),
    .WREADY(s_axi_CTRL_WREADY),
    .WDATA(s_axi_CTRL_WDATA),
    .WSTRB(s_axi_CTRL_WSTRB),
    .ARVALID(s_axi_CTRL_ARVALID),
    .ARREADY(s_axi_CTRL_ARREADY),
    .ARADDR(s_axi_CTRL_ARADDR),
    .RVALID(s_axi_CTRL_RVALID),
    .RREADY(s_axi_CTRL_RREADY),
    .RDATA(s_axi_CTRL_RDATA),
    .RRESP(s_axi_CTRL_RRESP),
    .BVALID(s_axi_CTRL_BVALID),
    .BREADY(s_axi_CTRL_BREADY),
    .BRESP(s_axi_CTRL_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .width(width),
    .height(height),
    .stride(stride),
    .video_format(video_format),
    .frm_buffer(frm_buffer),
    .frm_buffer2(frm_buffer2),
    .frm_buffer3(frm_buffer3),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .flush(flush),
    .flush_done(s_axi_CTRL_flush_done)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_mm_video_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 106 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_MM_VIDEO_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_MM_VIDEO_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_MM_VIDEO_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_MM_VIDEO_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_MM_VIDEO_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_MM_VIDEO_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_MM_VIDEO_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_MM_VIDEO_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_MM_VIDEO_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_MM_VIDEO_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_MM_VIDEO_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 8 ),
    .USER_DW( 256 ),
    .USER_AW( 32 ),
    .NUM_READ_OUTSTANDING( 8 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
mm_video_m_axi_U(
    .AWVALID(m_axi_mm_video_AWVALID),
    .AWREADY(m_axi_mm_video_AWREADY),
    .AWADDR(m_axi_mm_video_AWADDR),
    .AWID(m_axi_mm_video_AWID),
    .AWLEN(m_axi_mm_video_AWLEN),
    .AWSIZE(m_axi_mm_video_AWSIZE),
    .AWBURST(m_axi_mm_video_AWBURST),
    .AWLOCK(m_axi_mm_video_AWLOCK),
    .AWCACHE(m_axi_mm_video_AWCACHE),
    .AWPROT(m_axi_mm_video_AWPROT),
    .AWQOS(m_axi_mm_video_AWQOS),
    .AWREGION(m_axi_mm_video_AWREGION),
    .AWUSER(m_axi_mm_video_AWUSER),
    .WVALID(m_axi_mm_video_WVALID),
    .WREADY(m_axi_mm_video_WREADY),
    .WDATA(m_axi_mm_video_WDATA),
    .WSTRB(m_axi_mm_video_WSTRB),
    .WLAST(m_axi_mm_video_WLAST),
    .WID(m_axi_mm_video_WID),
    .WUSER(m_axi_mm_video_WUSER),
    .ARVALID(m_axi_mm_video_ARVALID),
    .ARREADY(m_axi_mm_video_ARREADY),
    .ARADDR(m_axi_mm_video_ARADDR),
    .ARID(m_axi_mm_video_ARID),
    .ARLEN(m_axi_mm_video_ARLEN),
    .ARSIZE(m_axi_mm_video_ARSIZE),
    .ARBURST(m_axi_mm_video_ARBURST),
    .ARLOCK(m_axi_mm_video_ARLOCK),
    .ARCACHE(m_axi_mm_video_ARCACHE),
    .ARPROT(m_axi_mm_video_ARPROT),
    .ARQOS(m_axi_mm_video_ARQOS),
    .ARREGION(m_axi_mm_video_ARREGION),
    .ARUSER(m_axi_mm_video_ARUSER),
    .RVALID(m_axi_mm_video_RVALID),
    .RREADY(m_axi_mm_video_RREADY),
    .RDATA(m_axi_mm_video_RDATA),
    .RLAST(m_axi_mm_video_RLAST),
    .RID(m_axi_mm_video_RID),
    .RUSER(m_axi_mm_video_RUSER),
    .RRESP(m_axi_mm_video_RRESP),
    .BVALID(m_axi_mm_video_BVALID),
    .BREADY(m_axi_mm_video_BREADY),
    .BRESP(m_axi_mm_video_BRESP),
    .BID(m_axi_mm_video_BID),
    .BUSER(m_axi_mm_video_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .flush(flush),
    .flush_done(m_axi_mm_video_flush_done),
    .I_ARVALID(mm_video_ARVALID),
    .I_ARREADY(mm_video_ARREADY),
    .I_ARADDR(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARADDR),
    .I_ARLEN(grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARLEN),
    .I_RVALID(mm_video_RVALID),
    .I_RREADY(mm_video_RREADY),
    .I_RDATA(mm_video_RDATA),
    .I_RFIFONUM(mm_video_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(mm_video_AWREADY),
    .I_AWADDR(32'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(mm_video_WREADY),
    .I_WDATA(256'd0),
    .I_WSTRB(32'd0),
    .I_BVALID(mm_video_BVALID),
    .I_BREADY(1'b0)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_mul_3ns_16s_16_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 3 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
mul_3ns_16s_16_1_1_U160(
    .din0(mul_ln229_fu_267_p0),
    .din1(width_read_reg_367),
    .dout(mul_ln229_fu_267_p2)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_mul_15ns_17ns_31_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 15 ),
    .din1_WIDTH( 17 ),
    .dout_WIDTH( 31 ))
mul_15ns_17ns_31_1_1_U161(
    .din0(mul_ln216_fu_291_p0),
    .din1(mul_ln216_fu_291_p1),
    .dout(mul_ln216_fu_291_p2)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 120 ))
regslice_both_m_axis_video_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDATA),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(m_axis_video_TREADY_int_regslice),
    .data_out(m_axis_video_TDATA),
    .vld_out(regslice_both_m_axis_video_V_data_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_data_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 15 ))
regslice_both_m_axis_video_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TKEEP),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_keep_V_U_ack_in_dummy),
    .data_out(m_axis_video_TKEEP),
    .vld_out(regslice_both_m_axis_video_V_keep_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_keep_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 15 ))
regslice_both_m_axis_video_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TSTRB),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_strb_V_U_ack_in_dummy),
    .data_out(m_axis_video_TSTRB),
    .vld_out(regslice_both_m_axis_video_V_strb_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_strb_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TUSER),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_user_V_U_ack_in_dummy),
    .data_out(m_axis_video_TUSER),
    .vld_out(regslice_both_m_axis_video_V_user_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_user_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TLAST),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_last_V_U_ack_in_dummy),
    .data_out(m_axis_video_TLAST),
    .vld_out(regslice_both_m_axis_video_V_last_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_last_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_id_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TID),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_id_V_U_ack_in_dummy),
    .data_out(m_axis_video_TID),
    .vld_out(regslice_both_m_axis_video_V_id_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_id_V_U_apdone_blk)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_regslice_both #(
    .DataWidth( 1 ))
regslice_both_m_axis_video_V_dest_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TDEST),
    .vld_in(grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID),
    .ack_in(regslice_both_m_axis_video_V_dest_V_U_ack_in_dummy),
    .data_out(m_axis_video_TDEST),
    .vld_out(regslice_both_m_axis_video_V_dest_V_U_vld_out),
    .ack_out(m_axis_video_TREADY),
    .apdone_blk(regslice_both_m_axis_video_V_dest_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        WidthInBytes_reg_438 <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            WidthInBytes_reg_438 <= WidthInBytes_fu_344_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done <= 1'b0;
        end else if ((grp_FrmbufRdHlsDataFlow_fu_188_ap_done == 1'b1)) begin
            ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
            ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready <= 1'b0;
        end else if ((grp_FrmbufRdHlsDataFlow_fu_188_ap_ready == 1'b1)) begin
            ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        colorFormat_reg_433 <= 2'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            colorFormat_reg_433 <= MEMORY2LIVE_q0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        empty_74_reg_378 <= 13'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            empty_74_reg_378 <= empty_74_fu_234_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        empty_75_reg_384 <= 6'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            empty_75_reg_384 <= empty_75_fu_238_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        empty_reg_373 <= 13'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            empty_reg_373 <= empty_fu_230_p1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frm_buffer2_read_reg_352 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            frm_buffer2_read_reg_352 <= frm_buffer2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        frm_buffer_read_reg_357 <= 32'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            frm_buffer_read_reg_357 <= frm_buffer;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) | ((ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready == 1'b0) & (1'b1 == ap_CS_fsm_state4)))) begin
            grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg <= 1'b1;
        end else if ((grp_FrmbufRdHlsDataFlow_fu_188_ap_ready == 1'b1)) begin
            grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln212_1_reg_418 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln212_1_reg_418 <= icmp_ln212_1_fu_302_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln212_2_reg_423 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln212_2_reg_423 <= icmp_ln212_2_fu_307_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln212_3_reg_428 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln212_3_reg_428 <= icmp_ln212_3_fu_312_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        icmp_ln212_reg_413 <= 1'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            icmp_ln212_reg_413 <= icmp_ln212_fu_297_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mul_ln216_reg_408 <= 31'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            mul_ln216_reg_408 <= mul_ln216_fu_291_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mul_ln229_reg_403 <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state2)) begin
            mul_ln229_reg_403 <= mul_ln229_fu_267_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        s_axi_CTRL_flush_done <= 1'b0;
    end else begin
        s_axi_CTRL_flush_done <= m_axi_mm_video_flush_done;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        stride_read_reg_362 <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            stride_read_reg_362 <= stride;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        width_read_reg_367 <= 16'd0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state1)) begin
            width_read_reg_367 <= width;
        end
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        BYTES_PER_PIXEL_ce0 = 1'b1;
    end else begin
        BYTES_PER_PIXEL_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        MEMORY2LIVE_ce0 = 1'b1;
    end else begin
        MEMORY2LIVE_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

assign ap_ST_fsm_state3_blk = 1'b0;

always @ (*) begin
    if ((1'b1 == ap_block_state4_on_subcall_done)) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b1)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
        grp_FrmbufRdHlsDataFlow_fu_188_ap_continue = 1'b1;
    end else begin
        grp_FrmbufRdHlsDataFlow_fu_188_ap_continue = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mm_video_ARVALID = grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_ARVALID;
    end else begin
        mm_video_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        mm_video_RREADY = grp_FrmbufRdHlsDataFlow_fu_188_m_axi_mm_video_RREADY;
    end else begin
        mm_video_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b0 == ap_block_state4_on_subcall_done) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((regslice_both_m_axis_video_V_data_V_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign BYTES_PER_PIXEL_address0 = zext_ln229_fu_242_p1;

assign MEMORY2LIVE_address0 = zext_ln229_fu_242_p1;

assign WidthInBytes_fu_344_p3 = ((or_ln212_2_fu_338_p2[0:0] == 1'b1) ? zext_ln217_fu_326_p1 : mul_ln229_reg_403);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state4_on_subcall_done = ((ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready & ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_done) == 1'b0);
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_done = (grp_FrmbufRdHlsDataFlow_fu_188_ap_done | ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_done);

assign ap_sync_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready = (grp_FrmbufRdHlsDataFlow_fu_188_ap_ready | ap_sync_reg_grp_FrmbufRdHlsDataFlow_fu_188_ap_ready);

assign empty_74_fu_234_p0 = width;

assign empty_74_fu_234_p1 = empty_74_fu_234_p0[12:0];

assign empty_75_fu_238_p1 = video_format[5:0];

assign empty_fu_230_p1 = height[12:0];

assign grp_FrmbufRdHlsDataFlow_fu_188_ap_start = grp_FrmbufRdHlsDataFlow_fu_188_ap_start_reg;

assign grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TREADY = (m_axis_video_TREADY_int_regslice & ap_CS_fsm_state4);

assign icmp_ln212_1_fu_302_p2 = ((empty_75_reg_384 == 6'd23) ? 1'b1 : 1'b0);

assign icmp_ln212_2_fu_307_p2 = ((empty_75_reg_384 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln212_3_fu_312_p2 = ((empty_75_reg_384 == 6'd43) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_297_p2 = ((empty_75_reg_384 == 6'd22) ? 1'b1 : 1'b0);

assign m_axis_video_TVALID = regslice_both_m_axis_video_V_data_V_U_vld_out;

assign m_axis_video_TVALID_int_regslice = grp_FrmbufRdHlsDataFlow_fu_188_m_axis_video_TVALID;

assign mul_ln216_fu_291_p0 = mul_ln216_fu_291_p00;

assign mul_ln216_fu_291_p00 = shl_ln_fu_272_p3;

assign mul_ln216_fu_291_p1 = 31'd43691;

assign mul_ln229_fu_267_p0 = mul_ln229_fu_267_p00;

assign mul_ln229_fu_267_p00 = BYTES_PER_PIXEL_q0;

assign or_ln212_1_fu_334_p2 = (icmp_ln212_3_reg_428 | icmp_ln212_2_reg_423);

assign or_ln212_2_fu_338_p2 = (or_ln212_fu_330_p2 | or_ln212_1_fu_334_p2);

assign or_ln212_fu_330_p2 = (icmp_ln212_reg_413 | icmp_ln212_1_reg_418);

assign shl_ln_fu_272_p3 = {{empty_74_reg_378}, {2'd0}};

assign tmp_fu_317_p4 = {{mul_ln216_reg_408[30:17]}};

assign zext_ln217_fu_326_p1 = tmp_fu_317_p4;

assign zext_ln229_fu_242_p1 = video_format;


reg find_df_deadlock = 0;
// synthesis translate_off
`include "dpss_vck190_pt_v_frmbuf_rd_0_0_hls_deadlock_detector.vh"
// synthesis translate_on

reg find_kernel_block = 0;
// synthesis translate_off
`include "dpss_vck190_pt_v_frmbuf_rd_0_0_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //dpss_vck190_pt_v_frmbuf_rd_0_0_v_frmbuf_rd

