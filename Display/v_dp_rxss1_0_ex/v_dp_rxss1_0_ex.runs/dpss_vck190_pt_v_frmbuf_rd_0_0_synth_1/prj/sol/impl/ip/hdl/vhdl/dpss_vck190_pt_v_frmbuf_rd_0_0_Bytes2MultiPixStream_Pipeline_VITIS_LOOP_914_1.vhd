-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_914_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_din : OUT STD_LOGIC_VECTOR (119 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    img_full_n : IN STD_LOGIC;
    img_write : OUT STD_LOGIC;
    trunc_ln901_1 : IN STD_LOGIC_VECTOR (11 downto 0);
    cmp117_5 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp117_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    empty_73 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp117_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp : IN STD_LOGIC_VECTOR (0 downto 0);
    sub113_cast : IN STD_LOGIC_VECTOR (11 downto 0);
    cmp117 : IN STD_LOGIC_VECTOR (0 downto 0);
    bytePlanes_plane0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bytePlanes_plane0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_empty_n : IN STD_LOGIC;
    bytePlanes_plane0_read : OUT STD_LOGIC;
    VideoFormat_val : IN STD_LOGIC_VECTOR (5 downto 0);
    empty : IN STD_LOGIC_VECTOR (0 downto 0);
    bytePlanes_plane1_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bytePlanes_plane1_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane1_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane1_empty_n : IN STD_LOGIC;
    bytePlanes_plane1_read : OUT STD_LOGIC );
end;


architecture behav of dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_914_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv6_17 : STD_LOGIC_VECTOR (5 downto 0) := "010111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111101";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011101";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_FD : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111101";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_A9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101001";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_AA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101010";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_C9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001001";
    constant ap_const_lv32_CA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001010";
    constant ap_const_lv32_D3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010011";
    constant ap_const_lv32_BE : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111110";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_D4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010100";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_D1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010001";
    constant ap_const_lv32_E9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101001";
    constant ap_const_lv32_D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010010";
    constant ap_const_lv32_DB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011011";
    constant ap_const_lv32_EA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101010";
    constant ap_const_lv32_F3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110011";
    constant ap_const_lv32_DC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011100";
    constant ap_const_lv32_E5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100101";
    constant ap_const_lv32_F4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110100";
    constant ap_const_lv32_E6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100110";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln948_5_reg_1249 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state7_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln914_fu_402_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal icmp_ln914_reg_1221 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln948_4_reg_1245 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_predicate_op157_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal bytePlanes_plane0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal bytePlanes_plane1_blk_n : STD_LOGIC;
    signal and_ln928_reg_1225 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal img_blk_n : STD_LOGIC;
    signal or_ln948_reg_1229 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln948_1_reg_1233 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln948_2_reg_1237 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal or_ln948_3_reg_1241 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal and_ln928_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_1_fu_436_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_2_fu_442_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_3_fu_448_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_4_fu_454_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln948_5_fu_460_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_1253 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_predicate_op74_read_state2 : BOOLEAN;
    signal ap_predicate_op97_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_28_reg_1258 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_29_reg_1263 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_30_reg_1268 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_31_reg_1273 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_32_reg_1278 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_33_reg_1283 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_34_reg_1288 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_36_reg_1293 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_37_reg_1298 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_38_reg_1303 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_39_reg_1308 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_40_reg_1313 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_41_reg_1318 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_42_reg_1323 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_43_reg_1328 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_45_reg_1333 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_46_reg_1338 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_47_reg_1343 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_48_reg_1348 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_49_reg_1353 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_50_reg_1358 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_51_reg_1363 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_52_reg_1368 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_54_reg_1373 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_55_reg_1378 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_56_reg_1383 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_57_reg_1388 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_58_reg_1393 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_59_reg_1398 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_60_reg_1403 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_61_reg_1408 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_63_reg_1413 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_64_reg_1418 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_65_reg_1423 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_66_reg_1428 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_67_reg_1433 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_68_reg_1438 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_69_reg_1443 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_70_reg_1448 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_phi_mux_rdUv_phi_fu_347_p4 : STD_LOGIC_VECTOR (239 downto 0);
    signal tmp_fu_552_p9 : STD_LOGIC_VECTOR (239 downto 0);
    signal ap_phi_reg_pp0_iter0_rdUv_reg_343 : STD_LOGIC_VECTOR (239 downto 0);
    signal x_fu_260 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal x_2_fu_396_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x_1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln949_fu_667_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal zext_ln949_1_fu_1094_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op142_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal zext_ln949_2_fu_1121_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op147_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal zext_ln949_3_fu_1148_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op152_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal zext_ln949_4_fu_1175_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal zext_ln949_5_fu_1202_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal icmp_ln928_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln914_fu_408_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub113_cast_cast_fu_374_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal cmp114_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_fu_542_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_fu_532_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_16_fu_522_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_15_fu_512_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_14_fu_502_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_13_fu_492_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_s_fu_482_p4 : STD_LOGIC_VECTOR (29 downto 0);
    signal trunc_ln935_fu_478_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_25_fu_631_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_22_fu_621_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_21_fu_611_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_20_fu_601_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_19_fu_591_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_fu_581_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln949_fu_577_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln944_fu_573_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_26_fu_641_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_35_fu_1076_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_44_fu_1103_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_53_fu_1130_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_62_fu_1157_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_71_fu_1184_p12 : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    and_ln928_reg_1225_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                and_ln928_reg_1225 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    and_ln928_reg_1225 <= and_ln928_fu_418_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln914_reg_1221_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln914_reg_1221 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln914_reg_1221 <= icmp_ln914_fu_402_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_1_reg_1233_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_1_reg_1233 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_1_reg_1233 <= or_ln948_1_fu_436_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_2_reg_1237_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_2_reg_1237 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_2_reg_1237 <= or_ln948_2_fu_442_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_3_reg_1241_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_3_reg_1241 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_3_reg_1241 <= or_ln948_3_fu_448_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_4_reg_1245_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_4_reg_1245 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_4_reg_1245 <= or_ln948_4_fu_454_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_5_reg_1249_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_5_reg_1249 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_5_reg_1249 <= or_ln948_5_fu_460_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln948_reg_1229_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln948_reg_1229 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln948_reg_1229 <= or_ln948_fu_430_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_27_reg_1253_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_27_reg_1253 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_27_reg_1253 <= bytePlanes_plane0_dout(51 downto 42);
                end if; 
            end if;
        end if;
    end process;


    tmp_28_reg_1258_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_28_reg_1258 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_28_reg_1258 <= ap_phi_mux_rdUv_phi_fu_347_p4(49 downto 40);
                end if; 
            end if;
        end if;
    end process;


    tmp_29_reg_1263_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_29_reg_1263 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_29_reg_1263 <= bytePlanes_plane0_dout(61 downto 52);
                end if; 
            end if;
        end if;
    end process;


    tmp_30_reg_1268_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_30_reg_1268 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_30_reg_1268 <= ap_phi_mux_rdUv_phi_fu_347_p4(59 downto 50);
                end if; 
            end if;
        end if;
    end process;


    tmp_31_reg_1273_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_31_reg_1273 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_31_reg_1273 <= bytePlanes_plane0_dout(73 downto 64);
                end if; 
            end if;
        end if;
    end process;


    tmp_32_reg_1278_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_32_reg_1278 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_32_reg_1278 <= ap_phi_mux_rdUv_phi_fu_347_p4(69 downto 60);
                end if; 
            end if;
        end if;
    end process;


    tmp_33_reg_1283_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_33_reg_1283 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_33_reg_1283 <= bytePlanes_plane0_dout(83 downto 74);
                end if; 
            end if;
        end if;
    end process;


    tmp_34_reg_1288_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_34_reg_1288 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_34_reg_1288 <= ap_phi_mux_rdUv_phi_fu_347_p4(79 downto 70);
                end if; 
            end if;
        end if;
    end process;


    tmp_36_reg_1293_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_36_reg_1293 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_36_reg_1293 <= bytePlanes_plane0_dout(93 downto 84);
                end if; 
            end if;
        end if;
    end process;


    tmp_37_reg_1298_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_37_reg_1298 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_37_reg_1298 <= ap_phi_mux_rdUv_phi_fu_347_p4(89 downto 80);
                end if; 
            end if;
        end if;
    end process;


    tmp_38_reg_1303_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_38_reg_1303 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_38_reg_1303 <= bytePlanes_plane0_dout(105 downto 96);
                end if; 
            end if;
        end if;
    end process;


    tmp_39_reg_1308_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_39_reg_1308 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_39_reg_1308 <= ap_phi_mux_rdUv_phi_fu_347_p4(99 downto 90);
                end if; 
            end if;
        end if;
    end process;


    tmp_40_reg_1313_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_40_reg_1313 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_40_reg_1313 <= bytePlanes_plane0_dout(115 downto 106);
                end if; 
            end if;
        end if;
    end process;


    tmp_41_reg_1318_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_41_reg_1318 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_41_reg_1318 <= ap_phi_mux_rdUv_phi_fu_347_p4(109 downto 100);
                end if; 
            end if;
        end if;
    end process;


    tmp_42_reg_1323_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_42_reg_1323 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_42_reg_1323 <= bytePlanes_plane0_dout(125 downto 116);
                end if; 
            end if;
        end if;
    end process;


    tmp_43_reg_1328_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_43_reg_1328 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_43_reg_1328 <= ap_phi_mux_rdUv_phi_fu_347_p4(119 downto 110);
                end if; 
            end if;
        end if;
    end process;


    tmp_45_reg_1333_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_45_reg_1333 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_45_reg_1333 <= bytePlanes_plane0_dout(137 downto 128);
                end if; 
            end if;
        end if;
    end process;


    tmp_46_reg_1338_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_46_reg_1338 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_46_reg_1338 <= ap_phi_mux_rdUv_phi_fu_347_p4(129 downto 120);
                end if; 
            end if;
        end if;
    end process;


    tmp_47_reg_1343_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_47_reg_1343 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_47_reg_1343 <= bytePlanes_plane0_dout(147 downto 138);
                end if; 
            end if;
        end if;
    end process;


    tmp_48_reg_1348_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_48_reg_1348 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_48_reg_1348 <= ap_phi_mux_rdUv_phi_fu_347_p4(139 downto 130);
                end if; 
            end if;
        end if;
    end process;


    tmp_49_reg_1353_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_49_reg_1353 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_49_reg_1353 <= bytePlanes_plane0_dout(157 downto 148);
                end if; 
            end if;
        end if;
    end process;


    tmp_50_reg_1358_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_50_reg_1358 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_50_reg_1358 <= ap_phi_mux_rdUv_phi_fu_347_p4(149 downto 140);
                end if; 
            end if;
        end if;
    end process;


    tmp_51_reg_1363_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_51_reg_1363 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_51_reg_1363 <= bytePlanes_plane0_dout(169 downto 160);
                end if; 
            end if;
        end if;
    end process;


    tmp_52_reg_1368_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_52_reg_1368 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_52_reg_1368 <= ap_phi_mux_rdUv_phi_fu_347_p4(159 downto 150);
                end if; 
            end if;
        end if;
    end process;


    tmp_54_reg_1373_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_54_reg_1373 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_54_reg_1373 <= bytePlanes_plane0_dout(179 downto 170);
                end if; 
            end if;
        end if;
    end process;


    tmp_55_reg_1378_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_55_reg_1378 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_55_reg_1378 <= ap_phi_mux_rdUv_phi_fu_347_p4(169 downto 160);
                end if; 
            end if;
        end if;
    end process;


    tmp_56_reg_1383_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_56_reg_1383 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_56_reg_1383 <= bytePlanes_plane0_dout(189 downto 180);
                end if; 
            end if;
        end if;
    end process;


    tmp_57_reg_1388_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_57_reg_1388 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_57_reg_1388 <= ap_phi_mux_rdUv_phi_fu_347_p4(179 downto 170);
                end if; 
            end if;
        end if;
    end process;


    tmp_58_reg_1393_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_58_reg_1393 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_58_reg_1393 <= bytePlanes_plane0_dout(201 downto 192);
                end if; 
            end if;
        end if;
    end process;


    tmp_59_reg_1398_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_59_reg_1398 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_59_reg_1398 <= ap_phi_mux_rdUv_phi_fu_347_p4(189 downto 180);
                end if; 
            end if;
        end if;
    end process;


    tmp_60_reg_1403_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_60_reg_1403 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_60_reg_1403 <= bytePlanes_plane0_dout(211 downto 202);
                end if; 
            end if;
        end if;
    end process;


    tmp_61_reg_1408_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_61_reg_1408 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_61_reg_1408 <= ap_phi_mux_rdUv_phi_fu_347_p4(199 downto 190);
                end if; 
            end if;
        end if;
    end process;


    tmp_63_reg_1413_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_63_reg_1413 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_63_reg_1413 <= bytePlanes_plane0_dout(221 downto 212);
                end if; 
            end if;
        end if;
    end process;


    tmp_64_reg_1418_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_64_reg_1418 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_64_reg_1418 <= ap_phi_mux_rdUv_phi_fu_347_p4(209 downto 200);
                end if; 
            end if;
        end if;
    end process;


    tmp_65_reg_1423_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_65_reg_1423 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_65_reg_1423 <= bytePlanes_plane0_dout(233 downto 224);
                end if; 
            end if;
        end if;
    end process;


    tmp_66_reg_1428_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_66_reg_1428 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_66_reg_1428 <= ap_phi_mux_rdUv_phi_fu_347_p4(219 downto 210);
                end if; 
            end if;
        end if;
    end process;


    tmp_67_reg_1433_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_67_reg_1433 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_67_reg_1433 <= bytePlanes_plane0_dout(243 downto 234);
                end if; 
            end if;
        end if;
    end process;


    tmp_68_reg_1438_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_68_reg_1438 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_68_reg_1438 <= ap_phi_mux_rdUv_phi_fu_347_p4(229 downto 220);
                end if; 
            end if;
        end if;
    end process;


    tmp_69_reg_1443_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_69_reg_1443 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_69_reg_1443 <= bytePlanes_plane0_dout(253 downto 244);
                end if; 
            end if;
        end if;
    end process;


    tmp_70_reg_1448_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_70_reg_1448 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_70_reg_1448 <= ap_phi_mux_rdUv_phi_fu_347_p4(239 downto 230);
                end if; 
            end if;
        end if;
    end process;


    x_fu_260_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_fu_260 <= ap_const_lv12_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln914_fu_402_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        x_fu_260 <= x_2_fu_396_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        x_fu_260 <= ap_const_lv12_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage5_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    and_ln928_fu_418_p2 <= (icmp_ln928_fu_412_p2 and empty);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state7_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state7_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state7_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;


    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(img_full_n, icmp_ln914_reg_1221, bytePlanes_plane0_empty_n, bytePlanes_plane1_empty_n, ap_predicate_op74_read_state2, ap_predicate_op97_write_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((img_full_n = ap_const_logic_0) and (ap_predicate_op97_write_state2 = ap_const_boolean_1)) or ((ap_predicate_op74_read_state2 = ap_const_boolean_1) and (bytePlanes_plane1_empty_n = ap_const_logic_0)) or ((bytePlanes_plane0_empty_n = ap_const_logic_0) and (icmp_ln914_reg_1221 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(img_full_n, ap_predicate_op142_write_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op142_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(img_full_n, ap_predicate_op147_write_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op147_write_state4 = ap_const_boolean_1));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(img_full_n, ap_predicate_op152_write_state5)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op152_write_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(img_full_n, ap_predicate_op157_write_state6)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((ap_predicate_op157_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage0_iter1_assign_proc : process(img_full_n, or_ln948_5_reg_1249)
    begin
                ap_block_state7_pp0_stage0_iter1 <= ((or_ln948_5_reg_1249 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln914_fu_402_p2)
    begin
        if (((icmp_ln914_fu_402_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_phi_mux_rdUv_phi_fu_347_p4_assign_proc : process(icmp_ln914_reg_1221, and_ln928_reg_1225, tmp_fu_552_p9, ap_phi_reg_pp0_iter0_rdUv_reg_343)
    begin
        if (((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln928_reg_1225))) then 
            ap_phi_mux_rdUv_phi_fu_347_p4 <= tmp_fu_552_p9;
        else 
            ap_phi_mux_rdUv_phi_fu_347_p4 <= ap_phi_reg_pp0_iter0_rdUv_reg_343;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_rdUv_reg_343 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_predicate_op142_write_state3_assign_proc : process(icmp_ln914_reg_1221, or_ln948_1_reg_1233)
    begin
                ap_predicate_op142_write_state3 <= ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (or_ln948_1_reg_1233 = ap_const_lv1_1));
    end process;


    ap_predicate_op147_write_state4_assign_proc : process(icmp_ln914_reg_1221, or_ln948_2_reg_1237)
    begin
                ap_predicate_op147_write_state4 <= ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (or_ln948_2_reg_1237 = ap_const_lv1_1));
    end process;


    ap_predicate_op152_write_state5_assign_proc : process(icmp_ln914_reg_1221, or_ln948_3_reg_1241)
    begin
                ap_predicate_op152_write_state5 <= ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (or_ln948_3_reg_1241 = ap_const_lv1_1));
    end process;


    ap_predicate_op157_write_state6_assign_proc : process(icmp_ln914_reg_1221, or_ln948_4_reg_1245)
    begin
                ap_predicate_op157_write_state6 <= ((or_ln948_4_reg_1245 = ap_const_lv1_1) and (icmp_ln914_reg_1221 = ap_const_lv1_0));
    end process;


    ap_predicate_op74_read_state2_assign_proc : process(icmp_ln914_reg_1221, and_ln928_reg_1225)
    begin
                ap_predicate_op74_read_state2 <= ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln928_reg_1225));
    end process;


    ap_predicate_op97_write_state2_assign_proc : process(icmp_ln914_reg_1221, or_ln948_reg_1229)
    begin
                ap_predicate_op97_write_state2 <= ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (or_ln948_reg_1229 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_fu_260, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x_1 <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_x_1 <= x_fu_260;
        end if; 
    end process;


    bytePlanes_plane0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln914_reg_1221, bytePlanes_plane0_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane0_blk_n <= bytePlanes_plane0_empty_n;
        else 
            bytePlanes_plane0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bytePlanes_plane0_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln914_reg_1221, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane0_read <= ap_const_logic_1;
        else 
            bytePlanes_plane0_read <= ap_const_logic_0;
        end if; 
    end process;


    bytePlanes_plane1_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln914_reg_1221, bytePlanes_plane1_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, and_ln928_reg_1225)
    begin
        if (((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_lv1_0 = and_ln928_reg_1225) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane1_blk_n <= bytePlanes_plane1_empty_n;
        else 
            bytePlanes_plane1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bytePlanes_plane1_read_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_predicate_op74_read_state2, ap_block_pp0_stage1_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op74_read_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane1_read <= ap_const_logic_1;
        else 
            bytePlanes_plane1_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp114_fu_424_p2 <= "1" when (signed(zext_ln914_fu_408_p1) < signed(sub113_cast_cast_fu_374_p1)) else "0";
    icmp_ln914_fu_402_p2 <= "1" when (ap_sig_allocacmp_x_1 = trunc_ln901_1) else "0";
    icmp_ln928_fu_412_p2 <= "1" when (VideoFormat_val = ap_const_lv6_17) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, img_full_n, or_ln948_5_reg_1249, ap_CS_fsm_pp0_stage5, icmp_ln914_reg_1221, ap_predicate_op157_write_state6, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, or_ln948_reg_1229, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, or_ln948_1_reg_1233, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln948_2_reg_1237, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, or_ln948_3_reg_1241, ap_block_pp0_stage5, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op157_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (or_ln948_3_reg_1241 = ap_const_lv1_1)) or ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln948_2_reg_1237 = ap_const_lv1_1)) or ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln948_1_reg_1233 = ap_const_lv1_1)) or ((icmp_ln914_reg_1221 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln948_reg_1229 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln948_5_reg_1249 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_blk_n <= img_full_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln948_5_reg_1249, ap_CS_fsm_pp0_stage5, ap_predicate_op157_write_state6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_predicate_op97_write_state2, zext_ln949_fu_667_p1, ap_block_pp0_stage1_01001, zext_ln949_1_fu_1094_p1, ap_predicate_op142_write_state3, ap_block_pp0_stage2_01001, zext_ln949_2_fu_1121_p1, ap_predicate_op147_write_state4, ap_block_pp0_stage3_01001, zext_ln949_3_fu_1148_p1, ap_predicate_op152_write_state5, ap_block_pp0_stage4_01001, zext_ln949_4_fu_1175_p1, ap_block_pp0_stage5_01001, zext_ln949_5_fu_1202_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (or_ln948_5_reg_1249 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_din <= zext_ln949_5_fu_1202_p1;
        elsif (((ap_predicate_op157_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            img_din <= zext_ln949_4_fu_1175_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_predicate_op152_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            img_din <= zext_ln949_3_fu_1148_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_predicate_op147_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            img_din <= zext_ln949_2_fu_1121_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_predicate_op142_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_din <= zext_ln949_1_fu_1094_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op97_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            img_din <= zext_ln949_fu_667_p1;
        else 
            img_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln948_5_reg_1249, ap_CS_fsm_pp0_stage5, ap_predicate_op157_write_state6, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage0_11001, ap_predicate_op97_write_state2, ap_block_pp0_stage1_11001, ap_predicate_op142_write_state3, ap_predicate_op147_write_state4, ap_predicate_op152_write_state5, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001)
    begin
        if ((((ap_predicate_op157_write_state6 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_predicate_op152_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_predicate_op147_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op142_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op97_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln948_5_reg_1249 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_write <= ap_const_logic_1;
        else 
            img_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln948_1_fu_436_p2 <= (icmp or cmp114_fu_424_p2);
    or_ln948_2_fu_442_p2 <= (cmp117_2 or cmp114_fu_424_p2);
    or_ln948_3_fu_448_p2 <= (empty_73 or cmp114_fu_424_p2);
    or_ln948_4_fu_454_p2 <= (cmp117_4 or cmp114_fu_424_p2);
    or_ln948_5_fu_460_p2 <= (cmp117_5 or cmp114_fu_424_p2);
    or_ln948_fu_430_p2 <= (cmp117 or cmp114_fu_424_p2);
        sub113_cast_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub113_cast),13));

    tmp_12_fu_581_p4 <= bytePlanes_plane0_dout(19 downto 10);
    tmp_13_fu_492_p4 <= bytePlanes_plane1_dout(93 downto 64);
    tmp_14_fu_502_p4 <= bytePlanes_plane1_dout(125 downto 96);
    tmp_15_fu_512_p4 <= bytePlanes_plane1_dout(157 downto 128);
    tmp_16_fu_522_p4 <= bytePlanes_plane1_dout(189 downto 160);
    tmp_17_fu_532_p4 <= bytePlanes_plane1_dout(221 downto 192);
    tmp_18_fu_542_p4 <= bytePlanes_plane1_dout(253 downto 224);
    tmp_19_fu_591_p4 <= ap_phi_mux_rdUv_phi_fu_347_p4(19 downto 10);
    tmp_20_fu_601_p4 <= bytePlanes_plane0_dout(29 downto 20);
    tmp_21_fu_611_p4 <= ap_phi_mux_rdUv_phi_fu_347_p4(29 downto 20);
    tmp_22_fu_621_p4 <= bytePlanes_plane0_dout(41 downto 32);
    tmp_25_fu_631_p4 <= ap_phi_mux_rdUv_phi_fu_347_p4(39 downto 30);
    tmp_26_fu_641_p12 <= ((((((((((tmp_25_fu_631_p4 & tmp_22_fu_621_p4) & ap_const_lv10_0) & tmp_21_fu_611_p4) & tmp_20_fu_601_p4) & ap_const_lv10_0) & tmp_19_fu_591_p4) & tmp_12_fu_581_p4) & ap_const_lv10_0) & trunc_ln949_fu_577_p1) & trunc_ln944_fu_573_p1);
    tmp_35_fu_1076_p12 <= ((((((((((tmp_34_reg_1288 & tmp_33_reg_1283) & ap_const_lv10_0) & tmp_32_reg_1278) & tmp_31_reg_1273) & ap_const_lv10_0) & tmp_30_reg_1268) & tmp_29_reg_1263) & ap_const_lv10_0) & tmp_28_reg_1258) & tmp_27_reg_1253);
    tmp_44_fu_1103_p12 <= ((((((((((tmp_43_reg_1328 & tmp_42_reg_1323) & ap_const_lv10_0) & tmp_41_reg_1318) & tmp_40_reg_1313) & ap_const_lv10_0) & tmp_39_reg_1308) & tmp_38_reg_1303) & ap_const_lv10_0) & tmp_37_reg_1298) & tmp_36_reg_1293);
    tmp_53_fu_1130_p12 <= ((((((((((tmp_52_reg_1368 & tmp_51_reg_1363) & ap_const_lv10_0) & tmp_50_reg_1358) & tmp_49_reg_1353) & ap_const_lv10_0) & tmp_48_reg_1348) & tmp_47_reg_1343) & ap_const_lv10_0) & tmp_46_reg_1338) & tmp_45_reg_1333);
    tmp_62_fu_1157_p12 <= ((((((((((tmp_61_reg_1408 & tmp_60_reg_1403) & ap_const_lv10_0) & tmp_59_reg_1398) & tmp_58_reg_1393) & ap_const_lv10_0) & tmp_57_reg_1388) & tmp_56_reg_1383) & ap_const_lv10_0) & tmp_55_reg_1378) & tmp_54_reg_1373);
    tmp_71_fu_1184_p12 <= ((((((((((tmp_70_reg_1448 & tmp_69_reg_1443) & ap_const_lv10_0) & tmp_68_reg_1438) & tmp_67_reg_1433) & ap_const_lv10_0) & tmp_66_reg_1428) & tmp_65_reg_1423) & ap_const_lv10_0) & tmp_64_reg_1418) & tmp_63_reg_1413);
    tmp_fu_552_p9 <= (((((((tmp_18_fu_542_p4 & tmp_17_fu_532_p4) & tmp_16_fu_522_p4) & tmp_15_fu_512_p4) & tmp_14_fu_502_p4) & tmp_13_fu_492_p4) & tmp_s_fu_482_p4) & trunc_ln935_fu_478_p1);
    tmp_s_fu_482_p4 <= bytePlanes_plane1_dout(61 downto 32);
    trunc_ln935_fu_478_p1 <= bytePlanes_plane1_dout(30 - 1 downto 0);
    trunc_ln944_fu_573_p1 <= bytePlanes_plane0_dout(10 - 1 downto 0);
    trunc_ln949_fu_577_p1 <= ap_phi_mux_rdUv_phi_fu_347_p4(10 - 1 downto 0);
    x_2_fu_396_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x_1) + unsigned(ap_const_lv12_1));
    zext_ln914_fu_408_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x_1),13));
    zext_ln949_1_fu_1094_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_1076_p12),120));
    zext_ln949_2_fu_1121_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_1103_p12),120));
    zext_ln949_3_fu_1148_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_53_fu_1130_p12),120));
    zext_ln949_4_fu_1175_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_1157_p12),120));
    zext_ln949_5_fu_1202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_71_fu_1184_p12),120));
    zext_ln949_fu_667_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_641_p12),120));
end behav;
