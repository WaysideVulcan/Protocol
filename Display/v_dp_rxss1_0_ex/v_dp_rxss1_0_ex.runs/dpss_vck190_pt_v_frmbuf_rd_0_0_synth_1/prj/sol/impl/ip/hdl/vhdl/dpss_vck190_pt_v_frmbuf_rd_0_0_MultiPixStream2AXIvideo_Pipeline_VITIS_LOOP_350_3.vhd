-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_350_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_dout : IN STD_LOGIC_VECTOR (119 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    img_empty_n : IN STD_LOGIC;
    img_read : OUT STD_LOGIC;
    m_axis_video_TREADY : IN STD_LOGIC;
    sof : IN STD_LOGIC_VECTOR (0 downto 0);
    div_cast1 : IN STD_LOGIC_VECTOR (10 downto 0);
    sub : IN STD_LOGIC_VECTOR (11 downto 0);
    empty_62 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_63 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_64 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_65 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_66 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_67 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_68 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_69 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_70 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_71 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty_72 : IN STD_LOGIC_VECTOR (3 downto 0);
    empty : IN STD_LOGIC_VECTOR (3 downto 0);
    m_axis_video_TDATA : OUT STD_LOGIC_VECTOR (119 downto 0);
    m_axis_video_TVALID : OUT STD_LOGIC;
    m_axis_video_TKEEP : OUT STD_LOGIC_VECTOR (14 downto 0);
    m_axis_video_TSTRB : OUT STD_LOGIC_VECTOR (14 downto 0);
    m_axis_video_TUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axis_video_TDEST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_350_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln350_reg_1273 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal icmp_ln350_reg_1273_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln350_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal img_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal m_axis_video_TDATA_blk_n : STD_LOGIC;
    signal sof_2_reg_307 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal axi_last_fu_383_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal axi_last_reg_1277 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal axi_last_reg_1277_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal tmp_s_fu_517_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_reg_1282 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_2_fu_572_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_reg_1287 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_3_fu_627_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_reg_1292 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_4_fu_682_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_reg_1297 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_5_fu_737_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_reg_1302 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_6_fu_792_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_reg_1307 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_7_fu_847_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_reg_1312 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_8_fu_902_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_reg_1317 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_9_fu_957_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_reg_1322 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_1_fu_1012_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_1327 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_10_fu_1067_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_reg_1332 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal tmp_11_fu_1122_p27 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_reg_1337 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal ap_loop_init : STD_LOGIC;
    signal j_fu_178 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal j_2_fu_367_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_j_1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln350_fu_379_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal pix_fu_403_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_s_fu_517_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_2_fu_572_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_3_fu_627_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_682_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_5_fu_737_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_6_fu_792_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_7_fu_847_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_8_fu_902_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_9_fu_957_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_fu_1012_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_10_fu_1067_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p6 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p8 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p10 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p12 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p14 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p16 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p18 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p20 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p22 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p24 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_11_fu_1122_p25 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal tmp_s_fu_517_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_517_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_572_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_627_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_4_fu_682_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_737_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_792_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_847_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_8_fu_902_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_957_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_1_fu_1012_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_10_fu_1067_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p9 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p11 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p13 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p15 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p17 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p19 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p21 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_11_fu_1122_p23 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (3 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (3 downto 0);
        din5_WIDTH : INTEGER;
        CASE6 : STD_LOGIC_VECTOR (3 downto 0);
        din6_WIDTH : INTEGER;
        CASE7 : STD_LOGIC_VECTOR (3 downto 0);
        din7_WIDTH : INTEGER;
        CASE8 : STD_LOGIC_VECTOR (3 downto 0);
        din8_WIDTH : INTEGER;
        CASE9 : STD_LOGIC_VECTOR (3 downto 0);
        din9_WIDTH : INTEGER;
        CASE10 : STD_LOGIC_VECTOR (3 downto 0);
        din10_WIDTH : INTEGER;
        CASE11 : STD_LOGIC_VECTOR (3 downto 0);
        din11_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (9 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (9 downto 0);
        din3 : IN STD_LOGIC_VECTOR (9 downto 0);
        din4 : IN STD_LOGIC_VECTOR (9 downto 0);
        din5 : IN STD_LOGIC_VECTOR (9 downto 0);
        din6 : IN STD_LOGIC_VECTOR (9 downto 0);
        din7 : IN STD_LOGIC_VECTOR (9 downto 0);
        din8 : IN STD_LOGIC_VECTOR (9 downto 0);
        din9 : IN STD_LOGIC_VECTOR (9 downto 0);
        din10 : IN STD_LOGIC_VECTOR (9 downto 0);
        din11 : IN STD_LOGIC_VECTOR (9 downto 0);
        def : IN STD_LOGIC_VECTOR (9 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_25_4_10_1_1_U90 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_s_fu_517_p4,
        din2 => tmp_s_fu_517_p6,
        din3 => tmp_s_fu_517_p8,
        din4 => tmp_s_fu_517_p10,
        din5 => tmp_s_fu_517_p12,
        din6 => tmp_s_fu_517_p14,
        din7 => tmp_s_fu_517_p16,
        din8 => tmp_s_fu_517_p18,
        din9 => tmp_s_fu_517_p20,
        din10 => tmp_s_fu_517_p22,
        din11 => tmp_s_fu_517_p24,
        def => tmp_s_fu_517_p25,
        sel => empty_62,
        dout => tmp_s_fu_517_p27);

    sparsemux_25_4_10_1_1_U91 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_2_fu_572_p4,
        din2 => tmp_2_fu_572_p6,
        din3 => tmp_2_fu_572_p8,
        din4 => tmp_2_fu_572_p10,
        din5 => tmp_2_fu_572_p12,
        din6 => tmp_2_fu_572_p14,
        din7 => tmp_2_fu_572_p16,
        din8 => tmp_2_fu_572_p18,
        din9 => tmp_2_fu_572_p20,
        din10 => tmp_2_fu_572_p22,
        din11 => tmp_2_fu_572_p24,
        def => tmp_2_fu_572_p25,
        sel => empty_63,
        dout => tmp_2_fu_572_p27);

    sparsemux_25_4_10_1_1_U92 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_3_fu_627_p4,
        din2 => tmp_3_fu_627_p6,
        din3 => tmp_3_fu_627_p8,
        din4 => tmp_3_fu_627_p10,
        din5 => tmp_3_fu_627_p12,
        din6 => tmp_3_fu_627_p14,
        din7 => tmp_3_fu_627_p16,
        din8 => tmp_3_fu_627_p18,
        din9 => tmp_3_fu_627_p20,
        din10 => tmp_3_fu_627_p22,
        din11 => tmp_3_fu_627_p24,
        def => tmp_3_fu_627_p25,
        sel => empty_64,
        dout => tmp_3_fu_627_p27);

    sparsemux_25_4_10_1_1_U93 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_4_fu_682_p4,
        din2 => tmp_4_fu_682_p6,
        din3 => tmp_4_fu_682_p8,
        din4 => tmp_4_fu_682_p10,
        din5 => tmp_4_fu_682_p12,
        din6 => tmp_4_fu_682_p14,
        din7 => tmp_4_fu_682_p16,
        din8 => tmp_4_fu_682_p18,
        din9 => tmp_4_fu_682_p20,
        din10 => tmp_4_fu_682_p22,
        din11 => tmp_4_fu_682_p24,
        def => tmp_4_fu_682_p25,
        sel => empty_65,
        dout => tmp_4_fu_682_p27);

    sparsemux_25_4_10_1_1_U94 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_5_fu_737_p4,
        din2 => tmp_5_fu_737_p6,
        din3 => tmp_5_fu_737_p8,
        din4 => tmp_5_fu_737_p10,
        din5 => tmp_5_fu_737_p12,
        din6 => tmp_5_fu_737_p14,
        din7 => tmp_5_fu_737_p16,
        din8 => tmp_5_fu_737_p18,
        din9 => tmp_5_fu_737_p20,
        din10 => tmp_5_fu_737_p22,
        din11 => tmp_5_fu_737_p24,
        def => tmp_5_fu_737_p25,
        sel => empty_66,
        dout => tmp_5_fu_737_p27);

    sparsemux_25_4_10_1_1_U95 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_6_fu_792_p4,
        din2 => tmp_6_fu_792_p6,
        din3 => tmp_6_fu_792_p8,
        din4 => tmp_6_fu_792_p10,
        din5 => tmp_6_fu_792_p12,
        din6 => tmp_6_fu_792_p14,
        din7 => tmp_6_fu_792_p16,
        din8 => tmp_6_fu_792_p18,
        din9 => tmp_6_fu_792_p20,
        din10 => tmp_6_fu_792_p22,
        din11 => tmp_6_fu_792_p24,
        def => tmp_6_fu_792_p25,
        sel => empty_67,
        dout => tmp_6_fu_792_p27);

    sparsemux_25_4_10_1_1_U96 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_7_fu_847_p4,
        din2 => tmp_7_fu_847_p6,
        din3 => tmp_7_fu_847_p8,
        din4 => tmp_7_fu_847_p10,
        din5 => tmp_7_fu_847_p12,
        din6 => tmp_7_fu_847_p14,
        din7 => tmp_7_fu_847_p16,
        din8 => tmp_7_fu_847_p18,
        din9 => tmp_7_fu_847_p20,
        din10 => tmp_7_fu_847_p22,
        din11 => tmp_7_fu_847_p24,
        def => tmp_7_fu_847_p25,
        sel => empty_68,
        dout => tmp_7_fu_847_p27);

    sparsemux_25_4_10_1_1_U97 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_8_fu_902_p4,
        din2 => tmp_8_fu_902_p6,
        din3 => tmp_8_fu_902_p8,
        din4 => tmp_8_fu_902_p10,
        din5 => tmp_8_fu_902_p12,
        din6 => tmp_8_fu_902_p14,
        din7 => tmp_8_fu_902_p16,
        din8 => tmp_8_fu_902_p18,
        din9 => tmp_8_fu_902_p20,
        din10 => tmp_8_fu_902_p22,
        din11 => tmp_8_fu_902_p24,
        def => tmp_8_fu_902_p25,
        sel => empty_69,
        dout => tmp_8_fu_902_p27);

    sparsemux_25_4_10_1_1_U98 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_9_fu_957_p4,
        din2 => tmp_9_fu_957_p6,
        din3 => tmp_9_fu_957_p8,
        din4 => tmp_9_fu_957_p10,
        din5 => tmp_9_fu_957_p12,
        din6 => tmp_9_fu_957_p14,
        din7 => tmp_9_fu_957_p16,
        din8 => tmp_9_fu_957_p18,
        din9 => tmp_9_fu_957_p20,
        din10 => tmp_9_fu_957_p22,
        din11 => tmp_9_fu_957_p24,
        def => tmp_9_fu_957_p25,
        sel => empty_70,
        dout => tmp_9_fu_957_p27);

    sparsemux_25_4_10_1_1_U99 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_1_fu_1012_p4,
        din2 => tmp_1_fu_1012_p6,
        din3 => tmp_1_fu_1012_p8,
        din4 => tmp_1_fu_1012_p10,
        din5 => tmp_1_fu_1012_p12,
        din6 => tmp_1_fu_1012_p14,
        din7 => tmp_1_fu_1012_p16,
        din8 => tmp_1_fu_1012_p18,
        din9 => tmp_1_fu_1012_p20,
        din10 => tmp_1_fu_1012_p22,
        din11 => tmp_1_fu_1012_p24,
        def => tmp_1_fu_1012_p25,
        sel => empty_71,
        dout => tmp_1_fu_1012_p27);

    sparsemux_25_4_10_1_1_U100 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_10_fu_1067_p4,
        din2 => tmp_10_fu_1067_p6,
        din3 => tmp_10_fu_1067_p8,
        din4 => tmp_10_fu_1067_p10,
        din5 => tmp_10_fu_1067_p12,
        din6 => tmp_10_fu_1067_p14,
        din7 => tmp_10_fu_1067_p16,
        din8 => tmp_10_fu_1067_p18,
        din9 => tmp_10_fu_1067_p20,
        din10 => tmp_10_fu_1067_p22,
        din11 => tmp_10_fu_1067_p24,
        def => tmp_10_fu_1067_p25,
        sel => empty_72,
        dout => tmp_10_fu_1067_p27);

    sparsemux_25_4_10_1_1_U101 : component dpss_vck190_pt_v_frmbuf_rd_0_0_sparsemux_25_4_10_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 10,
        CASE1 => "0001",
        din1_WIDTH => 10,
        CASE2 => "0010",
        din2_WIDTH => 10,
        CASE3 => "0011",
        din3_WIDTH => 10,
        CASE4 => "0100",
        din4_WIDTH => 10,
        CASE5 => "0101",
        din5_WIDTH => 10,
        CASE6 => "0110",
        din6_WIDTH => 10,
        CASE7 => "0111",
        din7_WIDTH => 10,
        CASE8 => "1000",
        din8_WIDTH => 10,
        CASE9 => "1001",
        din9_WIDTH => 10,
        CASE10 => "1010",
        din10_WIDTH => 10,
        CASE11 => "1011",
        din11_WIDTH => 10,
        def_WIDTH => 10,
        sel_WIDTH => 4,
        dout_WIDTH => 10)
    port map (
        din0 => pix_fu_403_p1,
        din1 => tmp_11_fu_1122_p4,
        din2 => tmp_11_fu_1122_p6,
        din3 => tmp_11_fu_1122_p8,
        din4 => tmp_11_fu_1122_p10,
        din5 => tmp_11_fu_1122_p12,
        din6 => tmp_11_fu_1122_p14,
        din7 => tmp_11_fu_1122_p16,
        din8 => tmp_11_fu_1122_p18,
        din9 => tmp_11_fu_1122_p20,
        din10 => tmp_11_fu_1122_p22,
        din11 => tmp_11_fu_1122_p24,
        def => tmp_11_fu_1122_p25,
        sel => empty,
        dout => tmp_11_fu_1122_p27);

    flow_control_loop_pipe_sequential_init_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_0))) then 
                    ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                end if; 
            end if;
        end if;
    end process;


    axi_last_reg_1277_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axi_last_reg_1277 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    axi_last_reg_1277 <= axi_last_fu_383_p2;
                end if; 
            end if;
        end if;
    end process;


    axi_last_reg_1277_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                axi_last_reg_1277_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    axi_last_reg_1277_pp0_iter1_reg <= axi_last_reg_1277;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln350_reg_1273_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln350_reg_1273 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln350_reg_1273 <= icmp_ln350_fu_373_p2;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln350_reg_1273_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln350_reg_1273_pp0_iter1_reg <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln350_reg_1273_pp0_iter1_reg <= icmp_ln350_reg_1273;
                end if; 
            end if;
        end if;
    end process;


    j_fu_178_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                j_fu_178 <= ap_const_lv11_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln350_fu_373_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        j_fu_178 <= j_2_fu_367_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        j_fu_178 <= ap_const_lv11_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    sof_2_reg_307_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                sof_2_reg_307 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln350_reg_1273_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                    sof_2_reg_307 <= ap_const_lv1_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    sof_2_reg_307 <= sof;
                end if; 
            end if;
        end if;
    end process;


    tmp_10_reg_1332_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_10_reg_1332 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_10_reg_1332 <= tmp_10_fu_1067_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_11_reg_1337_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_11_reg_1337 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_11_reg_1337 <= tmp_11_fu_1122_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_1_reg_1327_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_1_reg_1327 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_1_reg_1327 <= tmp_1_fu_1012_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_2_reg_1287_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_2_reg_1287 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_2_reg_1287 <= tmp_2_fu_572_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_3_reg_1292_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_3_reg_1292 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_3_reg_1292 <= tmp_3_fu_627_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_4_reg_1297_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_4_reg_1297 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_4_reg_1297 <= tmp_4_fu_682_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_5_reg_1302_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_5_reg_1302 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_5_reg_1302 <= tmp_5_fu_737_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_6_reg_1307_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_6_reg_1307 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_6_reg_1307 <= tmp_6_fu_792_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_7_reg_1312_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_7_reg_1312 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_7_reg_1312 <= tmp_7_fu_847_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_8_reg_1317_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_8_reg_1317 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_8_reg_1317 <= tmp_8_fu_902_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_9_reg_1322_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_9_reg_1322 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_9_reg_1322 <= tmp_9_fu_957_p27;
                end if; 
            end if;
        end if;
    end process;


    tmp_s_reg_1282_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_s_reg_1282 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    tmp_s_reg_1282 <= tmp_s_fu_517_p27;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_block_state2_pp0_stage0_iter1, ap_block_state3_pp0_stage0_iter2, ap_block_state3_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state3_io) or (ap_const_boolean_1 = ap_block_state3_pp0_stage0_iter2))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1)));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(img_empty_n, icmp_ln350_reg_1273)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln350_reg_1273 = ap_const_lv1_0) and (img_empty_n = ap_const_logic_0));
    end process;


    ap_block_state3_io_assign_proc : process(m_axis_video_TREADY, icmp_ln350_reg_1273_pp0_iter1_reg)
    begin
                ap_block_state3_io <= ((icmp_ln350_reg_1273_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_TREADY = ap_const_logic_0));
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(m_axis_video_TREADY, icmp_ln350_reg_1273_pp0_iter1_reg)
    begin
                ap_block_state3_pp0_stage0_iter2 <= ((icmp_ln350_reg_1273_pp0_iter1_reg = ap_const_lv1_0) and (m_axis_video_TREADY = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln350_fu_373_p2)
    begin
        if (((icmp_ln350_fu_373_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter2_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter2_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_j_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, j_fu_178)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j_1 <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_j_1 <= j_fu_178;
        end if; 
    end process;

    axi_last_fu_383_p2 <= "1" when (zext_ln350_fu_379_p1 = sub) else "0";
    icmp_ln350_fu_373_p2 <= "1" when (ap_sig_allocacmp_j_1 = div_cast1) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, img_empty_n, icmp_ln350_reg_1273, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln350_reg_1273 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_blk_n <= img_empty_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln350_reg_1273, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln350_reg_1273 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_read <= ap_const_logic_1;
        else 
            img_read <= ap_const_logic_0;
        end if; 
    end process;

    j_2_fu_367_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_j_1) + unsigned(ap_const_lv11_1));
    m_axis_video_TDATA <= (((((((((((tmp_11_reg_1337 & tmp_10_reg_1332) & tmp_1_reg_1327) & tmp_9_reg_1322) & tmp_8_reg_1317) & tmp_7_reg_1312) & tmp_6_reg_1307) & tmp_5_reg_1302) & tmp_4_reg_1297) & tmp_3_reg_1292) & tmp_2_reg_1287) & tmp_s_reg_1282);

    m_axis_video_TDATA_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, m_axis_video_TREADY, icmp_ln350_reg_1273_pp0_iter1_reg, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln350_reg_1273_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axis_video_TDATA_blk_n <= m_axis_video_TREADY;
        else 
            m_axis_video_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    m_axis_video_TDEST <= "X";
    m_axis_video_TID <= "X";
    m_axis_video_TKEEP <= ap_const_lv15_7FFF;
    m_axis_video_TLAST <= axi_last_reg_1277_pp0_iter1_reg;
    m_axis_video_TSTRB <= "XXXXXXXXXXXXXXX";
    m_axis_video_TUSER <= sof_2_reg_307;

    m_axis_video_TVALID_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln350_reg_1273_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln350_reg_1273_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            m_axis_video_TVALID <= ap_const_logic_1;
        else 
            m_axis_video_TVALID <= ap_const_logic_0;
        end if; 
    end process;

    pix_fu_403_p1 <= img_dout(10 - 1 downto 0);
    tmp_10_fu_1067_p10 <= img_dout(49 downto 40);
    tmp_10_fu_1067_p12 <= img_dout(59 downto 50);
    tmp_10_fu_1067_p14 <= img_dout(69 downto 60);
    tmp_10_fu_1067_p16 <= img_dout(79 downto 70);
    tmp_10_fu_1067_p18 <= img_dout(89 downto 80);
    tmp_10_fu_1067_p20 <= img_dout(99 downto 90);
    tmp_10_fu_1067_p22 <= img_dout(109 downto 100);
    tmp_10_fu_1067_p24 <= img_dout(119 downto 110);
    tmp_10_fu_1067_p25 <= "XXXXXXXXXX";
    tmp_10_fu_1067_p4 <= img_dout(19 downto 10);
    tmp_10_fu_1067_p6 <= img_dout(29 downto 20);
    tmp_10_fu_1067_p8 <= img_dout(39 downto 30);
    tmp_11_fu_1122_p10 <= img_dout(49 downto 40);
    tmp_11_fu_1122_p12 <= img_dout(59 downto 50);
    tmp_11_fu_1122_p14 <= img_dout(69 downto 60);
    tmp_11_fu_1122_p16 <= img_dout(79 downto 70);
    tmp_11_fu_1122_p18 <= img_dout(89 downto 80);
    tmp_11_fu_1122_p20 <= img_dout(99 downto 90);
    tmp_11_fu_1122_p22 <= img_dout(109 downto 100);
    tmp_11_fu_1122_p24 <= img_dout(119 downto 110);
    tmp_11_fu_1122_p25 <= "XXXXXXXXXX";
    tmp_11_fu_1122_p4 <= img_dout(19 downto 10);
    tmp_11_fu_1122_p6 <= img_dout(29 downto 20);
    tmp_11_fu_1122_p8 <= img_dout(39 downto 30);
    tmp_1_fu_1012_p10 <= img_dout(49 downto 40);
    tmp_1_fu_1012_p12 <= img_dout(59 downto 50);
    tmp_1_fu_1012_p14 <= img_dout(69 downto 60);
    tmp_1_fu_1012_p16 <= img_dout(79 downto 70);
    tmp_1_fu_1012_p18 <= img_dout(89 downto 80);
    tmp_1_fu_1012_p20 <= img_dout(99 downto 90);
    tmp_1_fu_1012_p22 <= img_dout(109 downto 100);
    tmp_1_fu_1012_p24 <= img_dout(119 downto 110);
    tmp_1_fu_1012_p25 <= "XXXXXXXXXX";
    tmp_1_fu_1012_p4 <= img_dout(19 downto 10);
    tmp_1_fu_1012_p6 <= img_dout(29 downto 20);
    tmp_1_fu_1012_p8 <= img_dout(39 downto 30);
    tmp_2_fu_572_p10 <= img_dout(49 downto 40);
    tmp_2_fu_572_p12 <= img_dout(59 downto 50);
    tmp_2_fu_572_p14 <= img_dout(69 downto 60);
    tmp_2_fu_572_p16 <= img_dout(79 downto 70);
    tmp_2_fu_572_p18 <= img_dout(89 downto 80);
    tmp_2_fu_572_p20 <= img_dout(99 downto 90);
    tmp_2_fu_572_p22 <= img_dout(109 downto 100);
    tmp_2_fu_572_p24 <= img_dout(119 downto 110);
    tmp_2_fu_572_p25 <= "XXXXXXXXXX";
    tmp_2_fu_572_p4 <= img_dout(19 downto 10);
    tmp_2_fu_572_p6 <= img_dout(29 downto 20);
    tmp_2_fu_572_p8 <= img_dout(39 downto 30);
    tmp_3_fu_627_p10 <= img_dout(49 downto 40);
    tmp_3_fu_627_p12 <= img_dout(59 downto 50);
    tmp_3_fu_627_p14 <= img_dout(69 downto 60);
    tmp_3_fu_627_p16 <= img_dout(79 downto 70);
    tmp_3_fu_627_p18 <= img_dout(89 downto 80);
    tmp_3_fu_627_p20 <= img_dout(99 downto 90);
    tmp_3_fu_627_p22 <= img_dout(109 downto 100);
    tmp_3_fu_627_p24 <= img_dout(119 downto 110);
    tmp_3_fu_627_p25 <= "XXXXXXXXXX";
    tmp_3_fu_627_p4 <= img_dout(19 downto 10);
    tmp_3_fu_627_p6 <= img_dout(29 downto 20);
    tmp_3_fu_627_p8 <= img_dout(39 downto 30);
    tmp_4_fu_682_p10 <= img_dout(49 downto 40);
    tmp_4_fu_682_p12 <= img_dout(59 downto 50);
    tmp_4_fu_682_p14 <= img_dout(69 downto 60);
    tmp_4_fu_682_p16 <= img_dout(79 downto 70);
    tmp_4_fu_682_p18 <= img_dout(89 downto 80);
    tmp_4_fu_682_p20 <= img_dout(99 downto 90);
    tmp_4_fu_682_p22 <= img_dout(109 downto 100);
    tmp_4_fu_682_p24 <= img_dout(119 downto 110);
    tmp_4_fu_682_p25 <= "XXXXXXXXXX";
    tmp_4_fu_682_p4 <= img_dout(19 downto 10);
    tmp_4_fu_682_p6 <= img_dout(29 downto 20);
    tmp_4_fu_682_p8 <= img_dout(39 downto 30);
    tmp_5_fu_737_p10 <= img_dout(49 downto 40);
    tmp_5_fu_737_p12 <= img_dout(59 downto 50);
    tmp_5_fu_737_p14 <= img_dout(69 downto 60);
    tmp_5_fu_737_p16 <= img_dout(79 downto 70);
    tmp_5_fu_737_p18 <= img_dout(89 downto 80);
    tmp_5_fu_737_p20 <= img_dout(99 downto 90);
    tmp_5_fu_737_p22 <= img_dout(109 downto 100);
    tmp_5_fu_737_p24 <= img_dout(119 downto 110);
    tmp_5_fu_737_p25 <= "XXXXXXXXXX";
    tmp_5_fu_737_p4 <= img_dout(19 downto 10);
    tmp_5_fu_737_p6 <= img_dout(29 downto 20);
    tmp_5_fu_737_p8 <= img_dout(39 downto 30);
    tmp_6_fu_792_p10 <= img_dout(49 downto 40);
    tmp_6_fu_792_p12 <= img_dout(59 downto 50);
    tmp_6_fu_792_p14 <= img_dout(69 downto 60);
    tmp_6_fu_792_p16 <= img_dout(79 downto 70);
    tmp_6_fu_792_p18 <= img_dout(89 downto 80);
    tmp_6_fu_792_p20 <= img_dout(99 downto 90);
    tmp_6_fu_792_p22 <= img_dout(109 downto 100);
    tmp_6_fu_792_p24 <= img_dout(119 downto 110);
    tmp_6_fu_792_p25 <= "XXXXXXXXXX";
    tmp_6_fu_792_p4 <= img_dout(19 downto 10);
    tmp_6_fu_792_p6 <= img_dout(29 downto 20);
    tmp_6_fu_792_p8 <= img_dout(39 downto 30);
    tmp_7_fu_847_p10 <= img_dout(49 downto 40);
    tmp_7_fu_847_p12 <= img_dout(59 downto 50);
    tmp_7_fu_847_p14 <= img_dout(69 downto 60);
    tmp_7_fu_847_p16 <= img_dout(79 downto 70);
    tmp_7_fu_847_p18 <= img_dout(89 downto 80);
    tmp_7_fu_847_p20 <= img_dout(99 downto 90);
    tmp_7_fu_847_p22 <= img_dout(109 downto 100);
    tmp_7_fu_847_p24 <= img_dout(119 downto 110);
    tmp_7_fu_847_p25 <= "XXXXXXXXXX";
    tmp_7_fu_847_p4 <= img_dout(19 downto 10);
    tmp_7_fu_847_p6 <= img_dout(29 downto 20);
    tmp_7_fu_847_p8 <= img_dout(39 downto 30);
    tmp_8_fu_902_p10 <= img_dout(49 downto 40);
    tmp_8_fu_902_p12 <= img_dout(59 downto 50);
    tmp_8_fu_902_p14 <= img_dout(69 downto 60);
    tmp_8_fu_902_p16 <= img_dout(79 downto 70);
    tmp_8_fu_902_p18 <= img_dout(89 downto 80);
    tmp_8_fu_902_p20 <= img_dout(99 downto 90);
    tmp_8_fu_902_p22 <= img_dout(109 downto 100);
    tmp_8_fu_902_p24 <= img_dout(119 downto 110);
    tmp_8_fu_902_p25 <= "XXXXXXXXXX";
    tmp_8_fu_902_p4 <= img_dout(19 downto 10);
    tmp_8_fu_902_p6 <= img_dout(29 downto 20);
    tmp_8_fu_902_p8 <= img_dout(39 downto 30);
    tmp_9_fu_957_p10 <= img_dout(49 downto 40);
    tmp_9_fu_957_p12 <= img_dout(59 downto 50);
    tmp_9_fu_957_p14 <= img_dout(69 downto 60);
    tmp_9_fu_957_p16 <= img_dout(79 downto 70);
    tmp_9_fu_957_p18 <= img_dout(89 downto 80);
    tmp_9_fu_957_p20 <= img_dout(99 downto 90);
    tmp_9_fu_957_p22 <= img_dout(109 downto 100);
    tmp_9_fu_957_p24 <= img_dout(119 downto 110);
    tmp_9_fu_957_p25 <= "XXXXXXXXXX";
    tmp_9_fu_957_p4 <= img_dout(19 downto 10);
    tmp_9_fu_957_p6 <= img_dout(29 downto 20);
    tmp_9_fu_957_p8 <= img_dout(39 downto 30);
    tmp_s_fu_517_p10 <= img_dout(49 downto 40);
    tmp_s_fu_517_p12 <= img_dout(59 downto 50);
    tmp_s_fu_517_p14 <= img_dout(69 downto 60);
    tmp_s_fu_517_p16 <= img_dout(79 downto 70);
    tmp_s_fu_517_p18 <= img_dout(89 downto 80);
    tmp_s_fu_517_p20 <= img_dout(99 downto 90);
    tmp_s_fu_517_p22 <= img_dout(109 downto 100);
    tmp_s_fu_517_p24 <= img_dout(119 downto 110);
    tmp_s_fu_517_p25 <= "XXXXXXXXXX";
    tmp_s_fu_517_p4 <= img_dout(19 downto 10);
    tmp_s_fu_517_p6 <= img_dout(29 downto 20);
    tmp_s_fu_517_p8 <= img_dout(39 downto 30);
    zext_ln350_fu_379_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_j_1),12));
end behav;
