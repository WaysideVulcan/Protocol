// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        sub_ln343,
        p_out,
        p_out_ap_vld,
        p_out1,
        p_out1_ap_vld,
        p_out2,
        p_out2_ap_vld,
        p_out3,
        p_out3_ap_vld,
        p_out4,
        p_out4_ap_vld,
        p_out5,
        p_out5_ap_vld,
        p_out6,
        p_out6_ap_vld,
        p_out7,
        p_out7_ap_vld,
        p_out8,
        p_out8_ap_vld,
        p_out9,
        p_out9_ap_vld,
        p_out10,
        p_out10_ap_vld,
        p_out11,
        p_out11_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [5:0] sub_ln343;
output  [3:0] p_out;
output   p_out_ap_vld;
output  [3:0] p_out1;
output   p_out1_ap_vld;
output  [3:0] p_out2;
output   p_out2_ap_vld;
output  [3:0] p_out3;
output   p_out3_ap_vld;
output  [3:0] p_out4;
output   p_out4_ap_vld;
output  [3:0] p_out5;
output   p_out5_ap_vld;
output  [3:0] p_out6;
output   p_out6_ap_vld;
output  [3:0] p_out7;
output   p_out7_ap_vld;
output  [3:0] p_out8;
output   p_out8_ap_vld;
output  [3:0] p_out9;
output   p_out9_ap_vld;
output  [3:0] p_out10;
output   p_out10_ap_vld;
output  [3:0] p_out11;
output   p_out11_ap_vld;

reg ap_idle;
reg p_out_ap_vld;
reg p_out1_ap_vld;
reg p_out2_ap_vld;
reg p_out3_ap_vld;
reg p_out4_ap_vld;
reg p_out5_ap_vld;
reg p_out6_ap_vld;
reg p_out7_ap_vld;
reg p_out8_ap_vld;
reg p_out9_ap_vld;
reg p_out10_ap_vld;
reg p_out11_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln341_fu_258_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [5:0] mapComp_address0;
reg    mapComp_ce0;
wire   [3:0] mapComp_q0;
reg   [3:0] i_1_reg_682;
wire    ap_block_pp0_stage0_11001;
reg   [0:0] icmp_ln341_reg_686;
wire   [31:0] zext_ln343_1_fu_274_p1;
wire    ap_block_pp0_stage0;
reg   [3:0] i_fu_74;
wire   [3:0] add_ln341_fu_252_p2;
wire    ap_loop_init;
reg   [3:0] ap_sig_allocacmp_i_1;
reg   [4:0] empty_fu_78;
wire   [4:0] map_cast_fu_427_p1;
reg   [4:0] empty_393_fu_82;
reg   [4:0] empty_394_fu_86;
reg   [4:0] empty_395_fu_90;
reg   [4:0] empty_396_fu_94;
reg   [4:0] empty_397_fu_98;
reg   [4:0] empty_398_fu_102;
reg   [4:0] empty_399_fu_106;
reg   [4:0] empty_400_fu_110;
reg   [4:0] empty_401_fu_114;
reg   [4:0] empty_402_fu_118;
reg   [4:0] empty_403_fu_122;
wire    ap_block_pp0_stage0_01001;
wire   [5:0] zext_ln343_fu_264_p1;
wire   [5:0] add_ln343_fu_268_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 i_1_reg_682 = 4'd0;
#0 icmp_ln341_reg_686 = 1'd0;
#0 i_fu_74 = 4'd0;
#0 empty_fu_78 = 5'd0;
#0 empty_393_fu_82 = 5'd0;
#0 empty_394_fu_86 = 5'd0;
#0 empty_395_fu_90 = 5'd0;
#0 empty_396_fu_94 = 5'd0;
#0 empty_397_fu_98 = 5'd0;
#0 empty_398_fu_102 = 5'd0;
#0 empty_399_fu_106 = 5'd0;
#0 empty_400_fu_110 = 5'd0;
#0 empty_401_fu_114 = 5'd0;
#0 empty_402_fu_118 = 5'd0;
#0 empty_403_fu_122 = 5'd0;
#0 ap_done_reg = 1'b0;
#0 ap_loop_exit_ready_pp0_iter1_reg = 1'b0;
end

dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1_mapComp_ROM_AUTO_1R #(
    .DataWidth( 4 ),
    .AddressRange( 48 ),
    .AddressWidth( 6 ))
mapComp_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mapComp_address0),
    .ce0(mapComp_ce0),
    .q0(mapComp_q0)
);

dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            if (((ap_loop_exit_ready == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
            end else if ((1'b0 == ap_block_pp0_stage0_11001)) begin
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_393_fu_82[0] <= 1'b0;
        empty_393_fu_82[1] <= 1'b0;
        empty_393_fu_82[2] <= 1'b0;
        empty_393_fu_82[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_393_fu_82[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_394_fu_86[0] <= 1'b0;
        empty_394_fu_86[1] <= 1'b0;
        empty_394_fu_86[2] <= 1'b0;
        empty_394_fu_86[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_394_fu_86[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_395_fu_90[0] <= 1'b0;
        empty_395_fu_90[1] <= 1'b0;
        empty_395_fu_90[2] <= 1'b0;
        empty_395_fu_90[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_395_fu_90[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_396_fu_94[0] <= 1'b0;
        empty_396_fu_94[1] <= 1'b0;
        empty_396_fu_94[2] <= 1'b0;
        empty_396_fu_94[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd4) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_396_fu_94[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_397_fu_98[0] <= 1'b0;
        empty_397_fu_98[1] <= 1'b0;
        empty_397_fu_98[2] <= 1'b0;
        empty_397_fu_98[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd5) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_397_fu_98[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_398_fu_102[0] <= 1'b0;
        empty_398_fu_102[1] <= 1'b0;
        empty_398_fu_102[2] <= 1'b0;
        empty_398_fu_102[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd6) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_398_fu_102[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_399_fu_106[0] <= 1'b0;
        empty_399_fu_106[1] <= 1'b0;
        empty_399_fu_106[2] <= 1'b0;
        empty_399_fu_106[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd7) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_399_fu_106[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_400_fu_110[0] <= 1'b0;
        empty_400_fu_110[1] <= 1'b0;
        empty_400_fu_110[2] <= 1'b0;
        empty_400_fu_110[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd8) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_400_fu_110[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_401_fu_114[0] <= 1'b0;
        empty_401_fu_114[1] <= 1'b0;
        empty_401_fu_114[2] <= 1'b0;
        empty_401_fu_114[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd9) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_401_fu_114[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_402_fu_118[0] <= 1'b0;
        empty_402_fu_118[1] <= 1'b0;
        empty_402_fu_118[2] <= 1'b0;
        empty_402_fu_118[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd10) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_402_fu_118[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_403_fu_122[0] <= 1'b0;
        empty_403_fu_122[1] <= 1'b0;
        empty_403_fu_122[2] <= 1'b0;
        empty_403_fu_122[3] <= 1'b0;
    end else begin
        if ((~(i_1_reg_682 == 4'd10) & ~(i_1_reg_682 == 4'd9) & ~(i_1_reg_682 == 4'd8) & ~(i_1_reg_682 == 4'd7) & ~(i_1_reg_682 == 4'd6) & ~(i_1_reg_682 == 4'd5) & ~(i_1_reg_682 == 4'd4) & ~(i_1_reg_682 == 4'd3) & ~(i_1_reg_682 == 4'd2) & ~(i_1_reg_682 == 4'd1) & ~(i_1_reg_682 == 4'd0) & (icmp_ln341_reg_686 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_403_fu_122[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
                empty_fu_78[0] <= 1'b0;
        empty_fu_78[1] <= 1'b0;
        empty_fu_78[2] <= 1'b0;
        empty_fu_78[3] <= 1'b0;
    end else begin
        if (((icmp_ln341_reg_686 == 1'd0) & (i_1_reg_682 == 4'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
                        empty_fu_78[3 : 0] <= map_cast_fu_427_p1[3 : 0];
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_1_reg_682 <= 4'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            i_1_reg_682 <= ap_sig_allocacmp_i_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        i_fu_74 <= 4'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            if (((icmp_ln341_fu_258_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                i_fu_74 <= add_ln341_fu_252_p2;
            end else if ((ap_loop_init == 1'b1)) begin
                i_fu_74 <= 4'd0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        icmp_ln341_reg_686 <= 1'd0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            icmp_ln341_reg_686 <= icmp_ln341_fu_258_p2;
        end
    end
end

always @ (*) begin
    if (((icmp_ln341_fu_258_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 4'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_74;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mapComp_ce0 = 1'b1;
    end else begin
        mapComp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out10_ap_vld = 1'b1;
    end else begin
        p_out10_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out11_ap_vld = 1'b1;
    end else begin
        p_out11_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out1_ap_vld = 1'b1;
    end else begin
        p_out1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out2_ap_vld = 1'b1;
    end else begin
        p_out2_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out3_ap_vld = 1'b1;
    end else begin
        p_out3_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out4_ap_vld = 1'b1;
    end else begin
        p_out4_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out5_ap_vld = 1'b1;
    end else begin
        p_out5_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out6_ap_vld = 1'b1;
    end else begin
        p_out6_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out7_ap_vld = 1'b1;
    end else begin
        p_out7_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out8_ap_vld = 1'b1;
    end else begin
        p_out8_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out9_ap_vld = 1'b1;
    end else begin
        p_out9_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln341_reg_686 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        p_out_ap_vld = 1'b1;
    end else begin
        p_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln341_fu_252_p2 = (ap_sig_allocacmp_i_1 + 4'd1);

assign add_ln343_fu_268_p2 = (sub_ln343 + zext_ln343_fu_264_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln341_fu_258_p2 = ((ap_sig_allocacmp_i_1 == 4'd12) ? 1'b1 : 1'b0);

assign mapComp_address0 = zext_ln343_1_fu_274_p1;

assign map_cast_fu_427_p1 = mapComp_q0;

assign p_out = empty_403_fu_122[3:0];

assign p_out1 = empty_402_fu_118[3:0];

assign p_out10 = empty_393_fu_82[3:0];

assign p_out11 = empty_fu_78[3:0];

assign p_out2 = empty_401_fu_114[3:0];

assign p_out3 = empty_400_fu_110[3:0];

assign p_out4 = empty_399_fu_106[3:0];

assign p_out5 = empty_398_fu_102[3:0];

assign p_out6 = empty_397_fu_98[3:0];

assign p_out7 = empty_396_fu_94[3:0];

assign p_out8 = empty_395_fu_90[3:0];

assign p_out9 = empty_394_fu_86[3:0];

assign zext_ln343_1_fu_274_p1 = add_ln343_fu_268_p2;

assign zext_ln343_fu_264_p1 = ap_sig_allocacmp_i_1;

always @ (posedge ap_clk) begin
    empty_fu_78[4] <= 1'b0;
    empty_393_fu_82[4] <= 1'b0;
    empty_394_fu_86[4] <= 1'b0;
    empty_395_fu_90[4] <= 1'b0;
    empty_396_fu_94[4] <= 1'b0;
    empty_397_fu_98[4] <= 1'b0;
    empty_398_fu_102[4] <= 1'b0;
    empty_399_fu_106[4] <= 1'b0;
    empty_400_fu_110[4] <= 1'b0;
    empty_401_fu_114[4] <= 1'b0;
    empty_402_fu_118[4] <= 1'b0;
    empty_403_fu_122[4] <= 1'b0;
end

endmodule //dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1
