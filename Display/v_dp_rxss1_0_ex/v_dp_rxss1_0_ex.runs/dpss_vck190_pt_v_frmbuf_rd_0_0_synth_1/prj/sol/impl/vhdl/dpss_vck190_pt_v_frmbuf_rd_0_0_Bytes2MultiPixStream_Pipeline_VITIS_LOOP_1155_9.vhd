-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1155_9 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_din : OUT STD_LOGIC_VECTOR (119 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    img_full_n : IN STD_LOGIC;
    img_write : OUT STD_LOGIC;
    trunc_ln2 : IN STD_LOGIC_VECTOR (10 downto 0);
    icmp_ln1144 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp392_6 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp392_5 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp392_4 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp25 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp392_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp22 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp392 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp292 : IN STD_LOGIC_VECTOR (0 downto 0);
    bytePlanes_plane0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bytePlanes_plane0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_empty_n : IN STD_LOGIC;
    bytePlanes_plane0_read : OUT STD_LOGIC;
    sub280 : IN STD_LOGIC_VECTOR (10 downto 0);
    cmp283 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1155_9 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (7 downto 0) := "00000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (7 downto 0) := "00001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (7 downto 0) := "00010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (7 downto 0) := "00100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (7 downto 0) := "01000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (7 downto 0) := "10000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv256_lc_1 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln1186_7_reg_1911 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1155_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal icmp_ln1155_reg_1871 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln1186_6_reg_1907 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_predicate_op216_write_state8 : BOOLEAN;
    signal ap_block_state8_pp0_stage7_iter0 : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal bytePlanes_plane0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln1162_reg_1875 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal or_ln1165_reg_1879 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal img_blk_n : STD_LOGIC;
    signal or_ln1186_reg_1883 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln1186_1_reg_1887 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln1186_2_reg_1891 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal or_ln1186_3_reg_1895 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal or_ln1186_4_reg_1899 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal or_ln1186_5_reg_1903 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln1162_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1165_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_fu_391_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_1_fu_397_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_2_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_3_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_4_fu_415_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_5_fu_421_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_6_fu_427_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1186_7_fu_433_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1915 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_predicate_op96_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_72_reg_1920 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_73_reg_1925 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_74_reg_1930 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_75_reg_1935 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_76_reg_1940 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_77_reg_1945 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_78_reg_1950 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_79_reg_1955 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_80_reg_1960 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_81_reg_1965 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_82_reg_1970 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_83_reg_1975 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_84_reg_1980 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_85_reg_1985 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_86_reg_1990 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_87_reg_1995 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_88_reg_2000 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_89_reg_2005 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_90_reg_2010 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal x_2_fu_202 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal x_5_fu_357_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x : STD_LOGIC_VECTOR (9 downto 0);
    signal rd1_fu_206 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_predicate_op119_read_state3 : BOOLEAN;
    signal ap_predicate_op126_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal rd2_fu_210 : STD_LOGIC_VECTOR (255 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    signal ap_predicate_op129_read_state4 : BOOLEAN;
    signal ap_predicate_op142_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal p_s_fu_565_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal p_1_fu_827_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal p_2_fu_911_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal p_3_fu_1080_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op160_write_state5 : BOOLEAN;
    signal ap_block_state5_pp0_stage4_iter0 : BOOLEAN;
    signal ap_block_pp0_stage4_01001 : BOOLEAN;
    signal p_4_fu_1257_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op178_write_state6 : BOOLEAN;
    signal ap_block_state6_pp0_stage5_iter0 : BOOLEAN;
    signal ap_block_pp0_stage5_01001 : BOOLEAN;
    signal p_5_fu_1428_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op198_write_state7 : BOOLEAN;
    signal ap_block_state7_pp0_stage6_iter0 : BOOLEAN;
    signal ap_block_pp0_stage6_01001 : BOOLEAN;
    signal p_6_fu_1605_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage7_01001 : BOOLEAN;
    signal p_0_fu_1788_p25 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal zext_ln1155_fu_363_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln1162_fu_373_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_68_fu_555_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_67_fu_545_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_66_fu_535_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_65_fu_525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_56_fu_515_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_54_fu_495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_53_fu_485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_fu_475_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_51_fu_465_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_455_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1182_fu_451_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_901_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_891_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_91_fu_881_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1184_fu_877_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_105_fu_1070_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_1060_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_103_fu_1050_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_102_fu_1040_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_101_fu_1030_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_100_fu_1020_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_99_fu_1010_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_1000_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_97_fu_990_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_96_fu_980_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_95_fu_970_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_94_fu_960_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_117_fu_1247_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_116_fu_1237_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_115_fu_1227_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_114_fu_1217_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_113_fu_1207_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_112_fu_1197_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_111_fu_1187_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_110_fu_1177_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_109_fu_1167_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_108_fu_1157_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_107_fu_1147_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_106_fu_1137_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_128_fu_1418_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_127_fu_1408_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_126_fu_1398_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_125_fu_1388_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_124_fu_1378_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_123_fu_1368_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_122_fu_1358_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1183_fu_1354_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_121_fu_1344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_120_fu_1334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_119_fu_1324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_118_fu_1314_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_140_fu_1595_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_139_fu_1585_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_138_fu_1575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_137_fu_1565_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_136_fu_1555_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_135_fu_1545_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_134_fu_1535_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_133_fu_1525_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_132_fu_1515_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_131_fu_1505_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_130_fu_1495_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_129_fu_1485_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_152_fu_1778_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_151_fu_1768_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_150_fu_1758_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_149_fu_1748_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_148_fu_1738_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_147_fu_1728_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_146_fu_1718_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_145_fu_1708_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_144_fu_1698_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_143_fu_1688_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_142_fu_1678_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_141_fu_1668_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln1155_reg_1871_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln1155_reg_1871 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln1155_reg_1871 <= icmp_ln1155_fu_367_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1162_reg_1875_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1162_reg_1875 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1162_reg_1875 <= or_ln1162_fu_379_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1165_reg_1879_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1165_reg_1879 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1165_reg_1879 <= or_ln1165_fu_385_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_1_reg_1887_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_1_reg_1887 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_1_reg_1887 <= or_ln1186_1_fu_397_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_2_reg_1891_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_2_reg_1891 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_2_reg_1891 <= or_ln1186_2_fu_403_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_3_reg_1895_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_3_reg_1895 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_3_reg_1895 <= or_ln1186_3_fu_409_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_4_reg_1899_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_4_reg_1899 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_4_reg_1899 <= or_ln1186_4_fu_415_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_5_reg_1903_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_5_reg_1903 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_5_reg_1903 <= or_ln1186_5_fu_421_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_6_reg_1907_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_6_reg_1907 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_6_reg_1907 <= or_ln1186_6_fu_427_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_7_reg_1911_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_7_reg_1911 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_7_reg_1911 <= or_ln1186_7_fu_433_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1186_reg_1883_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1186_reg_1883 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1186_reg_1883 <= or_ln1186_fu_391_p2;
                end if; 
            end if;
        end if;
    end process;


    rd1_fu_206_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rd1_fu_206 <= ap_const_lv256_lc_1;
            else
                if (((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln1162_reg_1875 = ap_const_lv1_1))) then 
                    rd1_fu_206 <= bytePlanes_plane0_dout;
                end if; 
            end if;
        end if;
    end process;


    rd2_fu_210_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                rd2_fu_210 <= ap_const_lv256_lc_1;
            else
                if (((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln1165_reg_1879 = ap_const_lv1_1))) then 
                    rd2_fu_210 <= bytePlanes_plane0_dout;
                end if; 
            end if;
        end if;
    end process;


    tmp_72_reg_1920_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_72_reg_1920 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_72_reg_1920 <= bytePlanes_plane0_dout(111 downto 104);
                end if; 
            end if;
        end if;
    end process;


    tmp_73_reg_1925_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_73_reg_1925 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_73_reg_1925 <= bytePlanes_plane0_dout(119 downto 112);
                end if; 
            end if;
        end if;
    end process;


    tmp_74_reg_1930_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_74_reg_1930 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_74_reg_1930 <= bytePlanes_plane0_dout(127 downto 120);
                end if; 
            end if;
        end if;
    end process;


    tmp_75_reg_1935_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_75_reg_1935 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_75_reg_1935 <= bytePlanes_plane0_dout(135 downto 128);
                end if; 
            end if;
        end if;
    end process;


    tmp_76_reg_1940_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_76_reg_1940 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_76_reg_1940 <= bytePlanes_plane0_dout(143 downto 136);
                end if; 
            end if;
        end if;
    end process;


    tmp_77_reg_1945_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_77_reg_1945 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_77_reg_1945 <= bytePlanes_plane0_dout(151 downto 144);
                end if; 
            end if;
        end if;
    end process;


    tmp_78_reg_1950_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_78_reg_1950 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_78_reg_1950 <= bytePlanes_plane0_dout(159 downto 152);
                end if; 
            end if;
        end if;
    end process;


    tmp_79_reg_1955_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_79_reg_1955 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_79_reg_1955 <= bytePlanes_plane0_dout(167 downto 160);
                end if; 
            end if;
        end if;
    end process;


    tmp_80_reg_1960_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_80_reg_1960 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_80_reg_1960 <= bytePlanes_plane0_dout(175 downto 168);
                end if; 
            end if;
        end if;
    end process;


    tmp_81_reg_1965_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_81_reg_1965 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_81_reg_1965 <= bytePlanes_plane0_dout(183 downto 176);
                end if; 
            end if;
        end if;
    end process;


    tmp_82_reg_1970_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_82_reg_1970 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_82_reg_1970 <= bytePlanes_plane0_dout(191 downto 184);
                end if; 
            end if;
        end if;
    end process;


    tmp_83_reg_1975_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_83_reg_1975 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_83_reg_1975 <= bytePlanes_plane0_dout(199 downto 192);
                end if; 
            end if;
        end if;
    end process;


    tmp_84_reg_1980_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_84_reg_1980 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_84_reg_1980 <= bytePlanes_plane0_dout(207 downto 200);
                end if; 
            end if;
        end if;
    end process;


    tmp_85_reg_1985_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_85_reg_1985 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_85_reg_1985 <= bytePlanes_plane0_dout(215 downto 208);
                end if; 
            end if;
        end if;
    end process;


    tmp_86_reg_1990_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_86_reg_1990 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_86_reg_1990 <= bytePlanes_plane0_dout(223 downto 216);
                end if; 
            end if;
        end if;
    end process;


    tmp_87_reg_1995_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_87_reg_1995 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_87_reg_1995 <= bytePlanes_plane0_dout(231 downto 224);
                end if; 
            end if;
        end if;
    end process;


    tmp_88_reg_2000_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_88_reg_2000 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_88_reg_2000 <= bytePlanes_plane0_dout(239 downto 232);
                end if; 
            end if;
        end if;
    end process;


    tmp_89_reg_2005_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_89_reg_2005 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_89_reg_2005 <= bytePlanes_plane0_dout(247 downto 240);
                end if; 
            end if;
        end if;
    end process;


    tmp_90_reg_2010_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_90_reg_2010 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_90_reg_2010 <= bytePlanes_plane0_dout(255 downto 248);
                end if; 
            end if;
        end if;
    end process;


    tmp_s_reg_1915_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_s_reg_1915 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_s_reg_1915 <= bytePlanes_plane0_dout(103 downto 96);
                end if; 
            end if;
        end if;
    end process;


    x_2_fu_202_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_2_fu_202 <= ap_const_lv10_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln1155_fu_367_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        x_2_fu_202 <= x_5_fu_357_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        x_2_fu_202 <= ap_const_lv10_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage7_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage6_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state9_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state9_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state9_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state9_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;


    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state5_pp0_stage4_iter0)
    begin
                ap_block_pp0_stage4_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage4_iter0));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;


    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state6_pp0_stage5_iter0)
    begin
                ap_block_pp0_stage5_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state6_pp0_stage5_iter0));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state7_pp0_stage6_iter0)
    begin
                ap_block_pp0_stage6_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage6_iter0));
    end process;


    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state7_pp0_stage6_iter0)
    begin
                ap_block_pp0_stage6_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage6_iter0));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state7_pp0_stage6_iter0)
    begin
                ap_block_pp0_stage6_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state7_pp0_stage6_iter0));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state8_pp0_stage7_iter0)
    begin
                ap_block_pp0_stage7_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage7_iter0));
    end process;


    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state8_pp0_stage7_iter0)
    begin
                ap_block_pp0_stage7_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage7_iter0));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state8_pp0_stage7_iter0)
    begin
                ap_block_pp0_stage7_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state8_pp0_stage7_iter0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(img_full_n, icmp_ln1155_reg_1871, bytePlanes_plane0_empty_n, ap_predicate_op96_write_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (bytePlanes_plane0_empty_n = ap_const_logic_0)) or ((img_full_n = ap_const_logic_0) and (ap_predicate_op96_write_state2 = ap_const_boolean_1)));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(img_full_n, bytePlanes_plane0_empty_n, ap_predicate_op119_read_state3, ap_predicate_op126_write_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= (((img_full_n = ap_const_logic_0) and (ap_predicate_op126_write_state3 = ap_const_boolean_1)) or ((ap_predicate_op119_read_state3 = ap_const_boolean_1) and (bytePlanes_plane0_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(img_full_n, bytePlanes_plane0_empty_n, ap_predicate_op129_read_state4, ap_predicate_op142_write_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= (((img_full_n = ap_const_logic_0) and (ap_predicate_op142_write_state4 = ap_const_boolean_1)) or ((ap_predicate_op129_read_state4 = ap_const_boolean_1) and (bytePlanes_plane0_empty_n = ap_const_logic_0)));
    end process;


    ap_block_state5_pp0_stage4_iter0_assign_proc : process(img_full_n, ap_predicate_op160_write_state5)
    begin
                ap_block_state5_pp0_stage4_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op160_write_state5 = ap_const_boolean_1));
    end process;


    ap_block_state6_pp0_stage5_iter0_assign_proc : process(img_full_n, ap_predicate_op178_write_state6)
    begin
                ap_block_state6_pp0_stage5_iter0 <= ((ap_predicate_op178_write_state6 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state7_pp0_stage6_iter0_assign_proc : process(img_full_n, ap_predicate_op198_write_state7)
    begin
                ap_block_state7_pp0_stage6_iter0 <= ((ap_predicate_op198_write_state7 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state8_pp0_stage7_iter0_assign_proc : process(img_full_n, ap_predicate_op216_write_state8)
    begin
                ap_block_state8_pp0_stage7_iter0 <= ((ap_predicate_op216_write_state8 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state9_pp0_stage0_iter1_assign_proc : process(img_full_n, or_ln1186_7_reg_1911)
    begin
                ap_block_state9_pp0_stage0_iter1 <= ((or_ln1186_7_reg_1911 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1155_fu_367_p2)
    begin
        if (((icmp_ln1155_fu_367_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op119_read_state3_assign_proc : process(icmp_ln1155_reg_1871, or_ln1162_reg_1875)
    begin
                ap_predicate_op119_read_state3 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1162_reg_1875 = ap_const_lv1_1));
    end process;


    ap_predicate_op126_write_state3_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_1_reg_1887)
    begin
                ap_predicate_op126_write_state3 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_1_reg_1887 = ap_const_lv1_1));
    end process;


    ap_predicate_op129_read_state4_assign_proc : process(icmp_ln1155_reg_1871, or_ln1165_reg_1879)
    begin
                ap_predicate_op129_read_state4 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1165_reg_1879 = ap_const_lv1_1));
    end process;


    ap_predicate_op142_write_state4_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_2_reg_1891)
    begin
                ap_predicate_op142_write_state4 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_2_reg_1891 = ap_const_lv1_1));
    end process;


    ap_predicate_op160_write_state5_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_3_reg_1895)
    begin
                ap_predicate_op160_write_state5 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_3_reg_1895 = ap_const_lv1_1));
    end process;


    ap_predicate_op178_write_state6_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_4_reg_1899)
    begin
                ap_predicate_op178_write_state6 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_4_reg_1899 = ap_const_lv1_1));
    end process;


    ap_predicate_op198_write_state7_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_5_reg_1903)
    begin
                ap_predicate_op198_write_state7 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_5_reg_1903 = ap_const_lv1_1));
    end process;


    ap_predicate_op216_write_state8_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_6_reg_1907)
    begin
                ap_predicate_op216_write_state8 <= ((or_ln1186_6_reg_1907 = ap_const_lv1_1) and (icmp_ln1155_reg_1871 = ap_const_lv1_1));
    end process;


    ap_predicate_op96_write_state2_assign_proc : process(icmp_ln1155_reg_1871, or_ln1186_reg_1883)
    begin
                ap_predicate_op96_write_state2 <= ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (or_ln1186_reg_1883 = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage7_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_2_fu_202, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x <= ap_const_lv10_0;
        else 
            ap_sig_allocacmp_x <= x_2_fu_202;
        end if; 
    end process;


    bytePlanes_plane0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1155_reg_1871, bytePlanes_plane0_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, or_ln1162_reg_1875, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln1165_reg_1879)
    begin
        if ((((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln1165_reg_1879 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln1162_reg_1875 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            bytePlanes_plane0_blk_n <= bytePlanes_plane0_empty_n;
        else 
            bytePlanes_plane0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bytePlanes_plane0_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1155_reg_1871, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage1_11001, ap_predicate_op119_read_state3, ap_block_pp0_stage2_11001, ap_predicate_op129_read_state4, ap_block_pp0_stage3_11001)
    begin
        if ((((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_predicate_op129_read_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op119_read_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)))) then 
            bytePlanes_plane0_read <= ap_const_logic_1;
        else 
            bytePlanes_plane0_read <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln1155_fu_367_p2 <= "1" when (signed(zext_ln1155_fu_363_p1) < signed(trunc_ln2)) else "0";
    icmp_ln1162_fu_373_p2 <= "1" when (signed(zext_ln1155_fu_363_p1) < signed(sub280)) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, img_full_n, or_ln1186_7_reg_1911, ap_CS_fsm_pp0_stage7, icmp_ln1155_reg_1871, ap_predicate_op216_write_state8, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, or_ln1186_reg_1883, or_ln1186_1_reg_1887, or_ln1186_2_reg_1891, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, or_ln1186_3_reg_1895, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, or_ln1186_4_reg_1899, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, or_ln1186_5_reg_1903, ap_block_pp0_stage7, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op216_write_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (or_ln1186_5_reg_1903 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (or_ln1186_4_reg_1899 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4) and (or_ln1186_3_reg_1895 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3) and (or_ln1186_2_reg_1891 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln1186_1_reg_1887 = ap_const_lv1_1)) or ((icmp_ln1155_reg_1871 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln1186_reg_1883 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln1186_7_reg_1911 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_blk_n <= img_full_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1186_7_reg_1911, ap_CS_fsm_pp0_stage7, ap_predicate_op216_write_state8, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_predicate_op96_write_state2, ap_predicate_op126_write_state3, ap_predicate_op142_write_state4, p_s_fu_565_p25, ap_block_pp0_stage1_01001, p_1_fu_827_p25, ap_block_pp0_stage2_01001, p_2_fu_911_p25, ap_block_pp0_stage3_01001, p_3_fu_1080_p25, ap_predicate_op160_write_state5, ap_block_pp0_stage4_01001, p_4_fu_1257_p25, ap_predicate_op178_write_state6, ap_block_pp0_stage5_01001, p_5_fu_1428_p25, ap_predicate_op198_write_state7, ap_block_pp0_stage6_01001, p_6_fu_1605_p25, ap_block_pp0_stage7_01001, p_0_fu_1788_p25, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (or_ln1186_7_reg_1911 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_din <= p_0_fu_1788_p25;
        elsif (((ap_predicate_op216_write_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            img_din <= p_6_fu_1605_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage6_01001) and (ap_predicate_op198_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            img_din <= p_5_fu_1428_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_01001) and (ap_predicate_op178_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            img_din <= p_4_fu_1257_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage4_01001) and (ap_predicate_op160_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            img_din <= p_3_fu_1080_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_predicate_op142_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            img_din <= p_2_fu_911_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_predicate_op126_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_din <= p_1_fu_827_p25;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op96_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            img_din <= p_s_fu_565_p25;
        else 
            img_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1186_7_reg_1911, ap_CS_fsm_pp0_stage7, ap_predicate_op216_write_state8, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage0_11001, ap_predicate_op96_write_state2, ap_block_pp0_stage1_11001, ap_predicate_op126_write_state3, ap_block_pp0_stage2_11001, ap_predicate_op142_write_state4, ap_block_pp0_stage3_11001, ap_predicate_op160_write_state5, ap_predicate_op178_write_state6, ap_predicate_op198_write_state7, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001)
    begin
        if ((((ap_predicate_op216_write_state8 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_predicate_op198_write_state7 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_predicate_op178_write_state6 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_predicate_op160_write_state5 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_predicate_op142_write_state4 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) 
    or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op126_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_predicate_op96_write_state2 = ap_const_boolean_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln1186_7_reg_1911 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_write <= ap_const_logic_1;
        else 
            img_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1162_fu_379_p2 <= (icmp_ln1162_fu_373_p2 or cmp283);
    or_ln1165_fu_385_p2 <= (icmp_ln1162_fu_373_p2 or cmp292);
    or_ln1186_1_fu_397_p2 <= (icmp_ln1162_fu_373_p2 or icmp22);
    or_ln1186_2_fu_403_p2 <= (icmp_ln1162_fu_373_p2 or cmp392_2);
    or_ln1186_3_fu_409_p2 <= (icmp_ln1162_fu_373_p2 or icmp25);
    or_ln1186_4_fu_415_p2 <= (icmp_ln1162_fu_373_p2 or cmp392_4);
    or_ln1186_5_fu_421_p2 <= (icmp_ln1162_fu_373_p2 or cmp392_5);
    or_ln1186_6_fu_427_p2 <= (icmp_ln1162_fu_373_p2 or cmp392_6);
    or_ln1186_7_fu_433_p2 <= (icmp_ln1162_fu_373_p2 or icmp_ln1144);
    or_ln1186_fu_391_p2 <= (icmp_ln1162_fu_373_p2 or cmp392);
    p_0_fu_1788_p25 <= (((((((((((((((((((((((tmp_152_fu_1778_p4 & ap_const_lv2_0) & tmp_151_fu_1768_p4) & ap_const_lv2_0) & tmp_150_fu_1758_p4) & ap_const_lv2_0) & tmp_149_fu_1748_p4) & ap_const_lv2_0) & tmp_148_fu_1738_p4) & ap_const_lv2_0) & tmp_147_fu_1728_p4) & ap_const_lv2_0) & tmp_146_fu_1718_p4) & ap_const_lv2_0) & tmp_145_fu_1708_p4) & ap_const_lv2_0) & tmp_144_fu_1698_p4) & ap_const_lv2_0) & tmp_143_fu_1688_p4) & ap_const_lv2_0) & tmp_142_fu_1678_p4) & ap_const_lv2_0) & tmp_141_fu_1668_p4) & ap_const_lv2_0);
    p_1_fu_827_p25 <= (((((((((((((((((((((((tmp_82_reg_1970 & ap_const_lv2_0) & tmp_81_reg_1965) & ap_const_lv2_0) & tmp_80_reg_1960) & ap_const_lv2_0) & tmp_79_reg_1955) & ap_const_lv2_0) & tmp_78_reg_1950) & ap_const_lv2_0) & tmp_77_reg_1945) & ap_const_lv2_0) & tmp_76_reg_1940) & ap_const_lv2_0) & tmp_75_reg_1935) & ap_const_lv2_0) & tmp_74_reg_1930) & ap_const_lv2_0) & tmp_73_reg_1925) & ap_const_lv2_0) & tmp_72_reg_1920) & ap_const_lv2_0) & tmp_s_reg_1915) & ap_const_lv2_0);
    p_2_fu_911_p25 <= (((((((((((((((((((((((tmp_93_fu_901_p4 & ap_const_lv2_0) & tmp_92_fu_891_p4) & ap_const_lv2_0) & tmp_91_fu_881_p4) & ap_const_lv2_0) & trunc_ln1184_fu_877_p1) & ap_const_lv2_0) & tmp_90_reg_2010) & ap_const_lv2_0) & tmp_89_reg_2005) & ap_const_lv2_0) & tmp_88_reg_2000) & ap_const_lv2_0) & tmp_87_reg_1995) & ap_const_lv2_0) & tmp_86_reg_1990) & ap_const_lv2_0) & tmp_85_reg_1985) & ap_const_lv2_0) & tmp_84_reg_1980) & ap_const_lv2_0) & tmp_83_reg_1975) & ap_const_lv2_0);
    p_3_fu_1080_p25 <= (((((((((((((((((((((((tmp_105_fu_1070_p4 & ap_const_lv2_0) & tmp_104_fu_1060_p4) & ap_const_lv2_0) & tmp_103_fu_1050_p4) & ap_const_lv2_0) & tmp_102_fu_1040_p4) & ap_const_lv2_0) & tmp_101_fu_1030_p4) & ap_const_lv2_0) & tmp_100_fu_1020_p4) & ap_const_lv2_0) & tmp_99_fu_1010_p4) & ap_const_lv2_0) & tmp_98_fu_1000_p4) & ap_const_lv2_0) & tmp_97_fu_990_p4) & ap_const_lv2_0) & tmp_96_fu_980_p4) & ap_const_lv2_0) & tmp_95_fu_970_p4) & ap_const_lv2_0) & tmp_94_fu_960_p4) & ap_const_lv2_0);
    p_4_fu_1257_p25 <= (((((((((((((((((((((((tmp_117_fu_1247_p4 & ap_const_lv2_0) & tmp_116_fu_1237_p4) & ap_const_lv2_0) & tmp_115_fu_1227_p4) & ap_const_lv2_0) & tmp_114_fu_1217_p4) & ap_const_lv2_0) & tmp_113_fu_1207_p4) & ap_const_lv2_0) & tmp_112_fu_1197_p4) & ap_const_lv2_0) & tmp_111_fu_1187_p4) & ap_const_lv2_0) & tmp_110_fu_1177_p4) & ap_const_lv2_0) & tmp_109_fu_1167_p4) & ap_const_lv2_0) & tmp_108_fu_1157_p4) & ap_const_lv2_0) & tmp_107_fu_1147_p4) & ap_const_lv2_0) & tmp_106_fu_1137_p4) & ap_const_lv2_0);
    p_5_fu_1428_p25 <= (((((((((((((((((((((((tmp_128_fu_1418_p4 & ap_const_lv2_0) & tmp_127_fu_1408_p4) & ap_const_lv2_0) & tmp_126_fu_1398_p4) & ap_const_lv2_0) & tmp_125_fu_1388_p4) & ap_const_lv2_0) & tmp_124_fu_1378_p4) & ap_const_lv2_0) & tmp_123_fu_1368_p4) & ap_const_lv2_0) & tmp_122_fu_1358_p4) & ap_const_lv2_0) & trunc_ln1183_fu_1354_p1) & ap_const_lv2_0) & tmp_121_fu_1344_p4) & ap_const_lv2_0) & tmp_120_fu_1334_p4) & ap_const_lv2_0) & tmp_119_fu_1324_p4) & ap_const_lv2_0) & tmp_118_fu_1314_p4) & ap_const_lv2_0);
    p_6_fu_1605_p25 <= (((((((((((((((((((((((tmp_140_fu_1595_p4 & ap_const_lv2_0) & tmp_139_fu_1585_p4) & ap_const_lv2_0) & tmp_138_fu_1575_p4) & ap_const_lv2_0) & tmp_137_fu_1565_p4) & ap_const_lv2_0) & tmp_136_fu_1555_p4) & ap_const_lv2_0) & tmp_135_fu_1545_p4) & ap_const_lv2_0) & tmp_134_fu_1535_p4) & ap_const_lv2_0) & tmp_133_fu_1525_p4) & ap_const_lv2_0) & tmp_132_fu_1515_p4) & ap_const_lv2_0) & tmp_131_fu_1505_p4) & ap_const_lv2_0) & tmp_130_fu_1495_p4) & ap_const_lv2_0) & tmp_129_fu_1485_p4) & ap_const_lv2_0);
    p_s_fu_565_p25 <= (((((((((((((((((((((((tmp_68_fu_555_p4 & ap_const_lv2_0) & tmp_67_fu_545_p4) & ap_const_lv2_0) & tmp_66_fu_535_p4) & ap_const_lv2_0) & tmp_65_fu_525_p4) & ap_const_lv2_0) & tmp_56_fu_515_p4) & ap_const_lv2_0) & tmp_55_fu_505_p4) & ap_const_lv2_0) & tmp_54_fu_495_p4) & ap_const_lv2_0) & tmp_53_fu_485_p4) & ap_const_lv2_0) & tmp_52_fu_475_p4) & ap_const_lv2_0) & tmp_51_fu_465_p4) & ap_const_lv2_0) & tmp_50_fu_455_p4) & ap_const_lv2_0) & trunc_ln1182_fu_451_p1) & ap_const_lv2_0);
    tmp_100_fu_1020_p4 <= rd1_fu_206(87 downto 80);
    tmp_101_fu_1030_p4 <= rd1_fu_206(95 downto 88);
    tmp_102_fu_1040_p4 <= rd1_fu_206(103 downto 96);
    tmp_103_fu_1050_p4 <= rd1_fu_206(111 downto 104);
    tmp_104_fu_1060_p4 <= rd1_fu_206(119 downto 112);
    tmp_105_fu_1070_p4 <= rd1_fu_206(127 downto 120);
    tmp_106_fu_1137_p4 <= rd1_fu_206(135 downto 128);
    tmp_107_fu_1147_p4 <= rd1_fu_206(143 downto 136);
    tmp_108_fu_1157_p4 <= rd1_fu_206(151 downto 144);
    tmp_109_fu_1167_p4 <= rd1_fu_206(159 downto 152);
    tmp_110_fu_1177_p4 <= rd1_fu_206(167 downto 160);
    tmp_111_fu_1187_p4 <= rd1_fu_206(175 downto 168);
    tmp_112_fu_1197_p4 <= rd1_fu_206(183 downto 176);
    tmp_113_fu_1207_p4 <= rd1_fu_206(191 downto 184);
    tmp_114_fu_1217_p4 <= rd1_fu_206(199 downto 192);
    tmp_115_fu_1227_p4 <= rd1_fu_206(207 downto 200);
    tmp_116_fu_1237_p4 <= rd1_fu_206(215 downto 208);
    tmp_117_fu_1247_p4 <= rd1_fu_206(223 downto 216);
    tmp_118_fu_1314_p4 <= rd1_fu_206(231 downto 224);
    tmp_119_fu_1324_p4 <= rd1_fu_206(239 downto 232);
    tmp_120_fu_1334_p4 <= rd1_fu_206(247 downto 240);
    tmp_121_fu_1344_p4 <= rd1_fu_206(255 downto 248);
    tmp_122_fu_1358_p4 <= rd2_fu_210(15 downto 8);
    tmp_123_fu_1368_p4 <= rd2_fu_210(23 downto 16);
    tmp_124_fu_1378_p4 <= rd2_fu_210(31 downto 24);
    tmp_125_fu_1388_p4 <= rd2_fu_210(39 downto 32);
    tmp_126_fu_1398_p4 <= rd2_fu_210(47 downto 40);
    tmp_127_fu_1408_p4 <= rd2_fu_210(55 downto 48);
    tmp_128_fu_1418_p4 <= rd2_fu_210(63 downto 56);
    tmp_129_fu_1485_p4 <= rd2_fu_210(71 downto 64);
    tmp_130_fu_1495_p4 <= rd2_fu_210(79 downto 72);
    tmp_131_fu_1505_p4 <= rd2_fu_210(87 downto 80);
    tmp_132_fu_1515_p4 <= rd2_fu_210(95 downto 88);
    tmp_133_fu_1525_p4 <= rd2_fu_210(103 downto 96);
    tmp_134_fu_1535_p4 <= rd2_fu_210(111 downto 104);
    tmp_135_fu_1545_p4 <= rd2_fu_210(119 downto 112);
    tmp_136_fu_1555_p4 <= rd2_fu_210(127 downto 120);
    tmp_137_fu_1565_p4 <= rd2_fu_210(135 downto 128);
    tmp_138_fu_1575_p4 <= rd2_fu_210(143 downto 136);
    tmp_139_fu_1585_p4 <= rd2_fu_210(151 downto 144);
    tmp_140_fu_1595_p4 <= rd2_fu_210(159 downto 152);
    tmp_141_fu_1668_p4 <= rd2_fu_210(167 downto 160);
    tmp_142_fu_1678_p4 <= rd2_fu_210(175 downto 168);
    tmp_143_fu_1688_p4 <= rd2_fu_210(183 downto 176);
    tmp_144_fu_1698_p4 <= rd2_fu_210(191 downto 184);
    tmp_145_fu_1708_p4 <= rd2_fu_210(199 downto 192);
    tmp_146_fu_1718_p4 <= rd2_fu_210(207 downto 200);
    tmp_147_fu_1728_p4 <= rd2_fu_210(215 downto 208);
    tmp_148_fu_1738_p4 <= rd2_fu_210(223 downto 216);
    tmp_149_fu_1748_p4 <= rd2_fu_210(231 downto 224);
    tmp_150_fu_1758_p4 <= rd2_fu_210(239 downto 232);
    tmp_151_fu_1768_p4 <= rd2_fu_210(247 downto 240);
    tmp_152_fu_1778_p4 <= rd2_fu_210(255 downto 248);
    tmp_50_fu_455_p4 <= bytePlanes_plane0_dout(15 downto 8);
    tmp_51_fu_465_p4 <= bytePlanes_plane0_dout(23 downto 16);
    tmp_52_fu_475_p4 <= bytePlanes_plane0_dout(31 downto 24);
    tmp_53_fu_485_p4 <= bytePlanes_plane0_dout(39 downto 32);
    tmp_54_fu_495_p4 <= bytePlanes_plane0_dout(47 downto 40);
    tmp_55_fu_505_p4 <= bytePlanes_plane0_dout(55 downto 48);
    tmp_56_fu_515_p4 <= bytePlanes_plane0_dout(63 downto 56);
    tmp_65_fu_525_p4 <= bytePlanes_plane0_dout(71 downto 64);
    tmp_66_fu_535_p4 <= bytePlanes_plane0_dout(79 downto 72);
    tmp_67_fu_545_p4 <= bytePlanes_plane0_dout(87 downto 80);
    tmp_68_fu_555_p4 <= bytePlanes_plane0_dout(95 downto 88);
    tmp_91_fu_881_p4 <= rd1_fu_206(15 downto 8);
    tmp_92_fu_891_p4 <= rd1_fu_206(23 downto 16);
    tmp_93_fu_901_p4 <= rd1_fu_206(31 downto 24);
    tmp_94_fu_960_p4 <= rd1_fu_206(39 downto 32);
    tmp_95_fu_970_p4 <= rd1_fu_206(47 downto 40);
    tmp_96_fu_980_p4 <= rd1_fu_206(55 downto 48);
    tmp_97_fu_990_p4 <= rd1_fu_206(63 downto 56);
    tmp_98_fu_1000_p4 <= rd1_fu_206(71 downto 64);
    tmp_99_fu_1010_p4 <= rd1_fu_206(79 downto 72);
    trunc_ln1182_fu_451_p1 <= bytePlanes_plane0_dout(8 - 1 downto 0);
    trunc_ln1183_fu_1354_p1 <= rd2_fu_210(8 - 1 downto 0);
    trunc_ln1184_fu_877_p1 <= rd1_fu_206(8 - 1 downto 0);
    x_5_fu_357_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x) + unsigned(ap_const_lv10_1));
    zext_ln1155_fu_363_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x),11));
end behav;
