-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1072_6 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_din : OUT STD_LOGIC_VECTOR (119 downto 0);
    img_num_data_valid : IN STD_LOGIC_VECTOR (2 downto 0);
    img_fifo_cap : IN STD_LOGIC_VECTOR (2 downto 0);
    img_full_n : IN STD_LOGIC;
    img_write : OUT STD_LOGIC;
    trunc_ln1059_2 : IN STD_LOGIC_VECTOR (11 downto 0);
    icmp_ln1062 : IN STD_LOGIC_VECTOR (0 downto 0);
    cmp224_2 : IN STD_LOGIC_VECTOR (0 downto 0);
    icmp19 : IN STD_LOGIC_VECTOR (0 downto 0);
    bytePlanes_plane0_dout : IN STD_LOGIC_VECTOR (255 downto 0);
    bytePlanes_plane0_num_data_valid : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_fifo_cap : IN STD_LOGIC_VECTOR (9 downto 0);
    bytePlanes_plane0_empty_n : IN STD_LOGIC;
    bytePlanes_plane0_read : OUT STD_LOGIC;
    sub220_cast : IN STD_LOGIC_VECTOR (11 downto 0);
    cmp224 : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of dpss_vck190_pt_v_frmbuf_rd_0_0_Bytes2MultiPixStream_Pipeline_VITIS_LOOP_1072_6 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv32_AF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101111";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_BF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111111";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_C7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000111";
    constant ap_const_lv32_C8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001000";
    constant ap_const_lv32_CF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011001111";
    constant ap_const_lv32_D0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010000";
    constant ap_const_lv32_D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011010111";
    constant ap_const_lv32_D8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011000";
    constant ap_const_lv32_DF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011111";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_E7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100111";
    constant ap_const_lv32_E8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101000";
    constant ap_const_lv32_EF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011101111";
    constant ap_const_lv32_F0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110000";
    constant ap_const_lv32_F7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011110111";
    constant ap_const_lv32_F8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111000";
    constant ap_const_lv32_FF : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal or_ln1088_3_reg_835 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_state5_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln1072_fu_287_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal icmp_ln1072_reg_819 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal or_ln1088_2_reg_831 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_predicate_op98_write_state4 : BOOLEAN;
    signal ap_block_state4_pp0_stage3_iter0 : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal bytePlanes_plane0_blk_n : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal img_blk_n : STD_LOGIC;
    signal or_ln1088_reg_823 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal or_ln1088_1_reg_827 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln1088_fu_303_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1088_1_fu_309_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1088_2_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln1088_3_fu_321_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_32_reg_839 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_predicate_op64_write_state2 : BOOLEAN;
    signal ap_block_state2_pp0_stage1_iter0 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal tmp_33_reg_844 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_34_reg_849 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_35_reg_854 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_37_reg_859 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_38_reg_864 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_39_reg_869 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_40_reg_874 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_41_reg_879 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_42_reg_884 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_43_reg_889 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_44_reg_894 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_45_reg_899 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_46_reg_904 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_47_reg_909 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_48_reg_914 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_69_reg_919 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_70_reg_924 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_71_reg_929 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_72_reg_934 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_73_reg_939 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_74_reg_944 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_75_reg_949 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal tmp_76_reg_954 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal x_1_fu_194 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal x_6_fu_281_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_x : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln1089_fu_449_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage1_01001 : BOOLEAN;
    signal zext_ln1089_1_fu_726_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_predicate_op93_write_state3 : BOOLEAN;
    signal ap_block_state3_pp0_stage2_iter0 : BOOLEAN;
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal zext_ln1089_2_fu_763_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage3_01001 : BOOLEAN;
    signal zext_ln1089_3_fu_800_p1 : STD_LOGIC_VECTOR (119 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal zext_ln1072_fu_293_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub220_cast_cast_fu_259_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal cmp221_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_403_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_30_fu_393_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_29_fu_383_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_28_fu_373_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_363_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_353_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_17_fu_343_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln1083_fu_339_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_413_p17 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_6_fu_698_p17 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_62_fu_735_p17 : STD_LOGIC_VECTOR (109 downto 0);
    signal tmp_92_fu_772_p17 : STD_LOGIC_VECTOR (109 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0_1to1 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln1072_reg_819_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln1072_reg_819 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln1072_reg_819 <= icmp_ln1072_fu_287_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1088_1_reg_827_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1088_1_reg_827 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1088_1_reg_827 <= or_ln1088_1_fu_309_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1088_2_reg_831_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1088_2_reg_831 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1088_2_reg_831 <= or_ln1088_2_fu_315_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1088_3_reg_835_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1088_3_reg_835 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1088_3_reg_835 <= or_ln1088_3_fu_321_p2;
                end if; 
            end if;
        end if;
    end process;


    or_ln1088_reg_823_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                or_ln1088_reg_823 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    or_ln1088_reg_823 <= or_ln1088_fu_303_p2;
                end if; 
            end if;
        end if;
    end process;


    tmp_32_reg_839_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_32_reg_839 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_32_reg_839 <= bytePlanes_plane0_dout(71 downto 64);
                end if; 
            end if;
        end if;
    end process;


    tmp_33_reg_844_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_33_reg_844 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_33_reg_844 <= bytePlanes_plane0_dout(79 downto 72);
                end if; 
            end if;
        end if;
    end process;


    tmp_34_reg_849_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_34_reg_849 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_34_reg_849 <= bytePlanes_plane0_dout(87 downto 80);
                end if; 
            end if;
        end if;
    end process;


    tmp_35_reg_854_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_35_reg_854 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_35_reg_854 <= bytePlanes_plane0_dout(95 downto 88);
                end if; 
            end if;
        end if;
    end process;


    tmp_37_reg_859_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_37_reg_859 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_37_reg_859 <= bytePlanes_plane0_dout(103 downto 96);
                end if; 
            end if;
        end if;
    end process;


    tmp_38_reg_864_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_38_reg_864 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_38_reg_864 <= bytePlanes_plane0_dout(111 downto 104);
                end if; 
            end if;
        end if;
    end process;


    tmp_39_reg_869_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_39_reg_869 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_39_reg_869 <= bytePlanes_plane0_dout(119 downto 112);
                end if; 
            end if;
        end if;
    end process;


    tmp_40_reg_874_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_40_reg_874 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_40_reg_874 <= bytePlanes_plane0_dout(127 downto 120);
                end if; 
            end if;
        end if;
    end process;


    tmp_41_reg_879_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_41_reg_879 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_41_reg_879 <= bytePlanes_plane0_dout(135 downto 128);
                end if; 
            end if;
        end if;
    end process;


    tmp_42_reg_884_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_42_reg_884 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_42_reg_884 <= bytePlanes_plane0_dout(143 downto 136);
                end if; 
            end if;
        end if;
    end process;


    tmp_43_reg_889_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_43_reg_889 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_43_reg_889 <= bytePlanes_plane0_dout(151 downto 144);
                end if; 
            end if;
        end if;
    end process;


    tmp_44_reg_894_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_44_reg_894 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_44_reg_894 <= bytePlanes_plane0_dout(159 downto 152);
                end if; 
            end if;
        end if;
    end process;


    tmp_45_reg_899_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_45_reg_899 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_45_reg_899 <= bytePlanes_plane0_dout(167 downto 160);
                end if; 
            end if;
        end if;
    end process;


    tmp_46_reg_904_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_46_reg_904 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_46_reg_904 <= bytePlanes_plane0_dout(175 downto 168);
                end if; 
            end if;
        end if;
    end process;


    tmp_47_reg_909_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_47_reg_909 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_47_reg_909 <= bytePlanes_plane0_dout(183 downto 176);
                end if; 
            end if;
        end if;
    end process;


    tmp_48_reg_914_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_48_reg_914 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_48_reg_914 <= bytePlanes_plane0_dout(191 downto 184);
                end if; 
            end if;
        end if;
    end process;


    tmp_69_reg_919_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_69_reg_919 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_69_reg_919 <= bytePlanes_plane0_dout(199 downto 192);
                end if; 
            end if;
        end if;
    end process;


    tmp_70_reg_924_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_70_reg_924 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_70_reg_924 <= bytePlanes_plane0_dout(207 downto 200);
                end if; 
            end if;
        end if;
    end process;


    tmp_71_reg_929_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_71_reg_929 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_71_reg_929 <= bytePlanes_plane0_dout(215 downto 208);
                end if; 
            end if;
        end if;
    end process;


    tmp_72_reg_934_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_72_reg_934 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_72_reg_934 <= bytePlanes_plane0_dout(223 downto 216);
                end if; 
            end if;
        end if;
    end process;


    tmp_73_reg_939_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_73_reg_939 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_73_reg_939 <= bytePlanes_plane0_dout(231 downto 224);
                end if; 
            end if;
        end if;
    end process;


    tmp_74_reg_944_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_74_reg_944 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_74_reg_944 <= bytePlanes_plane0_dout(239 downto 232);
                end if; 
            end if;
        end if;
    end process;


    tmp_75_reg_949_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_75_reg_949 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_75_reg_949 <= bytePlanes_plane0_dout(247 downto 240);
                end if; 
            end if;
        end if;
    end process;


    tmp_76_reg_954_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                tmp_76_reg_954 <= ap_const_lv8_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
                    tmp_76_reg_954 <= bytePlanes_plane0_dout(255 downto 248);
                end if; 
            end if;
        end if;
    end process;


    x_1_fu_194_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                x_1_fu_194 <= ap_const_lv12_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln1072_fu_287_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        x_1_fu_194 <= x_6_fu_281_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        x_1_fu_194 <= ap_const_lv12_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter0_stage0, ap_block_pp0_stage3_subdone, ap_idle_pp0_1to1, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to1 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state5_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state5_pp0_stage0_iter1));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage1_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state2_pp0_stage1_iter0)
    begin
                ap_block_pp0_stage1_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage1_iter0));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state3_pp0_stage2_iter0)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state3_pp0_stage2_iter0));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_01001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_01001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_block_state4_pp0_stage3_iter0)
    begin
                ap_block_pp0_stage3_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_pp0_stage3_iter0));
    end process;


    ap_block_state2_pp0_stage1_iter0_assign_proc : process(img_full_n, icmp_ln1072_reg_819, bytePlanes_plane0_empty_n, ap_predicate_op64_write_state2)
    begin
                ap_block_state2_pp0_stage1_iter0 <= (((img_full_n = ap_const_logic_0) and (ap_predicate_op64_write_state2 = ap_const_boolean_1)) or ((bytePlanes_plane0_empty_n = ap_const_logic_0) and (icmp_ln1072_reg_819 = ap_const_lv1_0)));
    end process;


    ap_block_state3_pp0_stage2_iter0_assign_proc : process(img_full_n, ap_predicate_op93_write_state3)
    begin
                ap_block_state3_pp0_stage2_iter0 <= ((img_full_n = ap_const_logic_0) and (ap_predicate_op93_write_state3 = ap_const_boolean_1));
    end process;


    ap_block_state4_pp0_stage3_iter0_assign_proc : process(img_full_n, ap_predicate_op98_write_state4)
    begin
                ap_block_state4_pp0_stage3_iter0 <= ((ap_predicate_op98_write_state4 = ap_const_boolean_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_block_state5_pp0_stage0_iter1_assign_proc : process(img_full_n, or_ln1088_3_reg_835)
    begin
                ap_block_state5_pp0_stage0_iter1 <= ((or_ln1088_3_reg_835 = ap_const_lv1_1) and (img_full_n = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln1072_fu_287_p2)
    begin
        if (((icmp_ln1072_fu_287_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_loop_exit_ready, ap_done_reg)
    begin
        if (((ap_loop_exit_ready = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to1_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if ((ap_enable_reg_pp0_iter1 = ap_const_logic_0)) then 
            ap_idle_pp0_1to1 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_predicate_op64_write_state2_assign_proc : process(icmp_ln1072_reg_819, or_ln1088_reg_823)
    begin
                ap_predicate_op64_write_state2 <= ((icmp_ln1072_reg_819 = ap_const_lv1_0) and (or_ln1088_reg_823 = ap_const_lv1_1));
    end process;


    ap_predicate_op93_write_state3_assign_proc : process(icmp_ln1072_reg_819, or_ln1088_1_reg_827)
    begin
                ap_predicate_op93_write_state3 <= ((icmp_ln1072_reg_819 = ap_const_lv1_0) and (or_ln1088_1_reg_827 = ap_const_lv1_1));
    end process;


    ap_predicate_op98_write_state4_assign_proc : process(icmp_ln1072_reg_819, or_ln1088_2_reg_831)
    begin
                ap_predicate_op98_write_state4 <= ((or_ln1088_2_reg_831 = ap_const_lv1_1) and (icmp_ln1072_reg_819 = ap_const_lv1_0));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage3_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_x_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, x_1_fu_194, ap_loop_init)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_x <= ap_const_lv12_0;
        else 
            ap_sig_allocacmp_x <= x_1_fu_194;
        end if; 
    end process;


    bytePlanes_plane0_blk_n_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1072_reg_819, bytePlanes_plane0_empty_n, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((icmp_ln1072_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane0_blk_n <= bytePlanes_plane0_empty_n;
        else 
            bytePlanes_plane0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    bytePlanes_plane0_read_assign_proc : process(ap_enable_reg_pp0_iter0, icmp_ln1072_reg_819, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((icmp_ln1072_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            bytePlanes_plane0_read <= ap_const_logic_1;
        else 
            bytePlanes_plane0_read <= ap_const_logic_0;
        end if; 
    end process;

    cmp221_fu_297_p2 <= "1" when (signed(zext_ln1072_fu_293_p1) < signed(sub220_cast_cast_fu_259_p1)) else "0";
    icmp_ln1072_fu_287_p2 <= "1" when (ap_sig_allocacmp_x = trunc_ln1059_2) else "0";

    img_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, img_full_n, or_ln1088_3_reg_835, ap_CS_fsm_pp0_stage3, icmp_ln1072_reg_819, ap_predicate_op98_write_state4, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, or_ln1088_reg_823, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, or_ln1088_1_reg_827, ap_block_pp0_stage3, ap_block_pp0_stage0)
    begin
        if ((((ap_predicate_op98_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((icmp_ln1072_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (or_ln1088_1_reg_827 = ap_const_lv1_1)) or ((icmp_ln1072_reg_819 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (or_ln1088_reg_823 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (or_ln1088_3_reg_835 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_blk_n <= img_full_n;
        else 
            img_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    img_din_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1088_3_reg_835, ap_CS_fsm_pp0_stage3, ap_predicate_op98_write_state4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_predicate_op64_write_state2, zext_ln1089_fu_449_p1, ap_block_pp0_stage1_01001, zext_ln1089_1_fu_726_p1, ap_predicate_op93_write_state3, ap_block_pp0_stage2_01001, zext_ln1089_2_fu_763_p1, ap_block_pp0_stage3_01001, zext_ln1089_3_fu_800_p1, ap_block_pp0_stage0_01001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_01001) and (or_ln1088_3_reg_835 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            img_din <= zext_ln1089_3_fu_800_p1;
        elsif (((ap_predicate_op98_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            img_din <= zext_ln1089_2_fu_763_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage2_01001) and (ap_predicate_op93_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            img_din <= zext_ln1089_1_fu_726_p1;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage1_01001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op64_write_state2 = ap_const_boolean_1))) then 
            img_din <= zext_ln1089_fu_449_p1;
        else 
            img_din <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    img_write_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, or_ln1088_3_reg_835, ap_CS_fsm_pp0_stage3, ap_predicate_op98_write_state4, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_predicate_op64_write_state2, ap_block_pp0_stage1_11001, ap_predicate_op93_write_state3, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001)
    begin
        if ((((ap_predicate_op98_write_state4 = ap_const_boolean_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op93_write_state3 = ap_const_boolean_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_predicate_op64_write_state2 = ap_const_boolean_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (or_ln1088_3_reg_835 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            img_write <= ap_const_logic_1;
        else 
            img_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln1088_1_fu_309_p2 <= (icmp19 or cmp221_fu_297_p2);
    or_ln1088_2_fu_315_p2 <= (cmp224_2 or cmp221_fu_297_p2);
    or_ln1088_3_fu_321_p2 <= (icmp_ln1062 or cmp221_fu_297_p2);
    or_ln1088_fu_303_p2 <= (cmp224 or cmp221_fu_297_p2);
        sub220_cast_cast_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub220_cast),13));

    tmp_17_fu_343_p4 <= bytePlanes_plane0_dout(15 downto 8);
    tmp_18_fu_353_p4 <= bytePlanes_plane0_dout(23 downto 16);
    tmp_19_fu_363_p4 <= bytePlanes_plane0_dout(31 downto 24);
    tmp_1_fu_413_p17 <= (((((((((((((((tmp_31_fu_403_p4 & ap_const_lv2_0) & tmp_30_fu_393_p4) & ap_const_lv12_0) & tmp_29_fu_383_p4) & ap_const_lv2_0) & tmp_28_fu_373_p4) & ap_const_lv12_0) & tmp_19_fu_363_p4) & ap_const_lv2_0) & tmp_18_fu_353_p4) & ap_const_lv12_0) & tmp_17_fu_343_p4) & ap_const_lv2_0) & trunc_ln1083_fu_339_p1) & ap_const_lv2_0);
    tmp_28_fu_373_p4 <= bytePlanes_plane0_dout(39 downto 32);
    tmp_29_fu_383_p4 <= bytePlanes_plane0_dout(47 downto 40);
    tmp_30_fu_393_p4 <= bytePlanes_plane0_dout(55 downto 48);
    tmp_31_fu_403_p4 <= bytePlanes_plane0_dout(63 downto 56);
    tmp_62_fu_735_p17 <= (((((((((((((((tmp_48_reg_914 & ap_const_lv2_0) & tmp_47_reg_909) & ap_const_lv12_0) & tmp_46_reg_904) & ap_const_lv2_0) & tmp_45_reg_899) & ap_const_lv12_0) & tmp_44_reg_894) & ap_const_lv2_0) & tmp_43_reg_889) & ap_const_lv12_0) & tmp_42_reg_884) & ap_const_lv2_0) & tmp_41_reg_879) & ap_const_lv2_0);
    tmp_6_fu_698_p17 <= (((((((((((((((tmp_40_reg_874 & ap_const_lv2_0) & tmp_39_reg_869) & ap_const_lv12_0) & tmp_38_reg_864) & ap_const_lv2_0) & tmp_37_reg_859) & ap_const_lv12_0) & tmp_35_reg_854) & ap_const_lv2_0) & tmp_34_reg_849) & ap_const_lv12_0) & tmp_33_reg_844) & ap_const_lv2_0) & tmp_32_reg_839) & ap_const_lv2_0);
    tmp_92_fu_772_p17 <= (((((((((((((((tmp_76_reg_954 & ap_const_lv2_0) & tmp_75_reg_949) & ap_const_lv12_0) & tmp_74_reg_944) & ap_const_lv2_0) & tmp_73_reg_939) & ap_const_lv12_0) & tmp_72_reg_934) & ap_const_lv2_0) & tmp_71_reg_929) & ap_const_lv12_0) & tmp_70_reg_924) & ap_const_lv2_0) & tmp_69_reg_919) & ap_const_lv2_0);
    trunc_ln1083_fu_339_p1 <= bytePlanes_plane0_dout(8 - 1 downto 0);
    x_6_fu_281_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_x) + unsigned(ap_const_lv12_1));
    zext_ln1072_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_x),13));
    zext_ln1089_1_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_698_p17),120));
    zext_ln1089_2_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_62_fu_735_p17),120));
    zext_ln1089_3_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_772_p17),120));
    zext_ln1089_fu_449_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_413_p17),120));
end behav;
