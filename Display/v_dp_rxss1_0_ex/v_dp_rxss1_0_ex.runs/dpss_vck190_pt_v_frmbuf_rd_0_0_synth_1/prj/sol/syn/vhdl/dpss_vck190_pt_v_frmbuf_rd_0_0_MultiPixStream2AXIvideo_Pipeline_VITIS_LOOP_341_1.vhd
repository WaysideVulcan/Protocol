-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_ln343 : IN STD_LOGIC_VECTOR (5 downto 0);
    p_out : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out_ap_vld : OUT STD_LOGIC;
    p_out1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out1_ap_vld : OUT STD_LOGIC;
    p_out2 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out2_ap_vld : OUT STD_LOGIC;
    p_out3 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out3_ap_vld : OUT STD_LOGIC;
    p_out4 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out4_ap_vld : OUT STD_LOGIC;
    p_out5 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out5_ap_vld : OUT STD_LOGIC;
    p_out6 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out6_ap_vld : OUT STD_LOGIC;
    p_out7 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out7_ap_vld : OUT STD_LOGIC;
    p_out8 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out8_ap_vld : OUT STD_LOGIC;
    p_out9 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out9_ap_vld : OUT STD_LOGIC;
    p_out10 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out10_ap_vld : OUT STD_LOGIC;
    p_out11 : OUT STD_LOGIC_VECTOR (3 downto 0);
    p_out11_ap_vld : OUT STD_LOGIC );
end;


architecture behav of dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln341_fu_258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal mapComp_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mapComp_ce0 : STD_LOGIC;
    signal mapComp_q0 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_682 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln341_reg_686 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal zext_ln343_1_fu_274_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal i_fu_74 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln341_fu_252_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_78 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal map_cast_fu_427_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_393_fu_82 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_394_fu_86 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_395_fu_90 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_396_fu_94 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_397_fu_98 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_398_fu_102 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_399_fu_106 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_400_fu_110 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_401_fu_114 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_402_fu_118 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal empty_403_fu_122 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln343_fu_264_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln343_fu_268_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1_mapComp_ROM_AUTO_1R IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (3 downto 0) );
    end component;


    component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    mapComp_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_MultiPixStream2AXIvideo_Pipeline_VITIS_LOOP_341_1_mapComp_ROM_AUTO_1R
    generic map (
        DataWidth => 4,
        AddressRange => 48,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mapComp_address0,
        ce0 => mapComp_ce0,
        q0 => mapComp_q0);

    flow_control_loop_pipe_sequential_init_U : component dpss_vck190_pt_v_frmbuf_rd_0_0_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                    if (((ap_loop_exit_ready = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                        ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
                    elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then 
                        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    empty_393_fu_82_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_393_fu_82(0) <= '0';
                empty_393_fu_82(1) <= '0';
                empty_393_fu_82(2) <= '0';
                empty_393_fu_82(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_393_fu_82(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_394_fu_86_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_394_fu_86(0) <= '0';
                empty_394_fu_86(1) <= '0';
                empty_394_fu_86(2) <= '0';
                empty_394_fu_86(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_394_fu_86(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_395_fu_90_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_395_fu_90(0) <= '0';
                empty_395_fu_90(1) <= '0';
                empty_395_fu_90(2) <= '0';
                empty_395_fu_90(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_395_fu_90(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_396_fu_94_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_396_fu_94(0) <= '0';
                empty_396_fu_94(1) <= '0';
                empty_396_fu_94(2) <= '0';
                empty_396_fu_94(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_4) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_396_fu_94(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_397_fu_98_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_397_fu_98(0) <= '0';
                empty_397_fu_98(1) <= '0';
                empty_397_fu_98(2) <= '0';
                empty_397_fu_98(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_5) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_397_fu_98(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_398_fu_102_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_398_fu_102(0) <= '0';
                empty_398_fu_102(1) <= '0';
                empty_398_fu_102(2) <= '0';
                empty_398_fu_102(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_6) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_398_fu_102(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_399_fu_106_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_399_fu_106(0) <= '0';
                empty_399_fu_106(1) <= '0';
                empty_399_fu_106(2) <= '0';
                empty_399_fu_106(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_7) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_399_fu_106(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_400_fu_110_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_400_fu_110(0) <= '0';
                empty_400_fu_110(1) <= '0';
                empty_400_fu_110(2) <= '0';
                empty_400_fu_110(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_8) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_400_fu_110(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_401_fu_114_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_401_fu_114(0) <= '0';
                empty_401_fu_114(1) <= '0';
                empty_401_fu_114(2) <= '0';
                empty_401_fu_114(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_9) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_401_fu_114(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_402_fu_118_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_402_fu_118(0) <= '0';
                empty_402_fu_118(1) <= '0';
                empty_402_fu_118(2) <= '0';
                empty_402_fu_118(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_A) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_402_fu_118(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_403_fu_122_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_403_fu_122(0) <= '0';
                empty_403_fu_122(1) <= '0';
                empty_403_fu_122(2) <= '0';
                empty_403_fu_122(3) <= '0';
            else
                if ((not((i_1_reg_682 = ap_const_lv4_A)) and not((i_1_reg_682 = ap_const_lv4_9)) and not((i_1_reg_682 = ap_const_lv4_8)) and not((i_1_reg_682 = ap_const_lv4_7)) and not((i_1_reg_682 = ap_const_lv4_6)) and not((i_1_reg_682 = ap_const_lv4_5)) and not((i_1_reg_682 = ap_const_lv4_4)) and not((i_1_reg_682 = ap_const_lv4_3)) and not((i_1_reg_682 = ap_const_lv4_2)) and not((i_1_reg_682 = ap_const_lv4_1)) and not((i_1_reg_682 = ap_const_lv4_0)) and (icmp_ln341_reg_686 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_403_fu_122(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    empty_fu_78_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                empty_fu_78(0) <= '0';
                empty_fu_78(1) <= '0';
                empty_fu_78(2) <= '0';
                empty_fu_78(3) <= '0';
            else
                if (((icmp_ln341_reg_686 = ap_const_lv1_0) and (i_1_reg_682 = ap_const_lv4_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                                        empty_fu_78(3 downto 0) <= map_cast_fu_427_p1(3 downto 0);
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_682_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                i_1_reg_682 <= ap_const_lv4_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    i_1_reg_682 <= ap_sig_allocacmp_i_1;
                end if; 
            end if;
        end if;
    end process;


    i_fu_74_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                i_fu_74 <= ap_const_lv4_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    if (((icmp_ln341_fu_258_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                        i_fu_74 <= add_ln341_fu_252_p2;
                    elsif ((ap_loop_init = ap_const_logic_1)) then 
                        i_fu_74 <= ap_const_lv4_0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    icmp_ln341_reg_686_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                icmp_ln341_reg_686 <= ap_const_lv1_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    icmp_ln341_reg_686 <= icmp_ln341_fu_258_p2;
                end if; 
            end if;
        end if;
    end process;

    empty_fu_78(4) <= '0';
    empty_393_fu_82(4) <= '0';
    empty_394_fu_86(4) <= '0';
    empty_395_fu_90(4) <= '0';
    empty_396_fu_94(4) <= '0';
    empty_397_fu_98(4) <= '0';
    empty_398_fu_102(4) <= '0';
    empty_399_fu_106(4) <= '0';
    empty_400_fu_110(4) <= '0';
    empty_401_fu_114(4) <= '0';
    empty_402_fu_118(4) <= '0';
    empty_403_fu_122(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln341_fu_252_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_1) + unsigned(ap_const_lv4_1));
    add_ln343_fu_268_p2 <= std_logic_vector(unsigned(sub_ln343) + unsigned(zext_ln343_fu_264_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln341_fu_258_p2)
    begin
        if (((icmp_ln341_fu_258_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_74, ap_loop_init)
    begin
        if (((ap_loop_init = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_i_1 <= ap_const_lv4_0;
        else 
            ap_sig_allocacmp_i_1 <= i_fu_74;
        end if; 
    end process;

    icmp_ln341_fu_258_p2 <= "1" when (ap_sig_allocacmp_i_1 = ap_const_lv4_C) else "0";
    mapComp_address0 <= zext_ln343_1_fu_274_p1(6 - 1 downto 0);

    mapComp_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            mapComp_ce0 <= ap_const_logic_1;
        else 
            mapComp_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    map_cast_fu_427_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mapComp_q0),5));
    p_out <= empty_403_fu_122(4 - 1 downto 0);
    p_out1 <= empty_402_fu_118(4 - 1 downto 0);
    p_out10 <= empty_393_fu_82(4 - 1 downto 0);

    p_out10_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out10_ap_vld <= ap_const_logic_1;
        else 
            p_out10_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out11 <= empty_fu_78(4 - 1 downto 0);

    p_out11_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out11_ap_vld <= ap_const_logic_1;
        else 
            p_out11_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out1_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out1_ap_vld <= ap_const_logic_1;
        else 
            p_out1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out2 <= empty_401_fu_114(4 - 1 downto 0);

    p_out2_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out2_ap_vld <= ap_const_logic_1;
        else 
            p_out2_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out3 <= empty_400_fu_110(4 - 1 downto 0);

    p_out3_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out3_ap_vld <= ap_const_logic_1;
        else 
            p_out3_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out4 <= empty_399_fu_106(4 - 1 downto 0);

    p_out4_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out4_ap_vld <= ap_const_logic_1;
        else 
            p_out4_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out5 <= empty_398_fu_102(4 - 1 downto 0);

    p_out5_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out5_ap_vld <= ap_const_logic_1;
        else 
            p_out5_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out6 <= empty_397_fu_98(4 - 1 downto 0);

    p_out6_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out6_ap_vld <= ap_const_logic_1;
        else 
            p_out6_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out7 <= empty_396_fu_94(4 - 1 downto 0);

    p_out7_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out7_ap_vld <= ap_const_logic_1;
        else 
            p_out7_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out8 <= empty_395_fu_90(4 - 1 downto 0);

    p_out8_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out8_ap_vld <= ap_const_logic_1;
        else 
            p_out8_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    p_out9 <= empty_394_fu_86(4 - 1 downto 0);

    p_out9_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out9_ap_vld <= ap_const_logic_1;
        else 
            p_out9_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    p_out_ap_vld_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln341_reg_686)
    begin
        if (((icmp_ln341_reg_686 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            p_out_ap_vld <= ap_const_logic_1;
        else 
            p_out_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln343_1_fu_274_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln343_fu_268_p2),32));
    zext_ln343_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_sig_allocacmp_i_1),6));
end behav;
